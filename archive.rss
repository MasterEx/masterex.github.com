<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" version="2.0">
  <channel>
    <atom:link href="https://masterex.github.io/archive.rss" rel="self" type="application/rss+xml"/>
    <title>Master's touch</title>
    <link>https://masterex.github.io/archive.rss</link>
    <description>Interesting things that touch our [geeky] lives</description>
    <language>en-us</language>
    <generator>just a shell script</generator>
    <item>
        <title>Design Pattern Synergies: Exploring the Decorator Pattern</title>
        <link>https://masterex.github.io/archive/2020/07/25/decorator-design-pattern-synergies.html</link>
        <description>Design Pattern Synergies: Exploring the Decorator Pattern</description>
        <content:encoded>
<![CDATA[
		<div class="sect1">
<h2 id="_design_pattern_synergies_exploring_the_decorator_pattern">Design Pattern Synergies: Exploring the Decorator Pattern</h2>
<div class="sectionbody">
<div class="paragraph"><p>In this article I am going to talk about the <a href="https://en.wikipedia.org/wiki/Decorator_pattern">Decorator</a>
<a href="https://en.wikipedia.org/wiki/Design_pattern">Design Pattern</a>.</p></div>
<div class="paragraph"><p>More specifically, I will present some combinations of the <strong>Decorator</strong>
pattern with other <strong>Design Patterns</strong> in order to achieve better readability and
maintainability of our code. I am going to use <strong>Java</strong> in the code segments of this article but
all the examples should be applicable to any object oriented language.</p></div>
<div class="paragraph"><p>Before examining the Design Pattern synergies let&#8217;s make sure that we have a common
understanding of the <strong>Decorator</strong> pattern.</p></div>
<div class="sect2">
<h3 id="_decorator_pattern_definition">Decorator Pattern Definition</h3>
<div class="quoteblock">
<div class="content">
<div class="paragraph"><p>In object-oriented programming, the decorator pattern is a design pattern
that allows behavior to be added to an individual object, dynamically, without
affecting the behavior of other objects from the same class.</p></div>
</div>
<div class="attribution">
&#8212; Wikipedia
</div></div>
<div class="paragraph"><p>Another definition provided in the book <a href="https://www.oreilly.com/library/view/head-first-design/0596007124/">Head First Design Patterns</a>
is the following:</p></div>
<div class="quoteblock">
<div class="content">
<div class="paragraph"><p>The Decorator Pattern attaches additional responsibilities to an object dynamically.
Decorators provide a flexible alternative to subclassing for extending functionality.</p></div>
</div>
<div class="attribution">
&#8212; Head First Design Patterns
</div></div>
</div>
<div class="sect2">
<h3 id="_understanding_the_decorator_pattern">Understanding the Decorator Pattern</h3>
<div class="paragraph"><p>The <strong>Decorator</strong> pattern has some very <em>powerful</em> features.</p></div>
<div class="paragraph"><p><strong>The Decorator Pattern attaches additional responsibilities to an object dynamically.</strong></p></div>
<div class="paragraph"><p>This means that one may <em>decorate</em> an object at <a href="https://en.wikipedia.org/wiki/Runtime_(program_lifecycle_phase)">runtime</a>
and add additional functionality to that object.</p></div>
<div class="paragraph"><p>Imagine this example. We have a program that writes a file to the file system.</p></div>
<div class="paragraph"><p>This could be expressed in code like that:</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #008080">File</span> file <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">File</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"hello.txt"</span><span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #0000FF">try</span></span><span style="color: #990000">(</span><span style="color: #008080">OutputStream</span> os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">FileOutputStream</span></span><span style="color: #990000">(</span>file<span style="color: #990000">))</span> <span style="color: #FF0000">{</span>
        os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">write</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"Hello, World!"</span><span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getBytes</span></span><span style="color: #990000">());</span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph"><p>At some point we decide that the file should be compressed! Then by following the
<strong>Decorator</strong> pattern we may add this additional functionality <em>without changing any of the involved classes</em>!</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #008080">File</span> file <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">File</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"hello.gz"</span><span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #0000FF">try</span></span><span style="color: #990000">(</span><span style="color: #008080">OutputStream</span> os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">GZIPOutputStream</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">FileOutputStream</span></span><span style="color: #990000">(</span>file<span style="color: #990000">)))</span> <span style="color: #FF0000">{</span>
        os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">write</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"Hello, World!"</span><span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getBytes</span></span><span style="color: #990000">());</span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="admonitionblock">
<table><tr>
<td class="icon">
<img src="https://masterex.github.io/archive/2020/07/25/../../../../images/icons/tip.png" alt="Tip" />
</td>
<td class="content">Have in mind that the <code>try-with-resources</code> may
<a href="https://stackoverflow.com/questions/12552863/correct-idiom-for-managing-multiple-chained-resources-in-try-with-resources-bloc">fail to close the resources</a>
in case an error is thrown during the construction of one of the wrappers.</td>
</tr></table>
</div>
<div class="paragraph"><p>To make the <em>change at runtime</em> part more obvious, let&#8217;s say that some of
our users want to select if the file will be compressed or not.</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-style: italic"><span style="color: #9A1900">// compressed is a boolean - true or false</span></span>
<span style="color: #008080">File</span> file <span style="color: #990000">=</span> compressed <span style="color: #990000">?</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">File</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"hello.gz"</span><span style="color: #990000">)</span> <span style="color: #990000">:</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">File</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"hello.txt"</span><span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #0000FF">try</span></span> <span style="color: #990000">(</span><span style="color: #008080">OutputStream</span> fos <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">FileOutputStream</span></span><span style="color: #990000">(</span>file<span style="color: #990000">);</span>
                <span style="color: #008080">OutputStream</span> os <span style="color: #990000">=</span> compressed <span style="color: #990000">?</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">GZIPOutputStream</span></span><span style="color: #990000">(</span>fos<span style="color: #990000">)</span> <span style="color: #990000">:</span> fos<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">write</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"Hello, World!"</span><span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getBytes</span></span><span style="color: #990000">());</span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph"><p>See, in the above example <em>the behavior may be decided at runtime</em>.</p></div>
<div class="paragraph"><p>The key point in this case is that the <strong>decorators</strong> all implement
the <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/OutputStream.html">OutputStream</a>
interface.</p></div>
<div class="paragraph"><p>Every <strong>Decorator</strong> adds an extra bit of functionality around the methods
defined by the <strong>interface</strong>. For example the <strong>GZIPOutputStream</strong> will wrap
the <code>os.write("Hello, World!".getBytes())</code> and compress
the data. Then the <code>write()</code> method of <strong>FileOutputStream</strong> will be called which
will write the compressed data to the specified file.</p></div>
<div class="paragraph"><p>I guess this is the most common and probably most powerful form of the
<strong>Decorator</strong> pattern. You may have an <strong>OutputStream</strong> object which has been
wrapped around <em>dozen of times</em>, each time with a <strong>decorator</strong> which adds a tiny
bit more functionality.</p></div>
<div class="paragraph"><p>Except the case described above there are times where we may need to add additional
functionality to an object. Functionality which may not follow a <em>common</em>
<em>interface</em>.</p></div>
<div class="paragraph"><p>We still can do that. Consider the following example where we want additionally to produce
a hash of the created file and print it to the user.</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #008080">File</span> file <span style="color: #990000">=</span> compressed <span style="color: #990000">?</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">File</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"hello.gz"</span><span style="color: #990000">)</span> <span style="color: #990000">:</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">File</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"hello.txt"</span><span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #0000FF">try</span></span> <span style="color: #990000">(</span><span style="color: #008080">OutputStream</span> fos <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">FileOutputStream</span></span><span style="color: #990000">(</span>file<span style="color: #990000">);</span>
                <span style="color: #008080">CheckedOutputStream</span> cos <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">CheckedOutputStream</span></span><span style="color: #990000">(</span>fos<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">Adler32</span></span><span style="color: #990000">());</span>
                <span style="color: #008080">OutputStream</span> os <span style="color: #990000">=</span> compressed <span style="color: #990000">?</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">GZIPOutputStream</span></span><span style="color: #990000">(</span>cos<span style="color: #990000">)</span> <span style="color: #990000">:</span> cos<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">write</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"Hello, World!"</span><span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getBytes</span></span><span style="color: #990000">());</span>
        System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span>cos<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getChecksum</span></span><span style="color: #990000">().</span><span style="font-weight: bold"><span style="color: #000000">getValue</span></span><span style="color: #990000">());</span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph"><p>See, we have added some extra functionality for the calculation of the
<a href="https://en.wikipedia.org/wiki/Checksum">checksum</a>. This has the implication
that now we rely on the existence of the <strong>cos</strong> variable in our code which
has the <em>explicit</em> type of <strong>CheckedOutputStream</strong>.</p></div>
<div class="paragraph"><p>This is not so bad actually. On the other hand, it would complicate things
if we wanted to write the <em>try-with-resources</em> a bit differently, by
not using separate variables for each <strong>decorator</strong>.</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #008080">File</span> file <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">File</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"hello.gz"</span><span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #0000FF">try</span></span> <span style="color: #990000">(</span><span style="color: #008080">OutputStream</span> os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">GZIPOutputStream</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">CheckedOutputStream</span></span><span style="color: #990000">(</span>
                          <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">FileOutputStream</span></span><span style="color: #990000">(</span>file<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">Adler32</span></span><span style="color: #990000">())))</span> <span style="color: #FF0000">{</span>
        os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">write</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"Hello, World!"</span><span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getBytes</span></span><span style="color: #990000">());</span>
        <span style="font-style: italic"><span style="color: #9A1900">// How we will get checksum? os is not of type CheckedOutputStream!</span></span>
        <span style="font-style: italic"><span style="color: #9A1900">// System.out.println(cos.getChecksum().getValue());</span></span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph"><p>Of course, in that specific case there is a good way to get the <strong>checksum</strong>
by keeping a reference of the <code>Adler32</code> object.</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #008080">Checksum</span> checksum <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">Adler32</span></span><span style="color: #990000">();</span>
<span style="color: #008080">File</span> file <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">File</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"hello.gz"</span><span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #0000FF">try</span></span> <span style="color: #990000">(</span><span style="color: #008080">OutputStream</span> os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">GZIPOutputStream</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">CheckedOutputStream</span></span><span style="color: #990000">(</span>
                               <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">FileOutputStream</span></span><span style="color: #990000">(</span>file<span style="color: #990000">),</span> checksum<span style="color: #990000">)))</span> <span style="color: #FF0000">{</span>
        os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">write</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"Hello, World!"</span><span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getBytes</span></span><span style="color: #990000">());</span>
        System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span>checksum<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getValue</span></span><span style="color: #990000">());</span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph"><p>This is not always the case as we may need to access fields of a specific
wrapper. In case the specific <strong>decorator</strong> we need to access is the last one
on the stack then it is easy to access it.
Otherwise keeping a reference of the specific decorator object is
the only option.</p></div>
</div>
<div class="sect2">
<h3 id="_outputstream_decorators">OutputStream Decorators</h3>
<div class="paragraph"><p>Most of the <strong>Decorators</strong> we have seen in the previous examples are part of
the <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/package-summary.html">java.io</a> package. The basic interface the <strong>Decorators</strong> use is
the <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/OutputStream.html">OutputStream</a>.</p></div>
<div class="paragraph"><p>There are numerous implementations of this <strong>Decorator</strong>. One may find them by
examining the <strong>Javadoc</strong> of the <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/OutputStream.html">OutputStream</a>
interface.</p></div>
<div class="paragraph"><p>The <strong>Direct Known Subclasses</strong> of <strong>OutputSteam</strong> are:</p></div>
<div class="ulist"><ul>
<li>
<p>
<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/ByteArrayOutputStream.html">ByteArrayOutputStream</a>
</p>
</li>
<li>
<p>
<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/FileOutputStream.html">FileOutputStream</a>
</p>
</li>
<li>
<p>
<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/FilterOutputStream.html">FilterOutputStream</a>
</p>
</li>
<li>
<p>
<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/ObjectOutputStream.html">ObjectOutputStream</a>
</p>
</li>
<li>
<p>
<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/PipedOutputStream.html">PipedOutputStream</a>
</p>
</li>
</ul></div>
<div class="paragraph"><p>In addition to that the <strong>Direct Known Subclasses</strong> of <strong>FilterOutputStream</strong> are:</p></div>
<div class="ulist"><ul>
<li>
<p>
<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/BufferedOutputStream.html">BufferedOutputStream</a>
</p>
</li>
<li>
<p>
<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/zip/CheckedOutputStream.html">CheckedOutputStream</a>
</p>
</li>
<li>
<p>
<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/javax/crypto/CipherOutputStream.html">CipherOutputStream</a>
</p>
</li>
<li>
<p>
<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/DataOutputStream.html">DataOutputStream</a>
</p>
</li>
<li>
<p>
<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/zip/DeflaterOutputStream.html">DeflaterOutputStream</a>
</p>
</li>
<li>
<p>
<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/security/DigestOutputStream.html">DigestOutputStream</a>
</p>
</li>
<li>
<p>
<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/zip/InflaterOutputStream.html">InflaterOutputStream</a>
</p>
</li>
<li>
<p>
<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/PrintStream.html">PrintStream</a>
</p>
</li>
</ul></div>
<div class="paragraph"><p>The reason <strong>FilterOutputStream</strong> has so many subclasses is that
<em>this class is the superclass of all classes that filter output streams.
These streams sit on top of an already existing output stream
(the underlying output stream) which it uses as its basic sink of data,
but possibly transforming the data along the way or providing additional functionality.</em></p></div>
<div class="paragraph"><p>Wait! There is <em>more</em>! The <strong>DeflaterOutputStream</strong> has the following
<strong>Direct Known Subclasses</strong>:</p></div>
<div class="ulist"><ul>
<li>
<p>
<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/zip/GZIPOutputStream.html">GZIPOutputStream</a>
</p>
</li>
<li>
<p>
<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/zip/ZipOutputStream.html">ZipOutputStream</a>
</p>
</li>
</ul></div>
<div class="paragraph"><p>Then <strong>ZipOutputStream</strong> has as <strong>Direct Known Subclasses</strong> the <strong>JarOutputStream</strong>.</p></div>
<div class="paragraph"><p><strong>PrintStream</strong> has as <strong>Direct Known Subclasses</strong> the <strong>LogStream</strong>, which however
is now <strong>deprecated</strong>.</p></div>
<div class="paragraph"><p>If we count <strong>all</strong> that we have in total <strong>15</strong> concrete <strong>OutputStream</strong> implementations.</p></div>
<div class="paragraph"><p>For sure one has to be pretty familiar with the <code>java.io</code> <strong>API</strong> in order to
use it in its full potential.</p></div>
<div class="paragraph"><p>The <strong>Decorator</strong> pattern is also used in other parts of the <strong>API</strong>, for
example the <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/InputStream.html">InputStream</a>.</p></div>
</div>
<div class="sect2">
<h3 id="_decorator_pattern_drawbacks">Decorator Pattern Drawbacks</h3>
<div class="paragraph"><p>By now the problems of the <strong>Decorator</strong> pattern should be apparent.</p></div>
<div class="ulist"><ul>
<li>
<p>
Too many implementations of a <strong>Decorator</strong> interface may exist. It may
 be difficult for one to find all the implementations or know how to
 use them. Note that the <strong>OutputStream</strong> classes are not even all included in
 a package exclusive to this type of <strong>decorator</strong>!
</p>
</li>
<li>
<p>
It&#8217;s difficult to access methods that are not defined by the base interface,
 especially when the specific <strong>decorator</strong> which adds the extra functionality
 is wrapped by many other instances of <strong>decorators</strong>.
</p>
</li>
</ul></div>
<div class="paragraph"><p>Below we are going to try to address these two issues by adding more
<strong>design patterns</strong> in the mix!</p></div>
</div>
<div class="sect2">
<h3 id="_code_for_comparison">Code for comparison</h3>
<div class="paragraph"><p>Before going on let&#8217;s set some common code that we are going to try
to improve later on:</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #009900">byte</span><span style="color: #990000">[]</span> data <span style="color: #990000">=</span> <span style="color: #FF0000">{</span><span style="color: #FF0000">'H'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'e'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'l'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'l'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'o'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'</span><span style="color: #CC33CC">\0</span><span style="color: #FF0000">'</span><span style="color: #FF0000">}</span><span style="color: #990000">;</span>
<span style="color: #008080">File</span> file <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">File</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"hello.gz"</span><span style="color: #990000">);</span>
<span style="color: #008080">OutputStream</span> os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">FileOutputStream</span></span><span style="color: #990000">(</span>file<span style="color: #990000">);</span>
os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">BufferedOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
<span style="color: #008080">CheckedOutputStream</span> cos <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">CheckedOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">Adler32</span></span><span style="color: #990000">());</span>
os <span style="color: #990000">=</span> cos<span style="color: #990000">;</span>
os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">GZIPOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
<span style="color: #008080">PrintStream</span> pos <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">PrintStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
os <span style="color: #990000">=</span> pos<span style="color: #990000">;</span>
os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">write</span></span><span style="color: #990000">(</span>data<span style="color: #990000">);</span>
pos<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"World!"</span><span style="color: #990000">);</span>
os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">flush</span></span><span style="color: #990000">();</span>
os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">close</span></span><span style="color: #990000">();</span>
System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span>cos<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getChecksum</span></span><span style="color: #990000">().</span><span style="font-weight: bold"><span style="color: #000000">getValue</span></span><span style="color: #990000">());</span></tt></pre></div></div>
<div class="paragraph"><p>In this example we are keeping an <strong>OutputStream</strong> object for making all the basic
actions on it and we keep references to the <strong>CheckedOutputStream</strong> and
<strong>PrintStream</strong> decorators so we may call some methods provided exclusively
by these <strong>2</strong> types.</p></div>
<div class="paragraph"><p>Let&#8217;s omit the <em>try-with-resources</em> for now for the sake of clarity.</p></div>
</div>
<div class="sect2">
<h3 id="_initiating_decorators_by_using_a_factory_method">Initiating Decorators By Using a Factory Method</h3>
<div class="paragraph"><p>The first <strong>design pattern</strong> which comes in mind when initializing objects that
share a common <strong>interface</strong> is probably the <a href="https://en.wikipedia.org/wiki/Factory_method_pattern">Factory method</a>
pattern.</p></div>
<div class="paragraph"><p>Normally a <strong>factory method</strong> accepts one or a few more arguments.
A decorator for our case could seem like that:</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">OutputStreamFactory</span> <span style="color: #FF0000">{</span>

        <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #008080">OutputStream</span> <span style="font-weight: bold"><span style="color: #000000">outputStream</span></span><span style="color: #990000">(</span>
                 <span style="color: #009900">boolean</span> buffered<span style="color: #990000">,</span> <span style="color: #009900">boolean</span> checked<span style="color: #990000">,</span>
                 <span style="color: #009900">boolean</span> gzipped<span style="color: #990000">,</span> <span style="color: #009900">boolean</span> printStreamed<span style="color: #990000">)</span>
                      <span style="font-weight: bold"><span style="color: #0000FF">throws</span></span> FileNotFoundException<span style="color: #990000">,</span> IOException <span style="color: #FF0000">{</span>
                <span style="color: #008080">OutputStream</span> os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">ByteArrayOutputStream</span></span><span style="color: #990000">();</span>
                <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #000000">outputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">,</span> buffered<span style="color: #990000">,</span> checked<span style="color: #990000">,</span> gzipped<span style="color: #990000">,</span> printStreamed<span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>

        <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #008080">OutputStream</span> <span style="font-weight: bold"><span style="color: #000000">outputStream</span></span><span style="color: #990000">(</span><span style="color: #008080">File</span> file<span style="color: #990000">,</span>
                 <span style="color: #009900">boolean</span> buffered<span style="color: #990000">,</span> <span style="color: #009900">boolean</span> checked<span style="color: #990000">,</span>
                 <span style="color: #009900">boolean</span> gzipped<span style="color: #990000">,</span> <span style="color: #009900">boolean</span> printStreamed<span style="color: #990000">)</span>
                      <span style="font-weight: bold"><span style="color: #0000FF">throws</span></span> FileNotFoundException<span style="color: #990000">,</span> IOException <span style="color: #FF0000">{</span>
                <span style="color: #008080">OutputStream</span> os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">FileOutputStream</span></span><span style="color: #990000">(</span>file<span style="color: #990000">);</span>
                <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #000000">outputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">,</span> buffered<span style="color: #990000">,</span> checked<span style="color: #990000">,</span> gzipped<span style="color: #990000">,</span> printStreamed<span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>

        <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #008080">OutputStream</span> <span style="font-weight: bold"><span style="color: #000000">outputStream</span></span><span style="color: #990000">(</span><span style="color: #008080">OutputStream</span> os<span style="color: #990000">,</span>
                 <span style="color: #009900">boolean</span> buffered<span style="color: #990000">,</span> <span style="color: #009900">boolean</span> checked<span style="color: #990000">,</span>
                 <span style="color: #009900">boolean</span> gzipped<span style="color: #990000">,</span> <span style="color: #009900">boolean</span> printStreamed<span style="color: #990000">)</span>
                      <span style="font-weight: bold"><span style="color: #0000FF">throws</span></span> FileNotFoundException<span style="color: #990000">,</span> IOException <span style="color: #FF0000">{</span>
                <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>buffered<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
                        os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">BufferedOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
                <span style="color: #FF0000">}</span>
                <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>checked<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
                        os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">CheckedOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">Adler32</span></span><span style="color: #990000">());</span>
                <span style="color: #FF0000">}</span>
                <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>gzipped<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
                        os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">GZIPOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
                <span style="color: #FF0000">}</span>
                <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>printStreamed<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
                        os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">PrintStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
                <span style="color: #FF0000">}</span>
                <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> os<span style="color: #990000">;</span>
        <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph"><p>In code this could be used like that:</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #009900">byte</span><span style="color: #990000">[]</span> data <span style="color: #990000">=</span> <span style="color: #FF0000">{</span><span style="color: #FF0000">'H'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'e'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'l'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'l'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'o'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'</span><span style="color: #CC33CC">\0</span><span style="color: #FF0000">'</span><span style="color: #FF0000">}</span><span style="color: #990000">;</span>
<span style="color: #008080">File</span> file <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">File</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"hello.gz"</span><span style="color: #990000">);</span>
<span style="color: #008080">OutputStream</span> os <span style="color: #990000">=</span> OutputStreamFactory<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">outputStream</span></span><span style="color: #990000">(</span>file<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">);</span>
os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">write</span></span><span style="color: #990000">(</span>data<span style="color: #990000">);</span>
os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">write</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"World!"</span><span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getBytes</span></span><span style="color: #990000">());</span>
os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">flush</span></span><span style="color: #990000">();</span>
os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">close</span></span><span style="color: #990000">();</span></tt></pre></div></div>
<div class="paragraph"><p>So, what have we achieved?</p></div>
<div class="paragraph"><p><strong>PROS</strong></p></div>
<div class="ulist"><ul>
<li>
<p>
Less code to initialize our decorated object.
</p>
</li>
<li>
<p>
All the possible decorators we want to support may be initialized by the
 factory method. It is easy to inspect a single method, its arguments and documentation
 and know what kind of decorators are available.
</p>
</li>
<li>
<p>
The use of the concrete decorator classes is encapsulated inside the
 <strong>factory method</strong> and this permits future changes
 with little refactoring effort.
</p>
</li>
</ul></div>
<div class="paragraph"><p><strong>CONS</strong></p></div>
<div class="ulist"><ul>
<li>
<p>
There is no way to get access to the internal decorators.
</p>
</li>
<li>
<p>
The <strong>factory method</strong> may get too crowded with many arguments.
</p>
</li>
<li>
<p>
Exception handling and object initialization may be a bit more complex.
</p>
</li>
</ul></div>
<div class="paragraph"><p>In general I don&#8217;t find personally any great benefit to the above solution.</p></div>
<div class="paragraph"><p>Maybe a bit different implementation of multiple factory methods, one for
each case could be more beneficial.</p></div>
<div class="paragraph"><p>Consider the following <strong>class</strong>:</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">OutputStreamFactory</span> <span style="color: #FF0000">{</span>

    <span style="font-style: italic"><span style="color: #9A1900">/**</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     * Creates a new ByteArrayOutputStream.</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     * </span></span><span style="color: #009900">@return</span><span style="font-style: italic"><span style="color: #9A1900"> An empty ByteArrayOutputStream.</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     */</span></span>
    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #008080">ByteArrayOutputStream</span> <span style="font-weight: bold"><span style="color: #000000">byteArrayOutputStream</span></span><span style="color: #990000">()</span> <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">ByteArrayOutputStream</span></span><span style="color: #990000">();</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #008080">FileOutputStream</span> <span style="font-weight: bold"><span style="color: #000000">fileOutputStream</span></span><span style="color: #990000">(</span><span style="color: #008080">File</span> file<span style="color: #990000">)</span>
                                   <span style="font-weight: bold"><span style="color: #0000FF">throws</span></span> FileNotFoundException <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">FileOutputStream</span></span><span style="color: #990000">(</span>file<span style="color: #990000">);</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #008080">BufferedOutputStream</span> <span style="font-weight: bold"><span style="color: #000000">bufferedOutputStream</span></span><span style="color: #990000">(</span><span style="color: #008080">OutputStream</span> os<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">BufferedOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #008080">CheckedOutputStream</span> <span style="font-weight: bold"><span style="color: #000000">checkedOutputStream</span></span><span style="color: #990000">(</span><span style="color: #008080">OutputStream</span> os<span style="color: #990000">,</span>
                                                      <span style="color: #008080">Checksum</span> checksum<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">CheckedOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">,</span> checksum<span style="color: #990000">);</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #008080">GZIPOutputStream</span> <span style="font-weight: bold"><span style="color: #000000">gzipOutputStream</span></span><span style="color: #990000">(</span><span style="color: #008080">OutputStream</span> os<span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #0000FF">throws</span></span> IOException <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">GZIPOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #008080">PrintStream</span> <span style="font-weight: bold"><span style="color: #000000">printStream</span></span><span style="color: #990000">(</span><span style="color: #008080">OutputStream</span> os<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">PrintStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
    <span style="color: #FF0000">}</span>

<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph"><p>Hmm, this way we have actually wrapped the initialization of each concrete <strong>OutputStream</strong>
to a separate method. This would be used in action like that:</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #009900">byte</span><span style="color: #990000">[]</span> data <span style="color: #990000">=</span> <span style="color: #FF0000">{</span><span style="color: #FF0000">'H'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'e'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'l'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'l'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'o'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'</span><span style="color: #CC33CC">\0</span><span style="color: #FF0000">'</span><span style="color: #FF0000">}</span><span style="color: #990000">;</span>
<span style="color: #008080">File</span> file <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">File</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"hello.gz"</span><span style="color: #990000">);</span>
<span style="color: #008080">OutputStream</span> os <span style="color: #990000">=</span> OutputStreamFactory<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">fileOutputStream</span></span><span style="color: #990000">(</span>file<span style="color: #990000">);</span>
os <span style="color: #990000">=</span> OutputStreamFactory<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">bufferedOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
<span style="color: #008080">CheckedOutputStream</span> cos <span style="color: #990000">=</span> OutputStreamFactory<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">checkedOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">Adler32</span></span><span style="color: #990000">());</span>
os <span style="color: #990000">=</span> cos<span style="color: #990000">;</span>
os <span style="color: #990000">=</span> OutputStreamFactory<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">gzipOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
<span style="color: #008080">PrintStream</span> pos <span style="color: #990000">=</span> OutputStreamFactory<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">printStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
os <span style="color: #990000">=</span> pos<span style="color: #990000">;</span>
os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">write</span></span><span style="color: #990000">(</span>data<span style="color: #990000">);</span>
pos<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"World!"</span><span style="color: #990000">);</span>
os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">flush</span></span><span style="color: #990000">();</span>
os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">close</span></span><span style="color: #990000">();</span>
System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span>cos<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getChecksum</span></span><span style="color: #990000">().</span><span style="font-weight: bold"><span style="color: #000000">getValue</span></span><span style="color: #990000">());</span></tt></pre></div></div>
<div class="paragraph"><p>If you consider this for a moment this is exactly like calling the concrete
constructors but with some additional benefits!</p></div>
<div class="paragraph"><p>Furthermore we could return the interface type but I didn&#8217;t implemented it
like that in this example to avoid extra <strong>type casting</strong>.</p></div>
<div class="paragraph"><p><strong>Extra PROS</strong></p></div>
<div class="ulist"><ul>
<li>
<p>
Easily find all the available <strong>Decorators</strong> by browsing the (preferably documented) methods of the
 <strong>OutputStreamFactory</strong> class. All modern <a href="https://en.wikipedia.org/wiki/Integrated_development_environment">IDE</a>s
 should support auto-completion.
</p>
</li>
<li>
<p>
Encapsulated classes can be altered with minimal refactoring (especially if
 we would return <strong>OutputStream</strong> objects instead of the concrete classes).
</p>
</li>
</ul></div>
<div class="paragraph"><p>In general I see benefit from having a class like this <em>only in the case there are
too many decorators around</em>. The <strong>programmer</strong> would be free to spend less time
hunting external documentation and more time relying to the every day tools
of the trade in order to find easily the required information.</p></div>
<div class="paragraph"><p><strong>CONS</strong></p></div>
<div class="ulist"><ul>
<li>
<p>
Every other drawback we had before still remains.
</p>
</li>
<li>
<p>
The <strong>API</strong> is <em>too</em> verbose. Statically importing the factory class
 makes it less verbose but maybe a bit less readable because all the factory
 methods could be mistaken for local ones.
</p>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_decorating_by_using_the_builder_pattern">Decorating by using the Builder Pattern</h3>
<div class="paragraph"><p>Another popular pattern for object creation is the <a href="https://en.wikipedia.org/wiki/Builder_pattern">Builder pattern</a>.</p></div>
<div class="paragraph"><p>We are going to use <a href="https://en.wikipedia.org/wiki/Joshua_Bloch">Josh Bloch&#8217;s</a>
variation of the pattern as described in <a href="https://www.amazon.co.uk/Effective-Java-Second-Joshua-Bloch/dp/0321356683">Effective Java</a>.</p></div>
<div class="paragraph"><p>This should look like this:</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">OutputStreamBuilder</span> <span style="color: #FF0000">{</span>

    <span style="color: #008080">enum</span> BaseType <span style="color: #FF0000">{</span>
        ByteArrayOutputStream<span style="color: #990000">,</span> FileOutputStream<span style="color: #990000">;</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #009900">boolean</span> buffered<span style="color: #990000">;</span>
    <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #009900">boolean</span> checked<span style="color: #990000">;</span>
    <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #009900">boolean</span> gzipped<span style="color: #990000">;</span>
    <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #009900">boolean</span> printStreamed<span style="color: #990000">;</span>
    <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #008080">Checksum</span> checksum<span style="color: #990000">;</span>
    <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #008080">File</span> file<span style="color: #990000">;</span>
    <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="font-weight: bold"><span style="color: #0000FF">final</span></span> <span style="color: #008080">BaseType</span> baseType<span style="color: #990000">;</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #000000">OutputStreamBuilder</span></span><span style="color: #990000">()</span> <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>baseType <span style="color: #990000">=</span> BaseType<span style="color: #990000">.</span>ByteArrayOutputStream<span style="color: #990000">;</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #000000">OutputStreamBuilder</span></span><span style="color: #990000">(</span><span style="color: #008080">File</span> file<span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #0000FF">throws</span></span> FileNotFoundException <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>file <span style="color: #990000">=</span> file<span style="color: #990000">;</span>
        <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>baseType <span style="color: #990000">=</span> BaseType<span style="color: #990000">.</span>FileOutputStream<span style="color: #990000">;</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #008080">OutputStreamBuilder</span> <span style="font-weight: bold"><span style="color: #000000">bufferedOutputStream</span></span><span style="color: #990000">(</span><span style="color: #009900">boolean</span> buffered<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>buffered <span style="color: #990000">=</span> buffered<span style="color: #990000">;</span>
        <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">;</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #008080">OutputStreamBuilder</span> <span style="font-weight: bold"><span style="color: #000000">checkedOutputStream</span></span><span style="color: #990000">(</span><span style="color: #009900">boolean</span> checked<span style="color: #990000">,</span> <span style="color: #008080">Checksum</span> checksum<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>checked <span style="color: #990000">=</span> checked<span style="color: #990000">;</span>
        <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>checksum <span style="color: #990000">=</span> checksum<span style="color: #990000">;</span>
        <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">;</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #008080">OutputStreamBuilder</span> <span style="font-weight: bold"><span style="color: #000000">gzipOutputStream</span></span><span style="color: #990000">(</span><span style="color: #009900">boolean</span> gzipped<span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #0000FF">throws</span></span> IOException <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>gzipped <span style="color: #990000">=</span> gzipped<span style="color: #990000">;</span>
        <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">;</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #008080">OutputStreamBuilder</span> <span style="font-weight: bold"><span style="color: #000000">printStream</span></span><span style="color: #990000">(</span><span style="color: #009900">boolean</span> printStreamed<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>printStreamed <span style="color: #990000">=</span> printStreamed<span style="color: #990000">;</span>
        <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">;</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #008080">OutputStream</span> <span style="font-weight: bold"><span style="color: #000000">build</span></span><span style="color: #990000">()</span> <span style="font-weight: bold"><span style="color: #0000FF">throws</span></span> FileNotFoundException<span style="color: #990000">,</span> IOException <span style="color: #FF0000">{</span>
        <span style="color: #008080">OutputStream</span> os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">null</span></span><span style="color: #990000">;</span>
        <span style="font-weight: bold"><span style="color: #0000FF">switch</span></span><span style="color: #990000">(</span>baseType<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
            <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> ByteArrayOutputStream<span style="color: #990000">:</span>
                os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">ByteArrayOutputStream</span></span><span style="color: #990000">();</span>
                <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>
            <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> FileOutputStream<span style="color: #990000">:</span>
                os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">FileOutputStream</span></span><span style="color: #990000">(</span>file<span style="color: #990000">);</span>
                <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>
            <span style="font-weight: bold"><span style="color: #0000FF">default</span></span><span style="color: #990000">:</span>
                <span style="font-weight: bold"><span style="color: #0000FF">throw</span></span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">IllegalStateException</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"Base OutputStream not specified."</span><span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>buffered<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
            os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">BufferedOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>checked<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
            os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">CheckedOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">,</span> checksum<span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>gzipped<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
            os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">GZIPOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>printStreamed<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
            os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">PrintStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>
        <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> os<span style="color: #990000">;</span>
    <span style="color: #FF0000">}</span>

<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph"><p>This could be used like that:</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #009900">byte</span><span style="color: #990000">[]</span> data <span style="color: #990000">=</span> <span style="color: #FF0000">{</span><span style="color: #FF0000">'H'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'e'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'l'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'l'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'o'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'</span><span style="color: #CC33CC">\0</span><span style="color: #FF0000">'</span><span style="color: #FF0000">}</span><span style="color: #990000">;</span>
<span style="color: #008080">File</span> file <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">File</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"hello.gz"</span><span style="color: #990000">);</span>
<span style="color: #008080">Checksum</span> cksum <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">Adler32</span></span><span style="color: #990000">();</span>
<span style="color: #008080">OutputStream</span> os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">OutputStreamBuilder</span></span><span style="color: #990000">(</span>file<span style="color: #990000">)</span>
                <span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">bufferedOutputStream</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">)</span>
                <span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">checkedOutputStream</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">,</span> cksum<span style="color: #990000">)</span>
                <span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">gzipOutputStream</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">)</span>
                <span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">printStream</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">)</span>
                <span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">build</span></span><span style="color: #990000">();</span>
<span style="color: #008080">PrintStream</span> pos <span style="color: #990000">=</span> <span style="color: #990000">(</span>PrintStream<span style="color: #990000">)</span> os<span style="color: #990000">;</span>
os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">write</span></span><span style="color: #990000">(</span>data<span style="color: #990000">);</span>
pos<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"World!"</span><span style="color: #990000">);</span>
os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">flush</span></span><span style="color: #990000">();</span>
os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">close</span></span><span style="color: #990000">();</span>
System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span>cksum<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getValue</span></span><span style="color: #990000">());</span></tt></pre></div></div>
<div class="paragraph"><p>Let&#8217;s rate this pattern!</p></div>
<div class="paragraph"><p><strong>PROS</strong></p></div>
<div class="ulist"><ul>
<li>
<p>
The <strong>decorators</strong> can be easily found under the <strong>builder</strong> class.
</p>
</li>
<li>
<p>
The syntax is short enough.
</p>
</li>
<li>
<p>
We can use the created builder to create many similar objects.
</p>
</li>
</ul></div>
<div class="paragraph"><p><strong>CONS</strong></p></div>
<div class="ulist"><ul>
<li>
<p>
We cannot access intermediate decorators. For example in the
 code above we cast the <strong>OutputStream</strong> to <strong>PrintStream</strong> which is the last
 one used. We cannot access for example the <strong>CheckedOutputStream</strong> directly.
</p>
</li>
<li>
<p>
The order of the decoration is fixed inside the <code>build()</code> method. We cannot
 decorate multiple times with the same decorator or alter the order easily without
 making the implementation too complex. However, this structure is sufficient
 for most of the common cases.
</p>
</li>
</ul></div>
<div class="paragraph"><p>A couple of notes.</p></div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>
We could make the builder class implement <strong>Autocloseable</strong>
 in order to <strong>free</strong> correctly the resources if used in <em>try-with-resources</em>.
</p>
</li>
<li>
<p>
We can omit calling the builder methods if we want to pass <strong>false</strong> to them
 because this is the default value. Additionally we could achieve a more <a href="https://en.wikipedia.org/wiki/Fluent_interface">fluent</a>
 <strong>API</strong>. if we didn&#8217;t accept arguments at all. For example calling a more <strong>fluent</strong>
 <strong>API</strong> for the previous example would be like that:
</p>
</li>
</ol></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #008080">OutputStream</span> os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">OutputStreamBuilder</span></span><span style="color: #990000">(</span>file<span style="color: #990000">)</span>
                <span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">bufferedOutputStream</span></span><span style="color: #990000">()</span>
                <span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">checkedOutputStream</span></span><span style="color: #990000">(</span>cksum<span style="color: #990000">)</span>
                <span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">gzipOutputStream</span></span><span style="color: #990000">()</span>
                <span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">printStream</span></span><span style="color: #990000">()</span>
                <span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">build</span></span><span style="color: #990000">();</span></tt></pre></div></div>
<div class="paragraph"><p>Of course having arguments makes a bit easier to use the <strong>API</strong> in some cases.
Consider the example where the <strong>compressed</strong> functionality was added
at runtime based on some condition.</p></div>
<div class="paragraph"><p>I think I personally like this way most of all so far. It has some rough
edges but it provides a beautiful and readable interface.</p></div>
</div>
<div class="sect2">
<h3 id="_now_what_more_builder_pattern">Now what? More Builder Pattern</h3>
<div class="paragraph"><p>The builder pattern as described by <strong>Bloch</strong> has some important benefits.</p></div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>
In contrast to <a href="https://en.wikipedia.org/wiki/JavaBeans">Javabean</a> initialization of objects by using the
 <strong>setters</strong> methods this way we can be sure that the created object will be
 fully initialized and has the expected state before we use it.
</p>
</li>
<li>
<p>
A factory may be re-used and create other instances of similar objects.
</p>
</li>
</ol></div>
<div class="paragraph"><p>In the case of the <strong>decorators builder</strong> we may disregard these benefits
in favor of other. The builder could be written as such:</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">OutputStreamBuilder</span> <span style="color: #FF0000">{</span>

    <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #008080">OutputStream</span> os<span style="color: #990000">;</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #000000">OutputStreamBuilder</span></span><span style="color: #990000">()</span> <span style="color: #FF0000">{</span>
        os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">ByteArrayOutputStream</span></span><span style="color: #990000">();</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #000000">OutputStreamBuilder</span></span><span style="color: #990000">(</span><span style="color: #008080">File</span> file<span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #0000FF">throws</span></span> FileNotFoundException <span style="color: #FF0000">{</span>
        os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">FileOutputStream</span></span><span style="color: #990000">(</span>file<span style="color: #990000">);</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #000000">OutputStreamBuilder</span></span><span style="color: #990000">(</span><span style="color: #008080">OutputStream</span> os<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>os <span style="color: #990000">=</span> os<span style="color: #990000">;</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #008080">OutputStreamBuilder</span> <span style="font-weight: bold"><span style="color: #000000">bufferedOutputStream</span></span><span style="color: #990000">()</span> <span style="color: #FF0000">{</span>
        os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">BufferedOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
        <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">;</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #008080">OutputStreamBuilder</span> <span style="font-weight: bold"><span style="color: #000000">checkedOutputStream</span></span><span style="color: #990000">(</span><span style="color: #008080">Checksum</span> checksum<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">CheckedOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">,</span> checksum<span style="color: #990000">);</span>
        <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">;</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #008080">OutputStreamBuilder</span> <span style="font-weight: bold"><span style="color: #000000">gzipOutputStream</span></span><span style="color: #990000">()</span> <span style="font-weight: bold"><span style="color: #0000FF">throws</span></span> IOException <span style="color: #FF0000">{</span>
        os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">GZIPOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
        <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">;</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #008080">OutputStreamBuilder</span> <span style="font-weight: bold"><span style="color: #000000">printStream</span></span><span style="color: #990000">()</span> <span style="color: #FF0000">{</span>
        os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">PrintStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
        <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">;</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #008080">OutputStream</span> <span style="font-weight: bold"><span style="color: #000000">build</span></span><span style="color: #990000">()</span> <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> os<span style="color: #990000">;</span>
    <span style="color: #FF0000">}</span>

<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph"><p>Now, we have lost the <strong>2nd</strong> previously mentioned benefit. However, we gained
something else. We can access this way the intermediate decorators:</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #008080">OutputStreamBuilder</span> builder <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">OutputStreamBuilder</span></span><span style="color: #990000">(</span>file<span style="color: #990000">)</span>
                <span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">bufferedOutputStream</span></span><span style="color: #990000">()</span>
                <span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">checkedOutputStream</span></span><span style="color: #990000">(</span>cksum<span style="color: #990000">);</span>

<span style="color: #008080">CheckedOutputStream</span> cos <span style="color: #990000">=</span> <span style="color: #990000">(</span>CheckedOutputStream<span style="color: #990000">)</span> builder<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">build</span></span><span style="color: #990000">();</span>

<span style="color: #008080">OutputStream</span> os <span style="color: #990000">=</span> builder
                <span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">gzipOutputStream</span></span><span style="color: #990000">()</span>
                <span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">printStream</span></span><span style="color: #990000">()</span>
                <span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">build</span></span><span style="color: #990000">();</span>

<span style="color: #008080">PrintStream</span> pos <span style="color: #990000">=</span> <span style="color: #990000">(</span>PrintStream<span style="color: #990000">)</span> os<span style="color: #990000">;</span>

os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">write</span></span><span style="color: #990000">(</span>data<span style="color: #990000">);</span>
pos<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"World!"</span><span style="color: #990000">);</span>
os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">flush</span></span><span style="color: #990000">();</span>
os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">close</span></span><span style="color: #990000">();</span>

System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span>cos<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getChecksum</span></span><span style="color: #990000">().</span><span style="font-weight: bold"><span style="color: #000000">getValue</span></span><span style="color: #990000">());</span></tt></pre></div></div>
<div class="paragraph"><p>If wanted we could wrap a decorator multiple times that way. Also, the order the
decorators are applied isn&#8217;t any more fixed.</p></div>
<div class="paragraph"><p>As we can see this variation of <em>building</em> objects may often be more suitable
for building <strong>decorators</strong> in comparison to the original.</p></div>
<div class="paragraph"><p>I think with this we have more or less exhausted the topic of initializing
instances of <strong>decorators</strong>. At the process we got familiar with each approach
and with the benefits that offers and the problems that introduces.</p></div>
<div class="paragraph"><p>Let&#8217;s see if we can address the <strong>second</strong> issue. When we <strong>decorate</strong>
an object with a decorator which adds additional functionality not defined in
the <strong>decorator</strong> interface we have to keep references to the concrete class instead.</p></div>
</div>
<div class="sect2">
<h3 id="_meet_the_adapter">Meet the Adapter</h3>
<div class="quoteblock">
<div class="content">
<div class="paragraph"><p>In software engineering, the adapter pattern is a software design pattern (also known as wrapper, an alternative naming shared with the decorator pattern) that allows the interface of an existing class to be used as another interface.[1] It is often used to make existing classes work with others without modifying their source code.</p></div>
</div>
<div class="attribution">
&#8212; Wikipedia
</div></div>
<div class="paragraph"><p>In order to solve the problem of having access to the intermediate concrete
classes we can instead create an <a href="https://en.wikipedia.org/wiki/Adapter_pattern">adapter</a> that exposes all the intermediate interfaces.</p></div>
<div class="paragraph"><p>The adapter in our example could look like this:</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">OutputStreamAdapter</span> <span style="font-weight: bold"><span style="color: #0000FF">extends</span></span> OutputStream <span style="color: #008080">implements</span> Appendable<span style="color: #990000">,</span> Closeable <span style="color: #FF0000">{</span>

    <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #008080">OutputStream</span> os<span style="color: #990000">;</span>
    <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #008080">CheckedOutputStream</span> cos<span style="color: #990000">;</span>
    <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #008080">DeflaterOutputStream</span> dos<span style="color: #990000">;</span>
    <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #008080">Appendable</span> appendable<span style="color: #990000">;</span>
    <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #008080">PrintStream</span> pos<span style="color: #990000">;</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #000000">OutputStreamAdapter</span></span><span style="color: #990000">(</span><span style="color: #008080">OutputStream</span> os<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #000000">setOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">addOutputStream</span></span><span style="color: #990000">(</span><span style="color: #008080">OutputStream</span> o<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #000000">setOutputStream</span></span><span style="color: #990000">(</span>o<span style="color: #990000">);</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">setOutputStream</span></span><span style="color: #990000">(</span><span style="color: #008080">OutputStream</span> o<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        os <span style="color: #990000">=</span> o<span style="color: #990000">;</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>o <span style="color: #008080">instanceof</span> CheckedOutputStream<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
            cos <span style="color: #990000">=</span> <span style="color: #990000">(</span>CheckedOutputStream<span style="color: #990000">)</span> o<span style="color: #990000">;</span>
        <span style="color: #FF0000">}</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>o <span style="color: #008080">instanceof</span> DeflaterOutputStream<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
            dos <span style="color: #990000">=</span> <span style="color: #990000">(</span>DeflaterOutputStream<span style="color: #990000">)</span> o<span style="color: #990000">;</span>
        <span style="color: #FF0000">}</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>o <span style="color: #008080">instanceof</span> Appendable<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
            appendable <span style="color: #990000">=</span> <span style="color: #990000">(</span>Appendable<span style="color: #990000">)</span> o<span style="color: #990000">;</span>
        <span style="color: #FF0000">}</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>o <span style="color: #008080">instanceof</span> PrintStream<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
            pos <span style="color: #990000">=</span> <span style="color: #990000">(</span>PrintStream<span style="color: #990000">)</span> o<span style="color: #990000">;</span>
        <span style="color: #FF0000">}</span>
    <span style="color: #FF0000">}</span>

    @Override
    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">write</span></span><span style="color: #990000">(</span><span style="color: #009900">int</span> i<span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #0000FF">throws</span></span> IOException <span style="color: #FF0000">{</span>
        os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">write</span></span><span style="color: #990000">(</span>i<span style="color: #990000">);</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #008080">Checksum</span> <span style="font-weight: bold"><span style="color: #000000">getChecksum</span></span><span style="color: #990000">()</span> <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>cos <span style="color: #990000">!=</span> <span style="font-weight: bold"><span style="color: #0000FF">null</span></span><span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
            <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> cos<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getChecksum</span></span><span style="color: #990000">();</span>
        <span style="color: #FF0000">}</span> <span style="font-weight: bold"><span style="color: #0000FF">else</span></span> <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>os <span style="color: #008080">instanceof</span> OutputStreamAdapter<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
            <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">((</span>OutputStreamAdapter<span style="color: #990000">)</span> os<span style="color: #990000">).</span><span style="font-weight: bold"><span style="color: #000000">getChecksum</span></span><span style="color: #990000">();</span>
        <span style="color: #FF0000">}</span>
        <span style="font-weight: bold"><span style="color: #0000FF">throw</span></span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">UnsupportedOperationException</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"Decorator method not implemented."</span><span style="color: #990000">);</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">finish</span></span><span style="color: #990000">()</span> <span style="font-weight: bold"><span style="color: #0000FF">throws</span></span> IOException <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>dos <span style="color: #990000">!=</span> <span style="font-weight: bold"><span style="color: #0000FF">null</span></span><span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
            dos<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">finish</span></span><span style="color: #990000">();</span>
        <span style="color: #FF0000">}</span> <span style="font-weight: bold"><span style="color: #0000FF">else</span></span> <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>os <span style="color: #008080">instanceof</span> OutputStreamAdapter<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
            <span style="color: #990000">((</span>OutputStreamAdapter<span style="color: #990000">)</span> os<span style="color: #990000">).</span><span style="font-weight: bold"><span style="color: #000000">finish</span></span><span style="color: #990000">();</span>
        <span style="color: #FF0000">}</span>
        <span style="font-weight: bold"><span style="color: #0000FF">throw</span></span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">UnsupportedOperationException</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"Decorator method not implemented."</span><span style="color: #990000">);</span>
    <span style="color: #FF0000">}</span>

    @Override
    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">flush</span></span><span style="color: #990000">()</span> <span style="font-weight: bold"><span style="color: #0000FF">throws</span></span> IOException <span style="color: #FF0000">{</span>
        os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">flush</span></span><span style="color: #990000">();</span>
    <span style="color: #FF0000">}</span>

    @Override
    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">write</span></span><span style="color: #990000">(</span><span style="color: #009900">byte</span><span style="color: #990000">[]</span> b<span style="color: #990000">,</span> <span style="color: #009900">int</span> off<span style="color: #990000">,</span> <span style="color: #009900">int</span> len<span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #0000FF">throws</span></span> IOException <span style="color: #FF0000">{</span>
        os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">write</span></span><span style="color: #990000">(</span>b<span style="color: #990000">,</span> off<span style="color: #990000">,</span> len<span style="color: #990000">);</span>
    <span style="color: #FF0000">}</span>

    @Override
    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">write</span></span><span style="color: #990000">(</span><span style="color: #009900">byte</span><span style="color: #990000">[]</span> b<span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #0000FF">throws</span></span> IOException <span style="color: #FF0000">{</span>
        System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"WRITE!"</span><span style="color: #990000">);</span>
        os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">write</span></span><span style="color: #990000">(</span>b<span style="color: #990000">);</span>
    <span style="color: #FF0000">}</span>

    @Override
    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">close</span></span><span style="color: #990000">()</span> <span style="font-weight: bold"><span style="color: #0000FF">throws</span></span> IOException <span style="color: #FF0000">{</span>
        os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">close</span></span><span style="color: #990000">();</span>
    <span style="color: #FF0000">}</span>

    @Override
    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #008080">Appendable</span> <span style="font-weight: bold"><span style="color: #000000">append</span></span><span style="color: #990000">(</span><span style="color: #008080">CharSequence</span> cs<span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #0000FF">throws</span></span> IOException <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>appendable <span style="color: #990000">!=</span> <span style="font-weight: bold"><span style="color: #0000FF">null</span></span><span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
            appendable<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">append</span></span><span style="color: #990000">(</span>cs<span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>
        <span style="font-weight: bold"><span style="color: #0000FF">throw</span></span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">UnsupportedOperationException</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"Decorator method not implemented."</span><span style="color: #990000">);</span>
    <span style="color: #FF0000">}</span>

    @Override
    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #008080">Appendable</span> <span style="font-weight: bold"><span style="color: #000000">append</span></span><span style="color: #990000">(</span><span style="color: #008080">CharSequence</span> cs<span style="color: #990000">,</span> <span style="color: #009900">int</span> i<span style="color: #990000">,</span> <span style="color: #009900">int</span> i1<span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #0000FF">throws</span></span> IOException <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>appendable <span style="color: #990000">!=</span> <span style="font-weight: bold"><span style="color: #0000FF">null</span></span><span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
            appendable<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">append</span></span><span style="color: #990000">(</span>cs<span style="color: #990000">,</span> i<span style="color: #990000">,</span> i1<span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>
        <span style="font-weight: bold"><span style="color: #0000FF">throw</span></span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">UnsupportedOperationException</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"Decorator method not implemented."</span><span style="color: #990000">);</span>
    <span style="color: #FF0000">}</span>

    @Override
    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #008080">Appendable</span> <span style="font-weight: bold"><span style="color: #000000">append</span></span><span style="color: #990000">(</span><span style="color: #009900">char</span> c<span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #0000FF">throws</span></span> IOException <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>appendable <span style="color: #990000">!=</span> <span style="font-weight: bold"><span style="color: #0000FF">null</span></span><span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
            appendable<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">append</span></span><span style="color: #990000">(</span>c<span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>
        <span style="font-weight: bold"><span style="color: #0000FF">throw</span></span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">UnsupportedOperationException</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"Decorator method not implemented."</span><span style="color: #990000">);</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span><span style="color: #008080">String</span> x<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>pos <span style="color: #990000">!=</span> <span style="font-weight: bold"><span style="color: #0000FF">null</span></span><span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
            pos<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span>x<span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span> <span style="font-weight: bold"><span style="color: #0000FF">else</span></span> <span style="color: #FF0000">{</span>
            <span style="font-weight: bold"><span style="color: #0000FF">throw</span></span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">UnsupportedOperationException</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"Decorator method not implemented."</span><span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>
    <span style="color: #FF0000">}</span>

<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph"><p>I have implemented only some of the methods in this example but the point is to
implement <strong>all</strong> of the <strong>decorators</strong> that add additional functionality.</p></div>
<div class="paragraph"><p>With an adapter like this we may access each specific even if it is not implemented
by all the decorators. An <strong>exception</strong> will be thrown if the implementation
does not exist.</p></div>
<div class="paragraph"><p>This could be used like that:</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #008080">OutputStreamAdapter</span> os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">OutputStreamBuilderWithAdapter</span></span><span style="color: #990000">(</span>file<span style="color: #990000">)</span>
                <span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">bufferedOutputStream</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">)</span>
                <span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">checkedOutputStream</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">,</span> cksum<span style="color: #990000">)</span>
                <span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">gzipOutputStream</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">)</span>
                <span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">printStream</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">)</span>
                <span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">build</span></span><span style="color: #990000">();</span>
os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">write</span></span><span style="color: #990000">(</span>data<span style="color: #990000">);</span>
os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"World!"</span><span style="color: #990000">);</span>
os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">flush</span></span><span style="color: #990000">();</span>
os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">close</span></span><span style="color: #990000">();</span>
System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span>os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getChecksum</span></span><span style="color: #990000">().</span><span style="font-weight: bold"><span style="color: #000000">getValue</span></span><span style="color: #990000">());</span></tt></pre></div></div>
<div class="paragraph"><p>This uses the <em>Bloch-based</em> <strong>Builder</strong> class from before. However, some modification is required.
The <code>build()</code> method should look like that:</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #008080">OutputStreamAdapter</span> <span style="font-weight: bold"><span style="color: #000000">build</span></span><span style="color: #990000">()</span> <span style="font-weight: bold"><span style="color: #0000FF">throws</span></span> FileNotFoundException<span style="color: #990000">,</span> IOException <span style="color: #FF0000">{</span>
        <span style="color: #008080">OutputStreamAdapter</span> osa<span style="color: #990000">;</span>
        <span style="color: #008080">OutputStream</span> os<span style="color: #990000">;</span>
        <span style="font-weight: bold"><span style="color: #0000FF">switch</span></span><span style="color: #990000">(</span>baseType<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
                <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> ByteArrayOutputStream<span style="color: #990000">:</span>
                        os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">OutputStreamAdapter</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">ByteArrayOutputStream</span></span><span style="color: #990000">());</span>
                        <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>
                <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> FileOutputStream<span style="color: #990000">:</span>
                        os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">OutputStreamAdapter</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">FileOutputStream</span></span><span style="color: #990000">(</span>file<span style="color: #990000">));</span>
                        <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>
                <span style="font-weight: bold"><span style="color: #0000FF">default</span></span><span style="color: #990000">:</span>
                        <span style="font-weight: bold"><span style="color: #0000FF">throw</span></span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">IllegalStateException</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"Base OutputStream not specified."</span><span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>
        osa <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">OutputStreamAdapter</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>buffered<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
                os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">BufferedOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
                osa<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">addOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>checked<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
                os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">CheckedOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">,</span> checksum<span style="color: #990000">);</span>
                osa<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">addOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>gzipped<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
                os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">GZIPOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
                osa<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">addOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>printStreamed<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
                os <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">PrintStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
                osa<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">addOutputStream</span></span><span style="color: #990000">(</span>os<span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>
        <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> osa<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph"><p><strong>PROS</strong></p></div>
<div class="ulist"><ul>
<li>
<p>
We can access all the intermediate decorator functionality without leaking
 references to the intermediate concrete classes.
</p>
</li>
<li>
<p>
We have control if the implementation is not there to throw an exception
 and delegate the control to the client, fail silently or graciously somehow.
</p>
</li>
</ul></div>
<div class="paragraph"><p><strong>CONS</strong></p></div>
<div class="ulist"><ul>
<li>
<p>
Many more lines of code to implement the adapter.
</p>
</li>
<li>
<p>
Increased maintenance cost. For each new decorator which deviates from the
 main interface we have to add the
 new methods to the <strong>adapter</strong>. For any change we may have to update
 the <strong>adapter</strong> accordingly.
</p>
</li>
<li>
<p>
Builder <code>build()</code> method is kind of more complicated.
</p>
</li>
</ul></div>
<div class="paragraph"><p>In general however I feel for certain occasions it offers some useful
functionality.</p></div>
</div>
<div class="sect2">
<h3 id="_conclusion">Conclusion</h3>
<div class="paragraph"><p>In this article we explored various combinations of the <strong>Decorator</strong> pattern
with the <strong>Factory method</strong>, <strong>Builder</strong> and <strong>Adapter</strong> patterns. Hopefully, we all
have a better understanding of what each combination offers.</p></div>
<div class="paragraph"><p>By all means do not go out and start using every bit of design pattern
combination demonstrated here.</p></div>
<div class="paragraph"><p>Using the <strong>Decorator</strong> pattern alone is fine for most of the cases, especially
if the total number of decorators is low. Just don&#8217;t forget to provide
the necessary documentation and maybe group them all together under the
same package/directory.</p></div>
<div class="paragraph"><p>Don&#8217;t rush to add things that <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">you are not going to need soon or ever</a>.
As you have seen many of the above combinations introduce additional
complexity and require more maintenance effort. Keep it simple
but have in mind how to solve a problem when it arise.</p></div>
<div class="paragraph"><p>The only exception to the above rule may be the case where you are building an <strong>API</strong> that
will be distributed for external consumption. Maybe then providing an
<strong>API</strong> what won&#8217;t introduce breaking changes in the future is important.</p></div>
<div class="paragraph"><p>Finally, some patterns such as the <strong>Adapter</strong>, <strong>Decorator</strong> or <strong><a href="https://en.wikipedia.org/wiki/Proxy_pattern">Proxy</a></strong> share
similar implementations. Don&#8217;t get confused, sometimes the differences are subtle. The name of the pattern first
of all shows the intention. The specific implementation is usually well-defined
but comes second.</p></div>
<div class="paragraph"><p>I hope you have found any of the above just a <em>wee</em> <a href="https://en.wikipedia.org/wiki/Bit">bit</a> useful.
Until the next time keep coding <strong>smart</strong> <em>:-)</em></p></div>
</div>
<div class="sect2">
<h3 id="_see_also">See also</h3>
<div class="ulist"><ul>
<li>
<p>
<a href="https://stackoverflow.com/questions/328496/when-would-you-use-the-builder-pattern/1953567#1953567">StackOverflow: When would you use the Builder Pattern?</a>
</p>
</li>
<li>
<p>
<a href="https://stackoverflow.com/questions/55389996/decorator-design-and-factory-design-patterns">StackOverflow: Decorator design and factory design patterns</a>
</p>
</li>
<li>
<p>
<a href="https://softwareengineering.stackexchange.com/questions/241430/what-are-the-benefits-of-using-a-decorator-factory-that-decorates-objects">SE.softwareengineering: What are the benefits of using a decorator factory that decorates objects?</a>
</p>
</li>
<li>
<p>
<a href="https://www.amazon.com/Design-Patterns-Object-Oriented-Addison-Wesley-Professional-ebook/dp/B000SEIBB8">Design Patterns: Elements of Reusable Object-Oriented Software</a>
</p>
</li>
<li>
<p>
<a href="https://www.oreilly.com/library/view/head-first-design/0596007124/">Head First Design Patterns</a>
</p>
</li>
</ul></div>
</div>
</div>
</div>
		]]>
</content:encoded>
        
        <pubDate>Sat, 25 Jul 2020 17:07:29 +0300</pubDate>
        <guid>https://masterex.github.io/archive/2020/07/25/decorator-design-pattern-synergies.html</guid>
    </item>
    <item>
        <title>Signal generation by math formulas for the greater good!</title>
        <link>https://masterex.github.io/archive/2020/07/18/signal-generation-by-using-mathematical-formulas.html</link>
        <description>Signal generation by math formulas for the greater good!</description>
        <content:encoded>
<![CDATA[
		<div class="sect1">
<h2 id="_signal_generation_by_math_formulas_for_the_greater_good">Signal generation by math formulas for the greater good!</h2>
<div class="sectionbody">
<div class="paragraph"><p>My first encounter with computers was by playing video games. The first
video game I remember playing was <strong>pacman</strong> in an <strong>80386</strong> machine maybe somewhere
around <strong>1994</strong>.</p></div>
<div class="paragraph"><p>Back then computers were equipped with sacred resources. The smartphones we
are carrying around in our back pockets would seem like super computers.</p></div>
<div class="paragraph"><p>Today, we don&#8217;t have such limitations most of the times.</p></div>
<div class="paragraph"><p><em>Just for fun</em>, let&#8217;s see how we could store and playback audio, animation or other
media by using <em>as little storage as possible</em>.</p></div>
<div class="sect2">
<h3 id="_generation_of_signals_using_mathematical_formulas">Generation of signals using mathematical formulas</h3>
<div class="paragraph"><p>Before I go to <a href="https://en.wikipedia.org/wiki/Animation">animated images</a> let&#8217;s talk about audio because I think it
is more straightforward to understand the concept.</p></div>
<div class="paragraph"><p>Let&#8217;s say you want to write some sound effects or a little soundtrack for
a game. What options do we have for distributing this audio?</p></div>
<div class="paragraph"><p>Of course an uncompressed audio clip could be distributed in <strong><a href="https://en.wikipedia.org/wiki/WAV">.wav</a></strong> format but
this is totally <strong>uncompressed</strong> and would be unnecessary big.</p></div>
<div class="paragraph"><p>Let&#8217;s talk compression then. <strong><a href="https://en.wikipedia.org/wiki/FLAC">FLAC</a></strong> is a nice option. It is lossless and would
more or less make the file <strong>3</strong> times smaller. This is still too big.</p></div>
<div class="paragraph"><p>After some research at the end we would probably find out that <strong>OGG</strong> would produce
good lossy compression and after some research about the quality and compression
options we would probably end with something like <strong>10</strong> times smaller than the original
sound.</p></div>
<div class="paragraph"><p>This is pretty good and I guess this is what most game developers would
do nowadays.</p></div>
<div class="paragraph"><p>What other options are there though? We could produce the audio by <a href="https://masterex.github.io/archive/2012/05/28/android-audio-synthesis.html">code</a> of course!</p></div>
<div class="paragraph"><p>OK, yes this won&#8217;t do for all the cases but this was more or less how audio was
created in the <strong>NES</strong> era.</p></div>
<div class="paragraph"><p>By using an <a href="https://en.wikipedia.org/wiki/Electronic_oscillator">oscillator</a>
various audio waves could be produced and combined in order to create the
desired outcome.</p></div>
<div class="paragraph"><p>Later devices such as <strong>SNES</strong> permitted the playback of <a href="https://en.wikipedia.org/wiki/Sampling_(music)">prerecorded sampled audio</a>.
Of course the limited RAM of that systems was restricting the artists of the
time who had to think out of the box in order to produce beautiful songs.</p></div>
<div class="paragraph"><p>Today, I guess there are a few people who do similar stuff in some extend <em>for fun</em>.
I can think of <strong>3</strong> main categories where this could be observed:</p></div>
<div class="ulist"><ul>
<li>
<p>
People writing emulators for old systems or reverse engineering old video games (think 8/16-bit)
</p>
</li>
<li>
<p>
The <a href="https://en.wikipedia.org/wiki/Demoscene">Demoscene</a> community
</p>
</li>
<li>
<p>
The <a href="https://en.wikipedia.org/wiki/Competitive_programming">Competitive Programming</a> community
</p>
</li>
</ul></div>
<div class="paragraph"><p><a href="https://en.wikipedia.org/wiki/MIDI">MIDI</a> standard is another example where
audio can be produced by code. A <strong>.midi</strong> file is way smaller than the equivalent <strong>.wav</strong> as it contains
roughly speaking notes and their duration and not the actual <a href="https://en.wikipedia.org/wiki/Sampling_(signal_processing)">sampled audio</a>.</p></div>
</div>
<div class="sect2">
<h3 id="_software_generated_waveforms">Software generated waveforms</h3>
<div class="paragraph"><p>From the above methods, producing audio by using one or more
mathematical functions is probably the one that would produce the smallest outcome.</p></div>
<div class="paragraph"><p>Building on the idea of the <a href="https://en.wikipedia.org/wiki/Electronic_oscillator">oscillator</a>,
there could potentially be a mathematical formula that would produce the exact
analog audio waveform (or any other signal) we would like to reproduce.</p></div>
<div class="paragraph"><p>This could be the best technique of lossless compression. However, finding
such a formula for most cases other than the very simple ones is <strong>way hard</strong>.</p></div>
<div class="paragraph"><p>However, it is relatively easy to create simple and well-defined signals.
A <a href="https://en.wikipedia.org/wiki/Sine_wave">sine wave</a> for example or a <a href="https://en.wikipedia.org/wiki/Circle">circle</a>.</p></div>
<div class="paragraph"><p>For example there is a <a href="https://pypi.org/project/pysinewave/">Python module</a> that
let&#8217;s you create and playback sine waves!</p></div>
<div class="paragraph"><p>Of course there is a hidden cost of intermediate libraries but this should be
considered as <em>common infrastructure</em>.</p></div>
</div>
<div class="sect2">
<h3 id="_generating_pacman_with_code">Generating pacman with code</h3>
<div class="paragraph"><p>The circle happens to be the <strong>pacman</strong> character, <em>more or less</em>!</p></div>
<div class="paragraph"><p>One way to create an animated image for a <a href="https://en.wikipedia.org/wiki/2D_computer_graphics"><strong>2D</strong> game</a> is to have a set of images
and by changing them in the right intervals produce the effect of animation.</p></div>
<div class="paragraph"><p>These images are usually part of one bigger image file called <a href="https://en.wikipedia.org/wiki/Sprite_(computer_graphics)">sprite</a>.</p></div>
<div class="paragraph"><p>The <strong>pacman</strong> however is a partial circle filled with color, probably <span class="yellow black-background">yellow</span>!</p></div>
<div class="paragraph"><p>Here is an example of some <strong>lua</strong>(<a href="https://love2d.org/">LÖVE</a>) code that demonstrates a moving <strong>pacman</strong> created
by a mathematical formula and by interchanging images for comparison.</p></div>
<div class="paragraph"><p><span class="image">
<img src="https://masterex.github.io/archive/2020/07/18/pacman-animation-comparison.gif" alt="wak wak wak&#8230;" />
</span></p></div>
<div class="paragraph"><p>For reference here is the code. Don&#8217;t mind it too much, it is a <em>quick and dirty</em> approach <strong>:-)</strong></p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">local</span></span> x <span style="color: #990000">=</span> <span style="color: #993399">20</span>

<span style="font-style: italic"><span style="color: #9A1900">-- image code</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">local</span></span> images <span style="color: #990000">=</span> <span style="color: #FF0000">{}</span>
<span style="font-weight: bold"><span style="color: #0000FF">local</span></span> image
<span style="font-weight: bold"><span style="color: #0000FF">local</span></span> quad
<span style="font-weight: bold"><span style="color: #0000FF">local</span></span> t <span style="color: #990000">=</span> <span style="color: #993399">0</span>
<span style="font-style: italic"><span style="color: #9A1900">-- gen code</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">local</span></span> PI_QUARTER <span style="color: #990000">=</span> math<span style="color: #990000">.</span>pi<span style="color: #990000">/</span><span style="color: #993399">4</span>
<span style="font-weight: bold"><span style="color: #0000FF">local</span></span> TWO_PI <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">*</span>math<span style="color: #990000">.</span>pi
<span style="font-weight: bold"><span style="color: #0000FF">local</span></span> arc_start <span style="color: #990000">=</span> PI_QUARTER
<span style="font-weight: bold"><span style="color: #0000FF">local</span></span> arc_end <span style="color: #990000">=</span> TWO_PI <span style="color: #990000">-</span> PI_QUARTER
<span style="font-weight: bold"><span style="color: #0000FF">local</span></span> animation_value <span style="color: #990000">=</span> PI_QUARTER
<span style="font-weight: bold"><span style="color: #0000FF">local</span></span> animation_state <span style="color: #990000">=</span> <span style="color: #993399">1</span>

<span style="font-weight: bold"><span style="color: #0000FF">function</span></span> love<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">load</span></span><span style="color: #990000">()</span>
        love<span style="color: #990000">.</span>window<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">setTitle</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'Pacman'</span><span style="color: #990000">)</span>
        love<span style="color: #990000">.</span>window<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">setMode</span></span><span style="color: #990000">(</span> <span style="color: #993399">800</span><span style="color: #990000">,</span> <span style="color: #993399">150</span><span style="color: #990000">)</span>
        <span style="font-style: italic"><span style="color: #9A1900">-- image code</span></span>
        images<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> love<span style="color: #990000">.</span>graphics<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">newImage</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'pacman1.png'</span><span style="color: #990000">)</span>
        images<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> love<span style="color: #990000">.</span>graphics<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">newImage</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'pacman2.png'</span><span style="color: #990000">)</span>
        images<span style="color: #990000">[</span><span style="color: #993399">3</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> love<span style="color: #990000">.</span>graphics<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">newImage</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'pacman3.png'</span><span style="color: #990000">)</span>
        quad <span style="color: #990000">=</span> love<span style="color: #990000">.</span>graphics<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">newQuad</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span> <span style="color: #993399">0</span><span style="color: #990000">,</span> <span style="color: #993399">20</span><span style="color: #990000">,</span> <span style="color: #993399">20</span><span style="color: #990000">,</span> <span style="color: #993399">20</span><span style="color: #990000">,</span> <span style="color: #993399">20</span><span style="color: #990000">)</span>
        image <span style="color: #990000">=</span> images<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span>
<span style="font-weight: bold"><span style="color: #0000FF">end</span></span>

<span style="font-weight: bold"><span style="color: #0000FF">function</span></span> love<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">draw</span></span><span style="color: #990000">()</span>
        <span style="font-style: italic"><span style="color: #9A1900">-- image code</span></span>
        love<span style="color: #990000">.</span>graphics<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">draw</span></span><span style="color: #990000">(</span>image<span style="color: #990000">,</span> quad<span style="color: #990000">,</span> x<span style="color: #990000">,</span> <span style="color: #993399">100</span><span style="color: #990000">)</span>
        <span style="font-style: italic"><span style="color: #9A1900">-- gen code</span></span>
        love<span style="color: #990000">.</span>graphics<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">setColor</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">unpack</span></span><span style="color: #990000">(</span><span style="color: #FF0000">{</span><span style="color: #993399">255</span><span style="color: #990000">,</span> <span style="color: #993399">255</span><span style="color: #990000">,</span> <span style="color: #993399">0</span><span style="color: #FF0000">}</span><span style="color: #990000">))</span>
        love<span style="color: #990000">.</span>graphics<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">arc</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"fill"</span><span style="color: #990000">,</span> x <span style="color: #990000">+</span> <span style="color: #993399">10</span><span style="color: #990000">,</span> <span style="color: #993399">60</span><span style="color: #990000">,</span> <span style="color: #993399">10</span><span style="color: #990000">,</span> arc_start<span style="color: #990000">-</span>animation_value<span style="color: #990000">,</span>
        arc_end<span style="color: #990000">+</span>animation_value<span style="color: #990000">,</span> <span style="color: #993399">100</span><span style="color: #990000">)</span>
<span style="font-weight: bold"><span style="color: #0000FF">end</span></span>

<span style="font-weight: bold"><span style="color: #0000FF">function</span></span> love<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">update</span></span><span style="color: #990000">(</span>dt<span style="color: #990000">)</span>
        <span style="font-style: italic"><span style="color: #9A1900">-- image code</span></span>
        t <span style="color: #990000">=</span> t <span style="color: #990000">+</span> dt <span style="color: #990000">*</span> <span style="color: #993399">6</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> t <span style="color: #990000">&lt;</span> <span style="color: #993399">1</span> <span style="font-weight: bold"><span style="color: #0000FF">then</span></span>
                image <span style="color: #990000">=</span> images<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span>
        <span style="font-weight: bold"><span style="color: #0000FF">elseif</span></span> t <span style="color: #990000">&lt;</span> <span style="color: #993399">2</span> <span style="font-weight: bold"><span style="color: #0000FF">then</span></span>
                image <span style="color: #990000">=</span> images<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span>
        <span style="font-weight: bold"><span style="color: #0000FF">elseif</span></span> t <span style="color: #990000">&lt;</span> <span style="color: #993399">3</span> <span style="font-weight: bold"><span style="color: #0000FF">then</span></span>
                image <span style="color: #990000">=</span> images<span style="color: #990000">[</span><span style="color: #993399">3</span><span style="color: #990000">]</span>
        <span style="font-weight: bold"><span style="color: #0000FF">elseif</span></span> t <span style="color: #990000">&lt;</span> <span style="color: #993399">4</span> <span style="font-weight: bold"><span style="color: #0000FF">then</span></span>
                image <span style="color: #990000">=</span> images<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span>
        <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
                t <span style="color: #990000">=</span> <span style="color: #993399">0</span>
        <span style="font-weight: bold"><span style="color: #0000FF">end</span></span>
        <span style="font-style: italic"><span style="color: #9A1900">-- gen code</span></span>
        arc_start <span style="color: #990000">=</span> PI_QUARTER
        arc_end <span style="color: #990000">=</span> TWO_PI <span style="color: #990000">-</span> PI_QUARTER
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> animation_value <span style="color: #990000">&gt;=</span> PI_QUARTER <span style="font-weight: bold"><span style="color: #0000FF">then</span></span>
                animation_state <span style="color: #990000">=</span> <span style="color: #993399">2</span>
        <span style="font-weight: bold"><span style="color: #0000FF">elseif</span></span> animation_value <span style="color: #990000">&lt;=</span> <span style="color: #993399">0</span> <span style="font-weight: bold"><span style="color: #0000FF">then</span></span>
                animation_state <span style="color: #990000">=</span> <span style="color: #993399">1</span>
        <span style="font-weight: bold"><span style="color: #0000FF">end</span></span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> animation_state <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="font-weight: bold"><span style="color: #0000FF">then</span></span>
                <span style="font-style: italic"><span style="color: #9A1900">-- close mouth</span></span>
                animation_value <span style="color: #990000">=</span> animation_value <span style="color: #990000">+</span> dt <span style="color: #990000">*</span> <span style="color: #993399">3</span>
        <span style="font-weight: bold"><span style="color: #0000FF">elseif</span></span> animation_state <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="font-weight: bold"><span style="color: #0000FF">then</span></span>
                <span style="font-style: italic"><span style="color: #9A1900">-- open mouth</span></span>
                animation_value <span style="color: #990000">=</span> animation_value <span style="color: #990000">-</span> dt <span style="color: #990000">*</span> <span style="color: #993399">3</span>
        <span style="font-weight: bold"><span style="color: #0000FF">end</span></span>
        x <span style="color: #990000">=</span> x <span style="color: #990000">+</span> <span style="color: #993399">50</span> <span style="color: #990000">*</span> dt
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> x <span style="color: #990000">&gt;</span> <span style="color: #993399">800</span> <span style="font-weight: bold"><span style="color: #0000FF">then</span></span>
                x <span style="color: #990000">=</span> <span style="color: #990000">-</span><span style="color: #993399">20</span>
        <span style="font-weight: bold"><span style="color: #0000FF">end</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">end</span></span></tt></pre></div></div>
<div class="paragraph"><p>The point is that the <strong>3</strong> images used to create the <strong>pacman</strong> animation are
a bit less that <strong>6kb</strong> in total while the code version is uncompressed less than <strong>1kb</strong>.</p></div>
<div class="paragraph"><p>In that spirit <a href="https://play.google.com/store/apps/details?id=pntanasis.android.metronome&amp;hl=el">BeatKeeper</a> is
less than <strong>30kb</strong> in size. The audio produced by the metronome is a sine wave
created in <a href="https://github.com/MasterEx/BeatKeeper/blob/master/src/pntanasis/android/metronome/AudioGenerator.java#L25">code</a>.</p></div>
<div class="paragraph"><p>As a bonus, animating <strong>pacman</strong> that way produces a more fluent motion. In order
to achieve this smoothness the other way it is required to move faster in order
to trick the eye or use more images that would result to an even bigger sprite.</p></div>
</div>
<div class="sect2">
<h3 id="_conclusion">Conclusion</h3>
<div class="paragraph"><p>Today we don&#8217;t have to worry if our program will fit in one <a href="https://en.wikipedia.org/wiki/Floppy_disk">floppy disk</a>
or be able to fit whole in our computer&#8217;s RAM.</p></div>
<div class="paragraph"><p>On the other hand it would be a great deal if we could easily find mathematical formulas
that produce a desired signal because then we could achieve very efficient
compression. This is pretty hard though and maybe it will never be achieved.</p></div>
<div class="paragraph"><p>What is important however and we can achieve by doing this kind of stuff is
reminding to ourselves that <em>programming is fun</em>!</p></div>
<div class="paragraph"><p><strong>So, until the next time&#8230; have fun!</strong></p></div>
</div>
<div class="sect2">
<h3 id="_see_also">See also</h3>
<div class="ulist"><ul>
<li>
<p>
<a href="https://gist.github.com/MasterEx/2b31191cb15c94728785d51bf8e0efa1">Gist with the pacman example code.</a>
</p>
</li>
<li>
<p>
<a href="https://www.youtube.com/watch?v=q_3d1x2VPxk">Youtube video about how NES era audio was produced.</a>
</p>
</li>
<li>
<p>
<a href="https://irkenkitties.com/blog/2015/03/29/creating-sound-on-the-nes/#next-step">Article about NES audio creation.</a>
</p>
</li>
<li>
<p>
<a href="https://www.youtube.com/watch?v=jvIzIAgRWV0">Youtube video about the SNES sampling audio capabilities.</a>
</p>
</li>
</ul></div>
</div>
</div>
</div>
		]]>
</content:encoded>
        
        <pubDate>Sat, 18 Jul 2020 22:04:36 +0300</pubDate>
        <guid>https://masterex.github.io/archive/2020/07/18/signal-generation-by-using-mathematical-formulas.html</guid>
    </item>
    <item>
        <title>Collaborative distance in git contributors...</title>
        <link>https://masterex.github.io/archive/2020/04/19/erdos-bacon-git.html</link>
        <description>Collaborative distance in git contributors...</description>
        <content:encoded>
<![CDATA[
		<div class="sect1">
<h2 id="_collaborative_distance_in_git_contributors_8230">Collaborative distance in git contributors&#8230;</h2>
<div class="sectionbody">
<div class="paragraph"><p>Some time ago I was checking my LinkedIn connection recommendations and I realized once again that the word is small. There are people who we may have never talked to but as we change jobs or projects we may write to the same codebases they used to contribute to or vice versa.</p></div>
<div class="paragraph"><p>And of course I am not talking about open source contributors who of course one way or the other we could argue that have contributed to our codebase by providing their open source code. I am talking about colleagues who are working on something else now or they have moved to a different job or people who contributed as external consultants etc.</p></div>
<div class="paragraph"><p><strong>The world is definitely small</strong>.</p></div>
<div class="paragraph"><p>This made me thinking about the <a href="https://en.wikipedia.org/wiki/Erdős_number">Erdős number</a>.</p></div>
<div class="sect2">
<h3 id="_erdős_number">Erdős number</h3>
<div class="quoteblock">
<div class="content">
<div class="paragraph"><p>The Erdős number (Hungarian: [ˈɛrdøːʃ]) describes the "collaborative distance" between mathematician Paul Erdős and another person, as measured by authorship of mathematical papers. The same principle has been applied in other fields where a particular individual has collaborated with a large and broad number of peers.</p></div>
</div>
<div class="attribution">
&#8212; Wikipedia
</div></div>
<div class="paragraph"><p>There are <a href="https://en.wikipedia.org/wiki/Erd%C5%91s_number#Variations">variations</a> applied to other fields, one of the most known is the <a href="https://en.wikipedia.org/wiki/Six_Degrees_of_Kevin_Bacon#Bacon_numbers">Bacon number</a>.</p></div>
</div>
<div class="sect2">
<h3 id="_six_degrees_of_separation">Six degrees of separation</h3>
<div class="quoteblock">
<div class="content">
<div class="paragraph"><p>Six degrees of separation is the idea that all people are six, or fewer, social connections away from each other. Also known as the 6 Handshakes rule.</p></div>
</div>
<div class="attribution">
&#8212; Wikipedia
</div></div>
<div class="paragraph"><p>In a sense the Six degrees of separation idea is similar to the <strong>Erdős</strong> number but <strong>Erdős</strong> number is actually stricter. A person does not have only to be acquainted to <strong>Paul</strong> <strong>Erdős</strong> but in action to be a scientist who has co-authored a paper. Even this definition is not strict enough.</p></div>
</div>
<div class="sect2">
<h3 id="_code_collaborative_distance">Code Collaborative Distance</h3>
<div class="paragraph"><p>Going back to what made me think of all that, I made the thought that possibly most of the software engineers in a region or in a specific field are connected between them according to their code contributions.</p></div>
<div class="paragraph"><p>When saying code contributions consider mainly git commits which is the most common. Of course this could be any other <a href="https://en.wikipedia.org/wiki/Version_control_system">VCS</a> or equivalent.</p></div>
<div class="paragraph"><p>Of course the number of "hops" between <strong>2</strong> persons to be connected may vary and be big but I guess that in most cases if we could query all the private and public VCS&#8217;s then for specific geographical region and/or field  and/or business domain then the number would be usually pretty small. In that case the <strong>Six degrees of separation</strong> could actually stand true.</p></div>
</div>
<div class="sect2">
<h3 id="_collaborative_distance_in_open_source">Collaborative Distance in Open Source</h3>
<div class="paragraph"><p>As you understand searching the contributors inside private VCS&#8217;s of companies to find the inter-connections between different contributors is impossible.</p></div>
<div class="paragraph"><p>However, how easy would this be for open source software? Wouldn&#8217;t be great to find your distance against giants such as <a href="https://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds</a>?</p></div>
<div class="paragraph"><p>It turns out that this is not as easy as a pie too.</p></div>
<div class="paragraph"><p>Undoubtedly, Git is the most popular VCS today and some of the most successful hosting services are built around it. To name a few some of them are <strong>GitHub</strong>, <strong>GitLab</strong> and <strong>Bitbucket</strong>. But this is not everything. Organizations are hosting their own git instances and there are a few other names of hosting services out there. Also, in some cases people are using other VCS and not the king Git.</p></div>
<div class="paragraph"><p>To make the problem even harder there is not a common API one could use to query each one of the hosting services. Also, the APIs are usually rate limited and probably finding connection between 2 persons results to a nonlinear addition of requests after each hop. This would cause the rate limit to be a blocking issue for many searches.</p></div>
<div class="paragraph"><p>Another potential problem is that people may have used multiple email addresses in the code they have contributed to different code repositories.</p></div>
<div class="paragraph"><p>Finally, people may have contributions to repositories they don&#8217;t own.</p></div>
<div class="paragraph"><p>All the above make finding the connections between <strong>2</strong> persons difficult even in one specific public hosting provider such as <strong>GitHub</strong>.</p></div>
<div class="paragraph"><p>I certainly after putting some thought in it I won&#8217;t attempt trying to write a program about it! If someone builds something drop me a line in the comments! :-)</p></div>
</div>
<div class="sect2">
<h3 id="_center_of_the_open_source_software">Center of the Open Source software</h3>
<div class="paragraph"><p>The magic of the <strong>Erdős</strong> or Bacon numbers is that they measure the distance away from specific points and people may compare their values based on that.</p></div>
<div class="paragraph"><p>This makes me wonder, who would be the <strong>Paul</strong> <strong>Erdős</strong> or <strong>Kevin Bacon</strong> of open source software?</p></div>
<div class="paragraph"><p>Of course, this should be the most <a href="https://en.wikipedia.org/wiki/Six_Degrees_of_Kevin_Bacon#Center_of_the_Hollywood_Universe">"linkable"</a> open source contributor. This person may change as the time passes. To be a good center this person should have contributions to different projects with many contributors each. This makes me think that there is a possibility this person won&#8217;t be any expected recognizable figure.</p></div>
<div class="paragraph"><p>What do you think? Who would you like to be the <strong>Paul</strong> <strong>Erdős</strong> of open source software? Leave your comment bellow!</p></div>
<div class="paragraph"><p>Thank you for reading!
Take care!</p></div>
</div>
</div>
</div>
		]]>
</content:encoded>
        
        <pubDate>Sun, 19 Apr 2020 15:45:45 +0300</pubDate>
        <guid>https://masterex.github.io/archive/2020/04/19/erdos-bacon-git.html</guid>
    </item>
    <item>
        <title>Debugging like a boss</title>
        <link>https://masterex.github.io/archive/2018/11/25/debugging-like-a-boss.html</link>
        <description>Debugging like a boss</description>
        <content:encoded>
<![CDATA[
		<div class="sect1">
<h2 id="_debugging_like_a_boss">Debugging like a boss</h2>
<div class="sectionbody">
<div class="paragraph"><p>This article is about debugging.</p></div>
<div class="quoteblock">
<div class="content">
<div class="paragraph"><p>Debugging is the process of finding and resolving defects or
problems within a computer program that prevent correct
operation of computer software or a system.</p></div>
</div>
<div class="attribution">
&#8212; Wikipedia
</div></div>
<div class="paragraph"><p>I&#8217;ll focus on the first part of the above definition, <strong>finding a bug</strong>.
Most methods or tips discussed may be considered simple or common but my experience
had taught me that many developers, especially the more
inexperienced ones, may struggle when facing such situations.</p></div>
<div class="paragraph"><p>I&#8217;ll try to present you the most common ones first which
are the ones that you will most probably use more often.
The techniques are not bounded to a specific programming language or technology but occasionally
I may refer to specific examples.</p></div>
<div class="paragraph"><p>So, let&#8217;s start!</p></div>
<div class="sect2">
<h3 id="_trust_no_one">Trust no one</h3>
<div class="paragraph"><p>Yes, I know&#8230; but it has to be said.</p></div>
<div class="paragraph"><p>To do proper debugging you have to <em>doubt everything</em>!</p></div>
<div class="ulist"><ul>
<li>
<p>
You have to doubt your code (written by you/your colleagues/whoever)
</p>
</li>
<li>
<p>
You have to doubt your logs
</p>
</li>
<li>
<p>
You have to doubt the libraries that you have used
</p>
</li>
<li>
<p>
You have to doubt the language implementation that you are using
</p>
</li>
<li>
<p>
You have to doubt the OS that you are using
</p>
</li>
<li>
<p>
You have to doubt the whole infrastructure and external dependencies
</p>
</li>
<li>
<p>
And finally you have to doubt <strong>YOUR CODE</strong>
</p>
</li>
</ul></div>
<div class="paragraph"><p><strong>99.99999%</strong> (see? 5 nines!) OF THE TIME THE BUG IS IN "YOUR" CODE!</p></div>
<div class="paragraph"><p>Now, having said that we may proceed :-)</p></div>
</div>
<div class="sect2">
<h3 id="_listen_to_your_users_ask_questions">Listen to your users, ask questions</h3>
<div class="paragraph"><p>Many times your production system users will find the bug first. Other times
the manual testers will find the bug while testing. In any case someone else will
find that nasty bug before you do.</p></div>
<div class="paragraph"><p>Asking the right questions will save you much time and frustration. The most favorable
outcome is to establish specific reproduction steps.</p></div>
<div class="paragraph"><p>Then the problem could be crystal clear or at worst you will know where to start and continue
your search from there.</p></div>
<div class="paragraph"><p>However, if establishing the reproduction steps isn&#8217;t easy then there are
still some questions that may worth asking:</p></div>
<div class="ulist"><ul>
<li>
<p>
When the incident took place. (This will help you especially in checking the logs)
</p>
</li>
<li>
<p>
If it is about an existing application that was
 functioning without issues ask the user if she had
 performed any unusual action.
</p>
</li>
<li>
<p>
Ask the user to perform the same actions and watch
 her while doing so.
</p>
</li>
<li>
<p>
Ask if this is an issue that has happened again
 before or if it is the first time. If possible
 establish how often the issue appears.
</p>
</li>
<li>
<p>
If you cannot establish the reproduction steps
 then ask the questions required to at least
 exclude some scenarios that definetily won&#8217;t lead to the bug.
</p>
</li>
<li>
<p>
If the issue was introduced after a new version
 check a diff between your releases. If you are using <strong>git</strong>, <a href="https://git-scm.com/docs/git-diff">git diff</a> is
 especially useful for doing so (other <a href="https://en.wikipedia.org/wiki/Version_control">VCS</a>s have similar functionality).
 Also tagging your releases is extremely handy in that case (see <a href="https://git-scm.com/docs/git-tag">git tag</a>).
 If not, check if something else in the system has changed.
</p>
</li>
</ul></div>
<div class="paragraph"><p>However, do not forget, <strong>TRUST NO ONE</strong>! The users may unintentionally report
something wrong.</p></div>
</div>
<div class="sect2">
<h3 id="_check_the_logs">Check the logs</h3>
<div class="paragraph"><p>If you are reading this and you have not logs then you should have!
Go now and add logging to your application! However, don&#8217;t overdo it!
Try to keep the essential logging only!</p></div>
<div class="paragraph"><p>So, checking the logs may give the exact information about the error that
happened. An error status or exception stack trace may lead you at once
to the faulty line of code and give you a very good understanding of the problem.
This most of the times should be enough to get
you going.</p></div>
<div class="paragraph"><p>In case there is an error that doesn&#8217;t make sense, additional logging
before or even after the incident may give you a better understanding of
why it happened. For example, a race condition is obvious if you see an unexpected
order of log messages.</p></div>
<div class="paragraph"><p>Finally, even if there is not an entry in the logs that points to the problem,
you may verify the reproduction
steps acquired by the users or deduct them yourself and that is a pretty good
start.</p></div>
<div class="admonitionblock">
<table><tr>
<td class="icon">
<img src="https://masterex.github.io/archive/2018/11/25/../../../../images/icons/tip.png" alt="Tip" />
</td>
<td class="content">Usually there are also other logs except that of your application worth checking.
Get familiar with your infrastructure and don&#8217;t forget to gather every bit
of useful information while you can.</td>
</tr></table>
</div>
</div>
<div class="sect2">
<h3 id="_fire_up_the_debugger">Fire up the debugger</h3>
<div class="paragraph"><p>I know many people who aren&#8217;t fan of using the debugger or even considering
it lame. However, I thing the debugger is the most handy tool in order to
understand and validate the flow of the program or inspect that the state is the expected
in all the given points in time.</p></div>
<div class="paragraph"><p>Of course, it is not top in my list because it would probably require to
have establish <em>somewhat</em> clear reproduction steps in order to use it and
I think is more time consuming - especially for a larger application - to
use compare to the previous methodologies.</p></div>
<div class="paragraph"><p>However, definetily invest some time at least to learn the basics of using
the debugger. It pays off.</p></div>
<div class="sect3">
<h4 id="_debugging_in_the_browser">Debugging in the browser</h4>
<div class="paragraph"><p>I have decided to add a separate section specific to Javascript because I
have observed that many times people are under-utilizing their
browser debugging capabilities.</p></div>
<div class="paragraph"><p>Modern browsers have some kind of developer tools built-in, often invoked by pressing
<strong>F12</strong>, that include a debugger.</p></div>
<div class="paragraph"><p>You may add break points in your Javascript code and inspect the state of
your program at any point.</p></div>
<div class="paragraph"><p>Also, you may inspect other insightful things such as the raw headers of your
requests and responses, the status codes returned, the body of the responses,
Javascript errors etc.</p></div>
<div class="paragraph"><p>Again as before, master these tools. Writing code for either side of the
wire, having a good command of client side debugging techniques is extremely
useful.</p></div>
</div>
</div>
<div class="sect2">
<h3 id="_review_that_code">Review that code</h3>
<div class="paragraph"><p>If you don&#8217;t have any other hint about what is the problem then a fast
approach is to start reading the code <em>if you are familiar with the code-base</em>.</p></div>
<div class="paragraph"><p>The <strong><a href="https://en.wikipedia.org/wiki/Rubber_duck_debugging">rubber duck technique</a></strong> is very useful in that case. Try to verify the
correctness of your code while reading it. Pairing with a colleague instead of
a <strong>rubber duck</strong> may be even faster.</p></div>
<div class="paragraph"><p>If the bug isn&#8217;t obvious until now, things got more tricky.</p></div>
</div>
<div class="sect2">
<h3 id="_add_extra_logging">Add extra logging</h3>
<div class="paragraph"><p>In order to trace the root of the evil you may add extra logging in places
where you suspect to be the culprit.</p></div>
<div class="paragraph"><p>I know many people who prefer to add extra traces instead of using the debugger.
I actually disapprove that usage.</p></div>
<div class="paragraph"><p>Add the extra logs and send your program for testing (if your are into that)
or release it in the production in case that you absolutely cannot reproduce
the problem.</p></div>
<div class="paragraph"><p>Just make sure to add all the essential logging, so the next time the bug
happens will be the last.</p></div>
<div class="paragraph"><p>I faced once a bug in a process that was consuming RabbitMQ messages.
The exact system was running in dozen different similar installations but it was
one particular that was demonstrating strange behavior. My colleagues and I couldn&#8217;t
figure out why this was happening.</p></div>
<div class="paragraph"><p>Adding some extra logs just for this case showed us that there were two
antagonizing instances of the consumer process that were running where
conventionally should be only one.</p></div>
<div class="paragraph"><p>The fault in that case has happened because at some point there was
an undocumented manual intervention in the init script that was
starting this process.</p></div>
<div class="paragraph"><p>This was a very special kind of bug that couldn&#8217;t be reproduced in our development or
testing environment.</p></div>
<div class="paragraph"><p>The point is if you cannot reproduce the bug do not get despair. Add extra logging
wherever you think will help you. Fill free to add unnecessary logging, you can always - and
probably should - remove it later. Don&#8217;t overdo it though, extra logging adds
a tiny overhead that may
<a href="https://stackoverflow.com/questions/48780081/inserting-system-out-println-calls-affects-race-conditions-how-to-debug">spawn new nightmares to a badly designed piece of software</a>&#8230;</p></div>
<div class="paragraph"><p>Also, there are some cases where working with the debugger may be bothersome.</p></div>
<div class="paragraph"><p>There are two case that come into my mind.</p></div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>
Trying to find slow code. Running in debugger often is slow. To properly benchmark
your code a fast way is to add many time tracking traces in the code (i.e. <a href="https://google.github.io/guava/releases/18.0/api/docs/com/google/common/base/Stopwatch.html">Stopwatch</a>)
and work your way to the source of the problem. In some cases you may achieve
the same result with a profiler but I find usually easier and faster to
place some time tracking code into specific places.
</p>
</li>
<li>
<p>
Working with many threads. Usually working with the debugger is OK but
there are some cases that properly inspecting the flow of the program etc.
becomes challenging.
</p>
</li>
</ol></div>
<div class="admonitionblock">
<table><tr>
<td class="icon">
<img src="https://masterex.github.io/archive/2018/11/25/../../../../images/icons/tip.png" alt="Tip" />
</td>
<td class="content">All production logging should be written consistently in a file.
Permanent messages sent to standard output should be avoided except if they
should be displayed to the user. However, you may add
temporary messages to the standard output in the dev/test environment
during debugging but do not forget to remove them later!</td>
</tr></table>
</div>
</div>
<div class="sect2">
<h3 id="_moar_logs">Moar logs</h3>
<div class="paragraph"><p>If your system communicates with other systems or services, many times the answer
could be to a foreign log file.</p></div>
<div class="paragraph"><p>For example if your application talks with the database and it is slow
checking your database for table locks or slow queries may give you
a valuable hint for you to continue your search.</p></div>
<div class="admonitionblock">
<table><tr>
<td class="icon">
<img src="https://masterex.github.io/archive/2018/11/25/../../../../images/icons/tip.png" alt="Tip" />
</td>
<td class="content">Sometimes you may need to explicitly enable logging for such systems and try
to reproduce the problem or wait until the problem happens again.</td>
</tr></table>
</div>
</div>
<div class="sect2">
<h3 id="_get_real_data">Get real data</h3>
<div class="paragraph"><p>Often, the demon hides in the data. If a bug has been spotted and is
reproducible in a foreign system but not in the development/testing environment
then try to replicate it with the specific data.</p></div>
<div class="paragraph"><p>This may be as easy as getting an SQL dump from a remote machine and import
it locally or very tricky i.e. the database is way too big or there
are essential information you are not permitted to get locally.</p></div>
<div class="paragraph"><p>Sometimes, if it is tricky may be it is reasonable to create a custom
mechanism for making this process easier. It will save you time in the
future.</p></div>
</div>
<div class="sect2">
<h3 id="_it_8217_s_never_too_late_to_write_a_test">It&#8217;s never too late to write a test</h3>
<div class="paragraph"><p>This point is not about testing as a precaution to avoid bugs in the first place.</p></div>
<div class="paragraph"><p>What I am suggesting is to write some kind of test in order to reproduce the bug.</p></div>
<div class="paragraph"><p>There are three relevant scenarios that this is very useful.</p></div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>
The specific part that the bug is happening is too deep in the program flaw and/or
requires many actions by you to reproduce it locally. In that case writing a
test in any form, from a separate <strong>main()</strong> to a well written unit test, will probably
speed up the whole process.
</p>
</li>
<li>
<p>
When the bug happens <strong>randomly</strong>. This could be a race condition bug that
happens only if the machine is under stress or a bug that is influenced by other
factors.
Once, I had faced a strange bug that was causing the whole <strong>JVM</strong> to crash
and it was relevant to the graphics acceleration in the specific machines.
I wrote a simple script that was repeating some mouse clicks with <a href="https://github.com/jordansissel/xdotool">xdotool</a>
and I found that the error was happening randomly once every some dozen actions. The
solution was simply to disable the hardware acceleration by passing the
<strong>-Dprism.order=sw</strong> to the <strong>JVM</strong>.
</p>
</li>
<li>
<p>
Production systems may have other load than the one in the development
or testing environment. This may affect the presence of a bug. Writing
simple stress tests, custom or by using various tools such as <strong>JMeter</strong>, may
make the bug come to the surface sooner.
</p>
</li>
</ol></div>
<div class="paragraph"><p>As an added bonus writing such a test makes the validation of the fixed bug
piece of cake.</p></div>
</div>
<div class="sect2">
<h3 id="_write_an_mcve">Write an MCVE</h3>
<div class="paragraph"><p>An <a href="https://stackoverflow.com/help/mcve">MCVE</a> is a Minimal, Complete, and Verifiable example.</p></div>
<div class="paragraph"><p>In forums or answer/question sites like Stack Overflow an <strong>MCVE</strong> is often required
by the people interested to answer the question. This is because it demonstrates
clearly a very specific problem and is easily reproducible.</p></div>
<div class="paragraph"><p>In case you are facing a bug in a large and complex code-base where even
yourself are not sure where exactly the bug lives then you may create
a separate program with just the essentials parts.</p></div>
<div class="paragraph"><p>This is a bit similar to the previous section, but the point of this process
is mostly to make you understand better the nature of the problem, by actually
removing unrelated parts that could possibly confuse you.</p></div>
<div class="paragraph"><p>Then by having the minimum required code you may try solutions until you
find the right one. Then integrate back the changes in your more complex code-base.</p></div>
<div class="paragraph"><p>Be sure to document well the approaches you are trying preferably by using
the <strong>VCS</strong> of your choice to avoid repeating yourself. You may think this process as
a more simplified variation of <a href="https://en.wikipedia.org/wiki/Genetic_programming">genetic programming</a>.</p></div>
<div class="paragraph"><p>As an added bonus you&#8217;ll have in your hands an <strong>MCVE</strong> that likely won&#8217;t contain
any intellectual property or private information, which you may share in
forums, <a href="https://stackoverflow.com/">SO</a>, etc. in case your are stuck.</p></div>
<div class="paragraph"><p><strong>Don&#8217;t be afraid to ask strangers publicly, but do it as a last resort after
you have exhausted all the other means in your arsenal. Be kind, be thankful,
provide the right amount of details in your original question - no more/no less,
response to other people in a timely manner and be ready to never receive a
response back.</strong></p></div>
<div class="admonitionblock">
<table><tr>
<td class="icon">
<img src="https://masterex.github.io/archive/2018/11/25/../../../../images/icons/tip.png" alt="Tip" />
</td>
<td class="content">In case you are writing client code and there is a problem in the communication
between the client and the server try to repeat the request by using an external
tool such as <strong><a href="https://www.getpostman.com/">Postman</a></strong>,
<strong><a href="https://www.soapui.org/">SoapUI</a></strong>, <strong><a href="https://curl.haxx.se/">curl</a></strong> or a similar tool.
In case you are consuming messages from a message queue and you face a problem,
use an external tool to inspect the queue such as <strong>rabbitmqadmin</strong> or <strong>rabbitmqctl</strong> for
<strong><a href="https://www.rabbitmq.com/management-cli.html">RabbitMQ</a></strong>. In general when there
is communication between yours and another piece of software try to validate
with an external <em>reliable</em> tool that you send and receive the expected
data. There are times where the bug lies in ill-defined specs or in
obsolete documentation etc. This mentioned process is actually a more generic <strong>MCVE</strong>,
not bounded to your specific language, framework or libraries.</td>
</tr></table>
</div>
</div>
<div class="sect2">
<h3 id="_trust_no_one_2">Trust no one</h3>
<div class="paragraph"><p>I cannot stress that enough! You have to doubt yourself, your code and everything
else in order to effectively hunt bugs.</p></div>
<div class="paragraph"><p>There will be some rare times that the bug is not in your code. It may be a rare
bug in the language or <strong>JVM</strong>, in the browser or even in the desktop environment
that you are using. It may also be a different configuration in one of that
components that triggers the different behavior.</p></div>
<div class="paragraph"><p>In the first case start by searching the interwebz for the problem. There
may be a reported issue or a stack overflow question that describes your issue
and if you are lucky enough it would be accompanied by a solution or a work around.</p></div>
<div class="paragraph"><p>Checking the change-logs of your dependencies and/or trying out different versions
(usually newer versions but you never know!) is something worth trying. Desperate times
call for desperate measures after all!</p></div>
<div class="paragraph"><p>In case of different configurations mind that the same software may have different default
configuration in different operating systems. In Linux <strong><a href="http://man7.org/linux/man-pages/man1/diff.1.html">diff</a></strong> is pretty handy
for comparing configuration files. Also, if the files are under git
<strong><a href="https://git-scm.com/docs/git-status">git status</a></strong> and <strong><a href="https://git-scm.com/docs/git-log">git log</a></strong> are your friend.</p></div>
<div class="paragraph"><p>Finally, make sure that your application was built correctly and the file permissions are
the expected. Check the dependencies too. Having a standardized build procedure,
being a simple bash script or a CI/CD system would save you
from much frustration and I find it pretty time saving in the long run.</p></div>
</div>
<div class="sect2">
<h3 id="_honorary_mentions">Honorary mentions</h3>
<div class="paragraph"><p>There are various debugging tools that may be worth knowing and using.</p></div>
<div class="paragraph"><p>Some such tools are mentioned in <strong>Write an MCVE</strong> section before.</p></div>
<div class="paragraph"><p>There are also other cases of communication between systems such as when
your application communicates with a database. If there is a problem there
try to run the query manually. Mind that when using tools such as
<a href="https://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a>
the underlying SQL may not be the one that you expect. Log the query and repeat
it manually to validate the expected results. Many times the bug may be that
there are unexpected entries in the database.</p></div>
<div class="paragraph"><p>Also, there are tools such as various kind of <a href="https://en.wikipedia.org/wiki/Proxy_server">proxies</a>
 that may let you intercept the communication
and validate that the requests and responses are the expected. Some tools may
let you interfere and change the original request or response for testing or debugging purposes.</p></div>
<div class="paragraph"><p>Some examples include the <strong><a href="https://github.com/mysql/mysql-proxy">mysql-proxy</a></strong> for <strong>MySQL</strong> and
the <a href="https://www.telerik.com/fiddler">Fiddler</a> for HTTP communication.</p></div>
<div class="paragraph"><p>Per case and ecosystem <strong>being aware of</strong> the available tools may be a game changer :-)</p></div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph"><p>I have introduced many methods to find a bug ordered by which I think you
should follow first.</p></div>
<div class="paragraph"><p>Of course one has to be methodological and pick the most appropriate
first.</p></div>
<div class="paragraph"><p>In any case, if the code is our own it is very important to actually <strong>own</strong> it.
I mean to know it pretty good so when facing a new problem be able to jump to
the appropriate place in code and also have a pretty good opinion about
what parts are likely to produce problems.</p></div>
<div class="paragraph"><p>I hope you found my suggestions useful. I see many people struggling to
find a bug and usually without clear reproduction steps they stuck.
In such cases one of the above tips might get them going.</p></div>
<div class="paragraph"><p>Do you have any other methodology that you find yourself often applying? Do
you think that my ordering could be improved? Have a specific real life example
that demonstrates debugging in action? Please feel free to share a comment,
I would love to read your thoughts!</p></div>
<div class="paragraph"><p>Cheers and have a successful debugging!</p></div>
<div class="admonitionblock">
<table><tr>
<td class="icon">
<img src="https://masterex.github.io/archive/2018/11/25/../../../../images/icons/caution.png" alt="Caution" />
</td>
<td class="content">Update 2018-12-02: Added the <strong>Write an MCVE</strong> and <strong>Honorary mentions</strong> section.
Added the sub-section <strong>Debugging in the browser</strong>.</td>
</tr></table>
</div>
</div>
</div>
		]]>
</content:encoded>
        
        <pubDate>Sun, 25 Nov 2018 04:04:22 +0200</pubDate>
        <guid>https://masterex.github.io/archive/2018/11/25/debugging-like-a-boss.html</guid>
    </item>
    <item>
        <title>JWT handling in a Javascript client</title>
        <link>https://masterex.github.io/archive/2018/10/23/JWT-handling-in-a-javascript-client.html</link>
        <description>JWT handling in a Javascript client</description>
        <content:encoded>
<![CDATA[
		<div class="sect1">
<h2 id="_jwt_handling_in_a_javascript_client">JWT handling in a Javascript client</h2>
<div class="sectionbody">
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>On <strong>Tuesday 18 of September</strong> my coleague <strong>Christos</strong> and I decided to attend the
<a href="https://www.meetup.com/en-AU/Angular-Athens/events/254403394/">Angular Athens #3 meeting</a>.</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>There were <strong>2</strong> topics presented. An introductory presentation on angular <strong>navigation</strong>
and <strong>routing</strong>
and an intermidiate prestantation on <strong>authentication</strong> and <strong>authorization</strong> using
<strong>JWT</strong>.</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>This post is inspired by the second presentation on <strong>JWT</strong>. The specific
presentation in my opinion was very well presented by <strong>Fanis Prodromou</strong>
and I really liked it.</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>This article is based on something that the presenter said during that
talk.
When the speaker was explaining how the <strong>JWT</strong> works, he mentioned that all angular libraries that he knows
of require the secret key in order to decode the <strong>JWT</strong>.</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>He claimed that storing the secret key inside the client
seems like a bad idea to him and so he justs (<strong>base64</strong>) decodes the <strong>JWT</strong> "manually",
in order to get the contained information (claims).</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>The particular part is mentioned in <a href="https://youtu.be/xTqa9r5FHl8">this video</a>
in <a href="https://youtu.be/xTqa9r5FHl8?t=3530">~58:50</a> (in Greek).</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>So, the speaker gave us as a homework assignment to research why the libraries require the
secret key.</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>Here I am, having made my research <strong>:-)</strong></p></div>
</div>
</div>
<div class="sect1">
<h2 id="_how_jwt_works">How JWT works</h2>
<div class="sectionbody">
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>First of all let me quote the abstract of <a href="https://tools.ietf.org/html/rfc7519"><strong>RFC 7519</strong></a>.</p></div>
<div class="quoteblock" id="JWT-handling-in-a-javascript-client">
<div class="content">
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>JSON Web Token (JWT) is a compact, URL-safe means of representing
claims to be transferred between two parties.  The claims in a JWT
are encoded as a JSON object that is used as the payload of a JSON
Web Signature (JWS) structure or as the plaintext of a JSON Web
Encryption (JWE) structure, enabling the claims to be digitally
signed or integrity protected with a Message Authentication Code
(MAC) and/or encrypted.</p></div>
</div>
<div class="attribution">
<em>RFC 7519</em><br />
&#8212; IETF
</div></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>In other words, this means that a <strong>JWT</strong> is the medium of transportation, a <strong>JWS</strong> has the ability
to validate that the <strong>JWT</strong> is not tampered by one who has not access to
the signature key and the <strong>JWE</strong> has the ability to not reveal the <strong>JWT</strong> content
to the parties that have not access to the decryption key.</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>Let me also quote the paragraph <strong>12</strong> from the RFC that is relevant.</p></div>
<div class="quoteblock" id="JWT-handling-in-a-javascript-client">
<div class="title">12.  Privacy Considerations</div>
<div class="content">
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>A JWT may contain privacy-sensitive information.  When this is the
case, measures MUST be taken to prevent disclosure of this
information to unintended parties.  One way to achieve this is to use
an encrypted JWT and authenticate the recipient.  Another way is to
ensure that JWTs containing unencrypted privacy-sensitive information
are only transmitted using protocols utilizing encryption that
support endpoint authentication, such as Transport Layer Security
(TLS).  Omitting privacy-sensitive information from a JWT is the
simplest way of minimizing privacy issues.</p></div>
</div>
<div class="attribution">
<em>RFC 7519</em><br />
&#8212; IETF
</div></div>
</div>
</div>
<div class="sect1">
<h2 id="_jwt_and_the_browser">JWT and the browser</h2>
<div class="sectionbody">
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>So, what should we do in an angular application which lives in the browser?</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>The <strong>JWT</strong> that <strong>Fanis</strong> used was actually a <strong>JWS</strong> and in that case we should do what
he did and just <strong>base64</strong> decode it. Of course to be sure that the content is
trusted and there isn&#8217;t a <a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">man-in-the-middle attack</a>
taking place, the server should serve the content over <a href="https://en.wikipedia.org/wiki/HTTPS">HTTPS</a>.</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>A web application shouldn&#8217;t store the signature or encryption key because
the key would be exposed to everyone making it useless and actually the client do not need to
validate the token as it knows that it comes from the trusted server, because of the HTTPS/TLS.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_when_to_use_and_validate_the_jws">When to use and validate the JWS</h2>
<div class="sectionbody">
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>I&#8217;ll oversimplify some things for the sake of brevity
and because I believe that there is no need for more detail and accuracy
for the topic that we are discussing.</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>In the case of <strong>JWS</strong> the key should be used by the web service/issuer to validate that the tokens that receives
back from the client are the one that were issued by it originally.</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>This may work as an alternative to the traditional sessions. The server however do not
have the task of maintaining the table of active sessions. It just has to validate the token and
check the expiration date to see if it is valid.</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>In case we are talking about multiple web services that are communicating
together, all may follow the previous procedure and in practice "share the user session".</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>Also, the token may contain (not sensitive) information that is accessed often by the server
in order to avoid making pricey calls to the db.</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>Of course the token may contain information that is required by the client too.</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>However, storing too many information in the <strong>JWT</strong> introduces a
bandwidth overhead, as the <strong>JWT</strong> has to be included in <em>all</em> the requests
made by the client.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_when_to_use_jwe">When to use JWE</h2>
<div class="sectionbody">
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>A <strong>JWE</strong> may contain sensitive information that the server retrieved from the database
and wants to avoid making the retrieval again in the future,
in order to reply to a following request made by the client.</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>The server of course do not want to share all these private information
with the client and that is achieved through the encryption.</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>Enough about all that JW*.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_what_about_the_javascript_libraries">What about the Javascript libraries?</h2>
<div class="sectionbody">
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>In the past things were simpler. Javascript was living only in the browser.
Today this is no longer true. Javascript is everywhere and people are building web services in Javasctipt
all the time with <strong>nodejs</strong>.</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>I do not remember what were the libraries mentioned by the speaker and I
cannot see them clearly in the video, but I guess these libraries were supposed to
be used by web service authors.</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>Making a search I was able to find a couple of libraries that do not
required a secret key in order to decode the <strong>JWS</strong> payload:</p></div>
<div class="ulist" id="JWT-handling-in-a-javascript-client"><ul>
<li>
<p>
<a href="https://github.com/auth0/angular-JWT">https://github.com/auth0/angular-JWT</a>
</p>
</li>
<li>
<p>
<a href="https://github.com/auth0/JWT-decode">https://github.com/auth0/JWT-decode</a>
</p>
</li>
</ul></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>The second one mentions pretty clearly that it is intented for client use:</p></div>
<div class="admonitionblock" id="JWT-handling-in-a-javascript-client">
<table><tr>
<td class="icon">
<img src="https://masterex.github.io/archive/2018/10/23/../../../../images/icons/important.png" alt="Important" />
</td>
<td class="content">This library doesn&#8217;t validate the token, any well formed JWT
can be decoded. You should validate the token in your server-side logic
by using something like express-JWT, koa-JWT, Owin Bearer JWT, etc.</td>
</tr></table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_epilogue">Epilogue</h2>
<div class="sectionbody">
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>The motivation behind my research wasn&#8217;t of course the speakers' request.</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>I have used <strong>JWTs</strong> just like that in the past. So, hearing that all
the known libraries were requiring the key made me wonder if I was doing something
wrong.</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>You see, the fact that all the well known libraries were using the key
made me consider that this should be the right way.</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>Also, none from the audiense objected or volunteered to clarify after hearing this. I guess some may knew
about it but were unsure at the moment or didn&#8217;t want to disrupt
the presentation.</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>Anyway, I was happy
to validate through my research that the way that the presenter demonstrated (and I use) doesn&#8217;t
have any flaw.</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p>I applaud the work of <a href="https://www.meetup.com/en-AU/Angular-Athens/"><strong>Angular Athens</strong></a> who try to organize events,
create a network of front-end professionals and host interesting talks.
All this requires precious time and effort. I also
enjoyed <strong>Fanis'</strong> presentation.
It requires very much effort to prepare a nice talk and speaking to
an audience with many persons that you don&#8217;t know is often very intimidating.</p></div>
<div class="paragraph" id="JWT-handling-in-a-javascript-client"><p><strong>Thank you for reading!</strong></p></div>
</div>
</div>
		]]>
</content:encoded>
        
        <pubDate>Tue, 23 Oct 2018 23:18:54 +0300</pubDate>
        <guid>https://masterex.github.io/archive/2018/10/23/JWT-handling-in-a-javascript-client.html</guid>
    </item>
    <item>
        <title>Choosing a programming language</title>
        <link>https://masterex.github.io/archive/2017/01/18/fosscomm2014-thoughts-on-programming-languages.html</link>
        <description>Choosing a programming language</description>
        <content:encoded>
<![CDATA[
		<div class="sect1">
<h2 id="_choosing_a_programming_language">Choosing a programming language</h2>
<div class="sectionbody">
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>Back in 2014 I participated in <strong><a href="https://en.wikipedia.org/wiki/Fosscomm">Fosscomm</a></strong> with the talk
"<strong>What programming language should I choose next</strong>". The concept of the talk was to introduce
the steps we have to take in order to choose the programming language for our next project.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>Now I am much more experienced and I can give more insights to this subject.
I always wanted to write about that since then. Let&#8217;s hope that it
will be a good starting point for me to start writing in this blog more
frequently again :-)</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>The main points that I will go through are:</p></div>
<div class="olist arabic" id="fosscomm2014-thoughts-on-programming-languages"><ol class="arabic">
<li>
<p>
Programming language characteristics
</p>
</li>
<li>
<p>
Occasions for choosing a programming language
</p>
</li>
<li>
<p>
Conclusion
</p>
</li>
</ol></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>The following content is mostly based on my personal thoughts and experience
and it is intended to be considered as food for thought rather than anything
else.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_programming_language_characteristics">Programming language characteristics</h2>
<div class="sectionbody">
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>There are countless programming languages. Others are created to solve
problems of specific domains (<a href="https://en.wikipedia.org/wiki/Domain-specific_language">domain specific languages</a>
such as <strong>AWK</strong> for text processing) and others try to be more generic and solve
problems of many domains (<a href="https://en.wikipedia.org/wiki/General-purpose_programming_language">general purpose languages</a>
such as <strong>C</strong> and <strong>Java</strong>).</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>Domain specific languages may be the best/easiest way for solving particular problems
and comparing them with other non-specific may be unfair, depending the context.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>Let&#8217;s better have generic programming languages in mind from now on when
referring to programming languages.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>Every programming language has some main characteristics that distinct it from
other languages and unite it with others. These characteristics implement
particular concepts that may be more suitable for some circumstances than others.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>Mastering these concepts is essential for choosing the most well-fit language
for a particular task and furthermore for easily and quickly using a new language
that implements those known concepts.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>Let&#8217;s see the basic concepts that I think that are worthy to mention.</p></div>
<div class="sect2">
<h3 id="_compiled_vs_interpreted">Compiled vs Interpreted</h3>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>A main characteristic of a language is if it is
compiled or interpreted.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>By compiled we mean that the default implementation of the language
provides a compiler that translates the source program to machine code.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>An example of such a language is <strong>C</strong> or <strong>C++</strong>.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>By interpreted we mean that the default implementation of the language
provides an interpreter that executes the source code on the fly.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>An example would be <strong>Perl</strong> or <strong>PHP</strong>.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>I refer to the default implementation because the truth is that any language
may be compiled or interpreted. However, the default implementation is the
one that is widely adopted and best supported. Some languages as <strong>Haskell</strong>
may provide both compilers and interpreters.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>The advantages of a compiled language is that the program will run faster.
However a binary executable has to be built against each desired target
architecture. Changes to the source code require re-compilation in order
to run the updated program. This would be time consuming in large programs
such as a video game and would disrupt more the development process.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>The advantages of an interpreted language is that we may do changes to the
source code and test at once. This makes development much easier as we may
test our changes much faster. Also, the source code is distributed as it
is and it may run everywhere an appropriate interpreter is installed. Of course
running the program is slower than the previous solution as the translation
happens at run time.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>Some languages as <strong>Java</strong> combine the two mentioned techniques. Java compiles
the source code to bytecode, an intermediate representation of the program
and the interpreter(jvm) runs the bytecode. Also, in the case of Java and jvm
there are other optimizations that take place such as <a href="https://en.wikipedia.org/wiki/Just-in-time_compilation">JIT</a>
(just in time compilation) that makes the performance of the programs much
better.</p></div>
</div>
<div class="sect2">
<h3 id="_programming_paradigms">Programming paradigms</h3>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>The compiler/interpreter provided by the default implementation isn&#8217;t
actually a language characteristic but in my opinion it is essential for one to have at
least a basic understanding for these stuff.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>The next thing we are going to mention is definitely a language characteristic.
It is the <a href="https://en.wikipedia.org/wiki/Programming_paradigm">programming paradigms</a>
a language encapsulates.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>I won&#8217;t mention which the programming paradigms are. You can check wikipedia for that.
I&#8217;ll just mention that a programming paradigm dictates the way we will face a problem and how we
will use the programming language at hand in order to model a solution. It
highly affects the development process. Some paradigms are better suited for
specific tasks and may result in more elegant solutions and more readable
code (for those familiar with the used paradigm at least).</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>A programming language may implement at least partially more than one paradigm.
Having a basic understanding of some paradigms may be a great asset in one&#8217;s programming
arsenal.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>Also, some other important things such as <a href="https://en.wikipedia.org/wiki/Software_design_pattern">design patterns</a>
may be specific to specific programming paradigms. Usually, most design patterns
are related to object-oriented paradigm actually.</p></div>
</div>
<div class="sect2">
<h3 id="_type_checking_system">Type checking system</h3>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>The next thing that we should have in mind is the <a href="https://en.wikipedia.org/wiki/Type_system">type checking system</a>.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>The type checking system of a language is the mechanism that checks if a
type contains a permitted value accordingly to some specified rules. In
other words a type safe language is one that shields the programmer from
using the types in a not desired way.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p><strong>Java</strong> is such a language. Here is an example.</p></div>
<div class="listingblock">
<a id="fosscomm2014-thoughts-on-programming-languages"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-style: italic"><span style="color: #9A1900">//this fails with a compiler error</span></span>
<span style="font-style: italic"><span style="color: #9A1900">//error: incompatible types: int cannot be converted to String</span></span>
<span style="color: #008080">String</span> one <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span></tt></pre></div></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>Other than that the extend and the way the type safety is enforced may vary.
For example some languages check for type errors at compile time while others
check at run time.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>Of course there are languages that have limited or none type safety. This
doesn&#8217;t mean that a non type safe language is inferior to others. There are
some merits such as the development process may be faster and the learning
curve of such a language quicker as the syntax tends to be simpler.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>Such a language is <strong>Javascript</strong>. Here is an example:</p></div>
<div class="listingblock">
<a id="fosscomm2014-thoughts-on-programming-languages"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">var</span></span> h <span style="color: #990000">=</span> <span style="color: #FF0000">"hello, "</span><span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #0000FF">var</span></span> w <span style="color: #990000">=</span> <span style="color: #993399">5</span><span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000000">alert</span></span><span style="color: #990000">(</span>h<span style="color: #990000">+</span>w<span style="color: #990000">);</span>   <span style="font-style: italic"><span style="color: #9A1900">// prints hello, 5</span></span>
<span style="font-weight: bold"><span style="color: #000000">alert</span></span><span style="color: #990000">(</span>w<span style="color: #990000">+</span><span style="color: #993399">4</span><span style="color: #990000">);</span>   <span style="font-style: italic"><span style="color: #9A1900">// prints 9</span></span>
<span style="font-weight: bold"><span style="color: #000000">alert</span></span><span style="color: #990000">(</span>h<span style="color: #990000">+</span>w<span style="color: #990000">+</span><span style="color: #993399">4</span><span style="color: #990000">);</span> <span style="font-style: italic"><span style="color: #9A1900">// prints hello, 54</span></span></tt></pre></div></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>As you can see there aren&#8217;t many restrictions on how the types may be used.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>Type checking may be more important than it looks. Facebook had created
the <a href="http://hacklang.org/">hack</a> language a while back aiming to produce
code of better quality faster.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>As it is mentioned in hack&#8217;s website "<strong>Hack reconciles the fast development
cycle of a dynamically typed language with the discipline provided by static typing</strong>".</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>If big companies consider type safety such an important subject and invest
time and money on this, then we should definitely have at least a basic
understanding of type checking systems.</p></div>
</div>
<div class="sect2">
<h3 id="_memory_management">Memory management</h3>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>Another important characteristic of a programming language is the memory
management system that it uses.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>Some languages require the user to allocate and free the memory by hand
which of course requires more work. However, it provides better performance
and control with higher risk of human errors. Such a language is traditionally
<strong>C</strong>.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>On the other hand there are languages that provide a garbage collection mechanisms.
This is much safer and new programs are easier and faster to write but of course
it costs on performance. Such a language is <strong>Java</strong>.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>As always the best approach depends on the application that we desire to write
and the problem we aim to solve.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>In the case of garbage collected languages it is essential to have a basic understanding
of the available collection strategies and the lifecycle of the objects.
In the case of manually freeing the memory one should be very careful not
to cause memory leaks or other security holes.</p></div>
</div>
<div class="sect2">
<h3 id="_syntactic_sugar">Syntactic sugar</h3>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>Another factor of a programming language that I find important is the
syntactic sugar.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>By syntactic sugar I refer to all the ways a programming language can express
a solution to a particular problem, elegantly. Often the elegant solutions
are the compact ones and the more readable.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>This is not an important factor but languages that provide these facilities
may be used somewhat faster when developing a new application and may aid the
developer to be more expressive.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>An example of syntactic sugar would incrementing an integer in <strong>Lua</strong> and in <strong>C</strong>:</p></div>
<div class="listingblock">
<a id="fosscomm2014-thoughts-on-programming-languages"></a>
<div class="title">Lua</div>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt>i <span style="color: #990000">=</span> i <span style="color: #990000">+</span> <span style="color: #993399">1</span></tt></pre></div></div>
<div class="listingblock">
<a id="fosscomm2014-thoughts-on-programming-languages"></a>
<div class="title">C</div>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt>i<span style="color: #990000">++;</span></tt></pre></div></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>These "shortcuts" may be harder to read for a newbie but they feel pretty
natural if you get familiar with them.</p></div>
</div>
<div class="sect2">
<h3 id="_libraries_frameworks_and_community">Libraries, frameworks and community</h3>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>Last but not least an important factor is the toolset that is available for
a specific language and the whole ecosystem around it.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>A vivid community means that learning material is broadly available, the development
of the language will be more  active and mature libraries, frameworks and
other tools should already exist.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>All these small details are actually very important. For example a powerful
framework that let you build your next web app in a fraction of the development
time compared to other frameworks would be a pretty good reason to choose
a particular language.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>Furthermore, a larger community means a larger user base. This means more
projects in the particular language that leads to more jobs around the particular
language and the relevant technologies.</p></div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_occasions_for_choosing_a_programming_language">Occasions for choosing a programming language</h2>
<div class="sectionbody">
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>Now that we have a basic understanding of the characteristics of a programming language and we can
detect these characteristics between various languages lets see the occasions
that we may face when having to choose a programming language
for our <em>next</em> <strong>big</strong> project.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>There are 2 occasions, the project may be a personal one for fun or a professional one for profit.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>This is the most important factor that we should have in mind for making the particular choice.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>If the project is personal then one has to aim gaining experience through it.
So, choosing new languages, frameworks, libraries and technologies is the
way to go. Mind that learning a new language is really meaningful if it introduces
new concepts. Learning just another language that is similar to the previous
known doesn&#8217;t add extra value. In the end, <strong>it&#8217;s just syntax</strong>.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>By new concepts I refer to the previous characteristics that we have analyzed.
One familiar with these characteristics and hands on experience with them
may easily jump to a new language that encapsulates similar concepts.
Learning syntax is easy, having to learn more advanced things such as a paradigm
is the real challenge.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>On the other hand on a professional environment we have to choose the most <strong>easy</strong>
solutions. This means the solution that will provide faster the desired
result with the available work force. In case the work force is insufficient
we have to take into account the availability of new hires with the necessary
skills or the time required for a new inexperienced hire to master the required technologies.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>Any existing code base has to be taken into account at this decision. We
have to be familiar with the legacy technologies used or take into account the
time required to move the project to newer technologies. In that case, we should
consider if there are reasons that will force us to move to newer technologies
in the future anyway.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>A formula that I have created for the decision making between two languages
A and B during my fosscomm talk is the following. First we calculate the
COST of the 2 languages LA and LB:</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>COST_FUNCTION = (<span class="red">LTLx</span> + <span class="green">ECTLx</span> + <span class="yellow">FTECLx</span> + <span class="purple">LIBECLx</span> + <span class="blue">TECHECLx</span> + OTHERECLx) + (<span class="red">TLx</span> + <span class="yellow">FTLx</span> + <span class="purple">LIBLx</span> + <span class="blue">TECHLx</span> + OTHERLx) * TIME</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>Where:</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p><span class="red">LTLx</span>: The time required to master the language Lx. LTLx = 0 if Lx is already mastered</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p><span class="red">TLx</span>: The time required to maintain and develop further the application
if we plan to use the language Lx for <strong>TIME</strong> period of time</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p><span class="green">ECTLx</span>: The time required to rewrite the existing code base to the target language</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p><span class="yellow">FTECLx</span>: The time required to master the used frameworks of the existing code-base</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p><span class="purple">LIBECLx</span>: The time required to master the libraries of the existing code-base</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p><span class="blue">TECHECLx</span>: The time required to get familiar the other technologies already used</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>OTHERECLx: Other factors related to the existing code base</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p><span class="yellow">FTLx</span>, <span class="purple">LIBLx</span> etc. are the time required for each factor if
we are going to use these things for <strong>TIME</strong> period of time.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>So, in order to choose what language is the best to use we have to compare
their costs and pick the one with the smaller cost.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p><strong>COST_FUNCTION(La,YEARS)</strong> &gt; <strong>COST_FUNCTION(Lb,YEARS)</strong></p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>If the cost functions are equals then we may use some further things as criteria
such as the personal preferences of the development team, the average cost
of hiring programmers in the particular language or the availability
of programmers for the particular language in the market.</p></div>
<div class="sect2">
<h3 id="_conclusion">Conclusion</h3>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>The point that I would like to make is that when we have the opportunity
we should experiment and learn new things. In the context of programming languages
these new things are all the characteristics that I have mentioned before.
By getting familiar with all these we will be able to understand better and learn
quicker new languages when it will be required.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>All this gained knowledge will also be a great asset when we should make
choices in our work environment, especially if we are encouraged to use
new technologies in order to enrich our company&#8217;s know how. This is more
usual for smaller companies.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>On the other hand if we work on larger companies it is not easy to experiment.
Business is about profit and the tech related choices should be the ones that will
profit the company the most. Our gained knowledge will be again useful in order
to make the best choices.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>So study new concepts on your spare time, no syntax! Don&#8217;t waste your time!
Stick to what you have mastered in your work environment except if there
are opportunities for experimentation.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>Please, feel free to share in the comments other language characteristics
that you think that are important. I would love to read your thoughts on
the subject.</p></div>
<div class="paragraph" id="fosscomm2014-thoughts-on-programming-languages"><p>Have fun and keep coding!</p></div>
</div>
</div>
</div>
		]]>
</content:encoded>
        
        <pubDate>Wed, 18 Jan 2017 23:22:40 +0200</pubDate>
        <guid>https://masterex.github.io/archive/2017/01/18/fosscomm2014-thoughts-on-programming-languages.html</guid>
    </item>
    <item>
        <title>Popcorn time VS the torrent community</title>
        <link>https://masterex.github.io/archive/2014/03/31/popcorn-time-maybe-harmful.html</link>
        <description>Popcorn time VS the torrent community</description>
        <content:encoded>
<![CDATA[
		<div class="sect1">
<h2 id="_popcorn_time_vs_the_torrent_community">Popcorn time VS the torrent community</h2>
<div class="sectionbody">
<div class="paragraph" id="popcorn-time-maybe-harmful"><p><strong>Popcorn time</strong> is a desktop application that permits a user to watch movies
instantly. In this article I am going to share with you some thoughts
about how popcorn time may potentially harm the torrent community.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_how_popcorn_time_works">How Popcorn time works</h2>
<div class="sectionbody">
<div class="paragraph" id="popcorn-time-maybe-harmful"><p>Popcorn time provides the user a pretty interface showing the available
movies in an à la streaming service way (i.e. as <strong>NETFLIX</strong> etc). Currently
the movie titles are the ones ripped and uploaded by the <strong>yts.re</strong> team
(previously <strong>YIFI</strong>). This includes <strong>720p</strong>, <strong>1080p</strong> or <strong>3D</strong> quality movies. The
subtitles and movies meta info are fetched automatically.</p></div>
<div class="paragraph" id="popcorn-time-maybe-harmful"><p>As you can see the features and the quality are very rich.</p></div>
<div class="paragraph" id="popcorn-time-maybe-harmful"><p>Underneath popcorn time is actually a torrent client that downloads first
the first parts of the movie. That way it can play the movie while still
downloading it(streaming).</p></div>
<div class="paragraph" id="popcorn-time-maybe-harmful"><p>When someone is watching a movie the same time is uploading it to other
peers. However when a user finish watching his movie and restart his PC the
movie will be deleted.</p></div>
<div class="paragraph" id="popcorn-time-maybe-harmful"><p>He won&#8217;t continue uploading the movie in the future and if he wants to watch
it again he&#8217;ll have to download it again.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_the_impact_of_popcorn_time_to_users">The impact of Popcorn time to users</h2>
<div class="sectionbody">
<div class="paragraph" id="popcorn-time-maybe-harmful"><p>The easiness of Popcorn time will eventually make users that weren&#8217;t as
technical as others to start using the bit-torrent protocol to watch movies.</p></div>
<div class="paragraph" id="popcorn-time-maybe-harmful"><p>These persons based on my personal experience are persons who aren&#8217;t familiar
with technology, some times are afraid of it and usually are of an older age.</p></div>
<div class="paragraph" id="popcorn-time-maybe-harmful"><p>In addition new generations is very likely to use Popcorn time to watch movies
instead of a classic torrent client due to its easiness. This is completely
logical as a self taught individual will start using the most appealing and
easy technology in his first steps.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_how_torrent_clients_work">How torrent clients work</h2>
<div class="sectionbody">
<div class="paragraph" id="popcorn-time-maybe-harmful"><p>Just to continue and make my point I would like to remind you how traditional
torrent clients work.</p></div>
<div class="paragraph" id="popcorn-time-maybe-harmful"><p>When a torrent is added the client will connect to X other peers. Then he&#8217;ll
start downloading file chunks from them while in the same time uploading
the chunks that it has already downloaded to other users.</p></div>
<div class="paragraph" id="popcorn-time-maybe-harmful"><p>When the file is complete the client will continue uploading the file to other
users.</p></div>
<div class="paragraph" id="popcorn-time-maybe-harmful"><p>It is possible to make the client stop seeding(uploading) the movie after
some time but by default most clients upload the file indefinitely. Moreover,
many clients default settings make them start in the OS start-up and seed
even if there isn&#8217;t an active <em>download</em>.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_seeders_and_leechers_ratio">Seeders and leechers ratio</h2>
<div class="sectionbody">
<div class="paragraph" id="popcorn-time-maybe-harmful"><p>So a seeder is one that has the whole file downloaded and he is uploading it
to other users and a leecher is one that has a partial copy of the file and
usually uploads the pieces that he has to others(though rarely one may
choose not to upload at all if that&#8217;s allowed).</p></div>
<div class="paragraph" id="popcorn-time-maybe-harmful"><p>So the reason that one is able to download a file is because there are
seeders, people who have a whole copy of the file.</p></div>
<div class="paragraph" id="popcorn-time-maybe-harmful"><p>Let me give you an example. If a newly created torrent will be seeded for
5 times only by the original seeder, and 5 people come first, download the
file and then choose not to seed then the 6th person who will try to download
the file won&#8217;t be able to do so.</p></div>
<div class="paragraph" id="popcorn-time-maybe-harmful"><p>An other impact of leechers is also that even if for example the original
seeder continue to seed the torrent indefinitely then the 6th person of the
previous example will be able to download the file but in low speed.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_getting_the_pieces_together">Getting the pieces together</h2>
<div class="sectionbody">
<div class="paragraph" id="popcorn-time-maybe-harmful"><p>So, usually the download speed of a user is much faster than the upload speed.
One can download a <strong>700MB</strong> file in almost <strong>1hour and 20minutes</strong> at <strong>1.20Mb/s</strong> but would
need almost <strong>10hours</strong> to upload it at <strong>150Kb/s</strong>.</p></div>
<div class="paragraph" id="popcorn-time-maybe-harmful"><p>I have based the above numbers more or less on my internet speed which as
far as I know is at least at the moment an average connection for <strong>Athens</strong>,
<strong>Greece</strong> (speedtest rate my connection with <strong>31ms</strong> ping, <strong>7.64Mbps</strong> download,
<strong>0.58</strong> Mbps upload).</p></div>
<div class="paragraph" id="popcorn-time-maybe-harmful"><p>Without even doing the match you understand that if everyone used Popcorn time
to watch a movie and right after that exit the application then that would
at least affect the quality of the download speed.</p></div>
<div class="paragraph" id="popcorn-time-maybe-harmful"><p>Also have in mind that some people will use Popcorn time to watch the same movies more
than once.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_final_thoughts">Final thoughts</h2>
<div class="sectionbody">
<div class="paragraph" id="popcorn-time-maybe-harmful"><p>To conclude I am not using Popcorn time but I find the idea behind it
brilliant. I would certainly recommend it to non technical persons or
for specific purposes as media centers.</p></div>
<div class="paragraph" id="popcorn-time-maybe-harmful"><p>Popcorn time just recently caught my attention (yeah, I know, I may
as well leave in a cave:P) and these thoughts were came to me instantly.
I am not a bit-torrent protocol expert so my fears may be wrong. Maybe the
internet connections will get much better and cheaper really soon or maybe
Popcorn time will eventually change its default settings to resemble more
the ones of the common torrent clients, who knows!
Fill free if you have any comments on my thoughts to leave them below!</p></div>
<div class="ulist" id="popcorn-time-maybe-harmful"><div class="title">See also:</div><ul>
<li>
<p>
<a href="http://popcorn.cdnjd.com/">Popcorn time</a>
</p>
</li>
<li>
<p>
<a href="http://en.wikipedia.org/wiki/Peer-to-peer_file_sharing">Wikipedia: Peer-to-peer file sharing</a>
</p>
</li>
</ul></div>
</div>
</div>
		]]>
</content:encoded>
        
        <pubDate>Mon, 31 Mar 2014 06:37:44 +0300</pubDate>
        <guid>https://masterex.github.io/archive/2014/03/31/popcorn-time-maybe-harmful.html</guid>
    </item>
    <item>
        <title>Cryptolexo, playing with string arrays</title>
        <link>https://masterex.github.io/archive/2014/01/31/cryptolexo.html</link>
        <description>Cryptolexo, playing with string arrays</description>
        <content:encoded>
<![CDATA[
		<div class="sect1">
<h2 id="_cryptolexo_playing_with_string_arrays">Cryptolexo, playing with string arrays</h2>
<div class="sectionbody">
<div class="paragraph" id="cryptolexo"><p>Hello everyone! Long time no see&#8230;</p></div>
<div class="paragraph" id="cryptolexo"><p>So, the last few days I was playing with the idea of creating a <strong>random</strong>
<a href="http://en.wikipedia.org/wiki/Word_search">word-search puzzle</a> based on a set of words.</p></div>
<div class="paragraph" id="cryptolexo"><p>For the ones that don&#8217;t know what a word-search puzzle is, let me quote
Wikipedia:</p></div>
<div class="listingblock" id="cryptolexo">
<div class="content">
<pre><code>A word search, word find, word seek, word sleuth or mystery word puzzle is a
word game that consists of the letters of words placed in a grid, which usually
has a rectangular or square shape. The objective of this puzzle is to find and
mark all the words hidden inside the box. The words may be placed horizontally,
vertically, or diagonally. Often a list of the hidden words is provided, but
more challenging puzzles may let the player figure them out.

from Wikipedia</code></pre>
</div></div>
<div class="paragraph" id="cryptolexo"><p>Now, all of us know what a word-search puzzle is! My naive implementation
creates a word-search puzzle from a given set of words,
with vertically and horizontally hidden words read from
left to right.</p></div>
<div class="paragraph" id="cryptolexo"><p>The name <strong>Cryptolexo</strong> comes from the Greek word <strong>Κρυπτόλεξο</strong> which is used to
describe that kind of games.</p></div>
<div class="paragraph" id="cryptolexo"><p>Above, I am going to introduce you the goals of the implementation and
some of the challenges.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_goals">Goals</h2>
<div class="sectionbody">
<div class="paragraph" id="cryptolexo"><p>The goal is simple.</p></div>
<div class="ulist" id="cryptolexo"><ul>
<li>
<p>
Create a <strong>NxM</strong> String array from a given set of words,
where the words will be placed vertically and horizontally.
</p>
</li>
<li>
<p>
Fill the empty places with random letters.
</p>
</li>
</ul></div>
</div>
</div>
<div class="sect1">
<h2 id="_challenge">Challenge</h2>
<div class="sectionbody">
<div class="paragraph" id="cryptolexo"><p>For starters, when the 2D array is empty it is easy to add a word. We can surely
guarantee that it will fit unless the word&#8217;s length excess the array&#8217;s length. It
is also pretty trivial to choose at random if the world will be placed
vertically or horizontally and also choose at random a starting
place.</p></div>
<div class="paragraph" id="cryptolexo"><p>So, let&#8217;s say we have a 10x10 array and we want to add the word test. An
accepted solution could place the word in the 3rd row from the 2 to 5 column
but it couldn&#8217;t place the word to the 3rd row from the 9 to 12 column because
the array isn&#8217;t so big.</p></div>
<div class="paragraph" id="cryptolexo"><p>That was the easy part. What if when we add a word to a populated array a
collision happens? That&#8217;s the challenge and in the next section I am going to
describe my approach.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_handling_the_collisions">Handling the Collisions</h2>
<div class="sectionbody">
<div class="paragraph" id="cryptolexo"><p>Here I am going to enumerate the possible cases that we may face with examples!</p></div>
<div class="sect2">
<h3 id="_adding_a_word_that_fits_after_another">Adding a Word that Fits after Another</h3>
<div class="paragraph" id="cryptolexo"><p><span class="image">
<img src="https://masterex.github.io/archive/2014/01/31/word-after.png" alt="word after another" />
</span></p></div>
</div>
<div class="sect2">
<h3 id="_adding_a_word_that_fits_before_another">Adding a Word that Fits before Another</h3>
<div class="paragraph" id="cryptolexo"><p><span class="image">
<img src="https://masterex.github.io/archive/2014/01/31/word-before.png" alt="word before another" />
</span></p></div>
</div>
<div class="sect2">
<h3 id="_failing_to_add_a_word">Failing to Add a Word</h3>
<div class="paragraph" id="cryptolexo"><p><span class="image">
<img src="https://masterex.github.io/archive/2014/01/31/word-fail.png" alt="word fails to fit" />
</span></p></div>
</div>
<div class="sect2">
<h3 id="_merging_words">Merging Words</h3>
<div class="paragraph" id="cryptolexo"><p><span class="image">
<img src="https://masterex.github.io/archive/2014/01/31/word-merge.png" alt="merging words" />
</span></p></div>
</div>
<div class="sect2">
<h3 id="_add_word_to_row_algorithm">Add Word to Row Algorithm</h3>
<div class="listingblock">
<a id="cryptolexo"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #009900">int</span> <span style="font-weight: bold"><span style="color: #000000">getColInRowWithCollision</span></span><span style="color: #990000">(</span><span style="color: #009900">char</span><span style="color: #990000">[][]</span> array<span style="color: #990000">,</span> <span style="color: #008080">String</span> word<span style="color: #990000">,</span> <span style="color: #009900">int</span> r<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
  <span style="font-style: italic"><span style="color: #9A1900">// start from all possible places</span></span>
  <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #009900">int</span> i<span style="color: #990000">=</span><span style="color: #993399">0</span><span style="color: #990000">;</span>i<span style="color: #990000">&lt;</span>array<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">].</span>length<span style="color: #990000">-</span>word<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">length</span></span><span style="color: #990000">();</span>i<span style="color: #990000">++)</span> <span style="color: #FF0000">{</span>
    <span style="color: #009900">int</span> arrayPointer <span style="color: #990000">=</span> i<span style="color: #990000">;</span>
    <span style="color: #009900">int</span> wordPointer <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
    <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span>wordPointer <span style="color: #990000">&lt;</span> word<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">length</span></span><span style="color: #990000">()</span> <span style="color: #990000">&amp;&amp;</span> arrayPointer <span style="color: #990000">&lt;</span> array<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">].</span>length<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
      <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span>array<span style="color: #990000">[</span>r<span style="color: #990000">][</span>arrayPointer<span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">||</span>
          array<span style="color: #990000">[</span>r<span style="color: #990000">][</span>arrayPointer<span style="color: #990000">]</span> <span style="color: #990000">==</span> word<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">charAt</span></span><span style="color: #990000">(</span>wordPointer<span style="color: #990000">))</span> <span style="color: #FF0000">{</span>
        wordPointer<span style="color: #990000">++;</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span>wordPointer<span style="color: #990000">==</span>word<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">length</span></span><span style="color: #990000">())</span> <span style="color: #FF0000">{</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> arrayPointer <span style="color: #990000">-</span> word<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">length</span></span><span style="color: #990000">()</span> <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
        <span style="color: #FF0000">}</span>
      <span style="color: #FF0000">}</span> <span style="font-weight: bold"><span style="color: #0000FF">else</span></span> <span style="color: #FF0000">{</span>
        wordPointer <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
      <span style="color: #FF0000">}</span>
      arrayPointer<span style="color: #990000">++;</span>
    <span style="color: #FF0000">}</span>
  <span style="color: #FF0000">}</span>
  <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph" id="cryptolexo"><p>As you can see this method returns the column where is possible to place the
word even by merging it and -1 otherwise. It needs to run <strong>(N-W)*W</strong> times,
where <strong>N</strong> the length of the array and <strong>W</strong> the length of the word. In the worst
case scenario it needs to run <strong>N^2/2</strong> times which is bad but pretty acceptable
for this size of problems. Even a <strong>60x60</strong> array can be filled very quickly.</p></div>
<div class="admonitionblock" id="cryptolexo">
<table><tr>
<td class="icon">
<img src="https://masterex.github.io/archive/2014/01/31/../../../../images/icons/tip.png" alt="Tip" />
</td>
<td class="content">I was using originally a String array[] because I wrongly thought it to
be more convenient. I was wrong and more importantly char[] uses less memory and
the character check is much faster.</td>
</tr></table>
</div>
<div class="paragraph" id="cryptolexo"><p>Here is a simple demo from the <span class="green">getColInRowWithCollision()</span> in usage:</p></div>
<div class="paragraph" id="cryptolexo"><p><span class="image">
<img src="https://masterex.github.io/archive/2014/01/31/steps.gif" alt="algorithm demo" />
</span></p></div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph" id="cryptolexo"><p>With that building blocks ready the construction of a word puzzle is very easy.
In my implementation the code that creates the puzzle tries <strong>X</strong> times to place
a word in a random place and if it fails then it searches exhaustively all
the possible places.</p></div>
<div class="paragraph" id="cryptolexo"><p>This is relatively very slow but the array is also small and in practice
it won&#8217;t happen frequently except if the
puzzle is too small and/or the word list very large.</p></div>
<div class="paragraph" id="cryptolexo"><p>Fill free to take a pick at <strong>Cryptolexo</strong> <a href="https://github.com/MasterEx/Cryptolexo">here</a>.
Inside the main method there are a few examples of usage! The code is
licensed under <strong>GPLv3</strong>.</p></div>
</div>
</div>
		]]>
</content:encoded>
        
        <pubDate>Fri, 31 Jan 2014 00:18:01 +0200</pubDate>
        <guid>https://masterex.github.io/archive/2014/01/31/cryptolexo.html</guid>
    </item>
    <item>
        <title>The pitfalls of learning by example</title>
        <link>https://masterex.github.io/archive/2013/04/15/pycrypto-hash-learning-by-example.html</link>
        <description>The pitfalls of learning by example</description>
        <content:encoded>
<![CDATA[
		<div class="sect1">
<h2 id="_the_pitfalls_of_learning_by_example">The pitfalls of learning by example</h2>
<div class="sectionbody">
<div class="paragraph" id="pycrypto-hash-learning-by-example"><p>Usually when I am writing code in an unfamiliar environment
(language,IDE, framework etc.) I tend to search
and study examples and if I am not satisfied, I then check the documentation/manual.</p></div>
<div class="paragraph" id="pycrypto-hash-learning-by-example"><p>I am doing this because it seems easier and quicker to understand something in this way and
because I am usually more concerned to get the expected result than understand in depth how
I got it.</p></div>
<div class="paragraph" id="pycrypto-hash-learning-by-example"><p>However, some times this may produce some nasty bugs.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_my_case">My Case</h2>
<div class="sectionbody">
<div class="paragraph" id="pycrypto-hash-learning-by-example"><p>Here, I would like to introduce you to my short experience with <strong>pycrypto</strong>
library&#8217;s hashing functions and how my habit to learn by example has failed me.</p></div>
<div class="paragraph" id="pycrypto-hash-learning-by-example"><p>A couple of months before I was
enrolled in courseras' crypto class offered by Standford&#8217;s Dan Boneh.</p></div>
<div class="paragraph" id="pycrypto-hash-learning-by-example"><p>Most programming assigments included code snippets in <strong>python</strong> and suggested
a python or c++ library to use. Regardless <a href="https://github.com/MasterEx/letsrpg-social-network">my small experience with python</a>
I choose it to implement the majority of the assignments.</p></div>
<div class="paragraph" id="pycrypto-hash-learning-by-example"><p>So, in a programming assignment I had to consecutively hash different
data chunks to check if any transmission errors took place.</p></div>
<div class="paragraph" id="pycrypto-hash-learning-by-example"><p>As I was unfamiliar with <strong>pycrypto</strong>, I searched for <strong>how to sha128 in pycrypto</strong>.
This got me to the library&#8217;s pydoc and I show this example <a href="https://www.dlitz.net/software/pycrypto/api/current/toc-Crypto.Hash.SHA-module.html">here</a></p></div>
<div class="listingblock">
<a id="pycrypto-hash-learning-by-example"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #990000">&gt;&gt;&gt;</span> <span style="font-weight: bold"><span style="color: #000080">from</span></span> Crypto<span style="color: #990000">.</span>Hash <span style="font-weight: bold"><span style="color: #000080">import</span></span> SHA
<span style="color: #990000">&gt;&gt;&gt;</span>
<span style="color: #990000">&gt;&gt;&gt;</span> h <span style="color: #990000">=</span> SHA<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">new</span></span><span style="color: #990000">()</span>
<span style="color: #990000">&gt;&gt;&gt;</span> h<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">update</span></span><span style="color: #990000">(</span>b<span style="color: #FF0000">'Hello'</span><span style="color: #990000">)</span>
<span style="color: #990000">&gt;&gt;&gt;</span> <span style="font-weight: bold"><span style="color: #0000FF">print</span></span> h<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">hexdigest</span></span><span style="color: #990000">()</span></tt></pre></div></div>
<div class="paragraph" id="pycrypto-hash-learning-by-example"><p>So, this seemed pretty straight forward and so I did something like that
in my program:</p></div>
<div class="listingblock">
<a id="pycrypto-hash-learning-by-example"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000080">from</span></span> Crypto<span style="color: #990000">.</span>Hash <span style="font-weight: bold"><span style="color: #000080">import</span></span> SHA

h <span style="color: #990000">=</span> SHA<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">new</span></span><span style="color: #990000">()</span>
<span style="font-weight: bold"><span style="color: #0000FF">for</span></span> chunk <span style="font-weight: bold"><span style="color: #0000FF">in</span></span> data<span style="color: #990000">:</span>
        h<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">update</span></span><span style="color: #990000">(</span>chunk<span style="color: #990000">)</span>
        <span style="font-weight: bold"><span style="color: #0000FF">print</span></span> h<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">hexdigest</span></span><span style="color: #990000">()</span></tt></pre></div></div>
<div class="paragraph" id="pycrypto-hash-learning-by-example"><p>This was a total disaster. The program runned smoothly but I was getting
the wrong result.</p></div>
<div class="paragraph" id="pycrypto-hash-learning-by-example"><p>I was lucky enough to test the update method shortly after I spotted the issue and
realised that consecutive
<span class="green">update()</span> calls on the same data produced different hashes.</p></div>
<div class="paragraph" id="pycrypto-hash-learning-by-example"><p>Puzzled by that, I just included <span class="red">h = SHA.new()</span> in the loop. However, If
I have read the documentation a little bit sooner, it could have saved me some time.</p></div>
<div class="paragraph" id="pycrypto-hash-learning-by-example"><p>The <span class="green">new()</span> function of SHA says <code>Return a fresh instance of the hash object</code>.
The <strong>fresh</strong> word was the key to my problem. Later, it says
<code>It is equivalent to an early call to SHA1Hash.update()</code>. So, clearly there
is a difference between the <span class="green">update()</span> calls.</p></div>
<div class="paragraph" id="pycrypto-hash-learning-by-example"><p>Problem was that the <span class="green">update()</span> concatenates every given argument with
the previous result. This becomes clear if you
read the  <a href="https://github.com/dlitz/pycrypto/blob/master/lib/Crypto/Hash/hashalgo.py#L53">pycryptos&#8217;s source code</a>
comments.</p></div>
<div class="paragraph" id="pycrypto-hash-learning-by-example"><p>In other words this <span class="red">m.update(a); m.update(b)</span> is the same with this
<span class="red">m.update(a+b)</span>.</p></div>
<div class="paragraph" id="pycrypto-hash-learning-by-example"><p>So, in my case I should have done the following:</p></div>
<div class="listingblock">
<a id="pycrypto-hash-learning-by-example"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000080">from</span></span> Crypto<span style="color: #990000">.</span>Hash <span style="font-weight: bold"><span style="color: #000080">import</span></span> SHA

<span style="font-weight: bold"><span style="color: #0000FF">for</span></span> chunk <span style="font-weight: bold"><span style="color: #0000FF">in</span></span> data<span style="color: #990000">:</span>
        <span style="font-weight: bold"><span style="color: #0000FF">print</span></span> SHA<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">new</span></span><span style="color: #990000">(</span>chunk<span style="color: #990000">).</span><span style="font-weight: bold"><span style="color: #000000">hexdigest</span></span><span style="color: #990000">()</span></tt></pre></div></div>
<div class="paragraph" id="pycrypto-hash-learning-by-example"><p>Sadly, there wasn&#8217;t a <strong>BIG</strong> warning sign in the SHA&#8217;s doc page. However,
I assume that if there was I would ignore it as long as my eye have spotted the
example.</p></div>
<div class="paragraph" id="pycrypto-hash-learning-by-example"><p>So, at the end of the day if everything else fails remember
to <strong>read the f*cking manual</strong>.</p></div>
</div>
</div>
		]]>
</content:encoded>
        
        <pubDate>Mon, 15 Apr 2013 14:24:09 +0300</pubDate>
        <guid>https://masterex.github.io/archive/2013/04/15/pycrypto-hash-learning-by-example.html</guid>
    </item>
    <item>
        <title>BeatKeeper: Adding a visual tick</title>
        <link>https://masterex.github.io/archive/2013/03/11/beatkeeper-visual-tick.html</link>
        <description>BeatKeeper: Adding a visual tick</description>
        <content:encoded>
<![CDATA[
		<div class="sect1">
<h2 id="_beatkeeper_adding_a_visual_tick">BeatKeeper: Adding a visual tick</h2>
<div class="sectionbody">
<div class="paragraph" id="beatkeeper-visual-tick"><p>Previous week
<a href="http://masterex.github.com/archive/2012/05/28/android-audio-synthesis.html#comment-821509194">Chris from Berlin asked me how to visualize the metronome</a>.</p></div>
<div class="paragraph" id="beatkeeper-visual-tick"><p>So I have tried the obvious, which is to simply print the current beat without success.</p></div>
<div class="paragraph" id="beatkeeper-visual-tick"><p>Printing the current beat before or after writing to the audio buffer resulted
the current beat not to change in sync with the sound.</p></div>
<div class="paragraph" id="beatkeeper-visual-tick"><p>However, thinking a little bit about it, it seemed pretty reasonable because each
time I wrote to the audio buffer I wasn&#8217;t writing a single tick but instead a
group of ticks and gaps(silence).</p></div>
<div class="paragraph" id="beatkeeper-visual-tick"><p>So, the first thing I did was to write only a pair of tick and gap each time to the audio buffer.</p></div>
<div class="paragraph" id="beatkeeper-visual-tick"><p>Here is the updated code:</p></div>
<div class="listingblock">
<a id="beatkeeper-visual-tick"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">calcSilence</span></span><span style="color: #990000">()</span> <span style="color: #FF0000">{</span>
                silence <span style="color: #990000">=</span> <span style="color: #990000">(</span><span style="color: #009900">int</span><span style="color: #990000">)</span> <span style="color: #990000">(((</span><span style="color: #993399">60</span><span style="color: #990000">/</span>bpm<span style="color: #990000">)*</span><span style="color: #993399">8000</span><span style="color: #990000">)-</span>tick<span style="color: #990000">);</span>
                <span style="font-style: italic"><span style="color: #9A1900">// I am calculating audio buffers that contain</span></span>
                <span style="font-style: italic"><span style="color: #9A1900">// a tick and a silence gap</span></span>
                soundArray <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="color: #009900">double</span><span style="color: #990000">[</span><span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>tick<span style="color: #990000">+</span><span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>silence<span style="color: #990000">];</span>
                msg <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">Message</span></span><span style="color: #990000">();</span>
                msg<span style="color: #990000">.</span>obj <span style="color: #990000">=</span> <span style="color: #FF0000">""</span><span style="color: #990000">+</span>currentBeat<span style="color: #990000">;</span>
        <span style="color: #FF0000">}</span>

        <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">()</span> <span style="color: #FF0000">{</span>
                <span style="font-weight: bold"><span style="color: #000000">calcSilence</span></span><span style="color: #990000">();</span>
                <span style="color: #009900">double</span><span style="color: #990000">[]</span> tick <span style="color: #990000">=</span> audioGenerator<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getSineWave</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>tick<span style="color: #990000">,</span> <span style="color: #993399">8000</span>
                                                            <span style="color: #990000">,</span>beatSound<span style="color: #990000">);</span>
                <span style="color: #009900">double</span><span style="color: #990000">[]</span> tock <span style="color: #990000">=</span> audioGenerator<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getSineWave</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>tick<span style="color: #990000">,</span> <span style="color: #993399">8000</span>
                                                            <span style="color: #990000">,</span>sound<span style="color: #990000">);</span>
                <span style="color: #009900">double</span> silence <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
                <span style="color: #009900">int</span> t <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">,</span>s <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">,</span>b <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
                <span style="font-weight: bold"><span style="color: #0000FF">do</span></span> <span style="color: #FF0000">{</span>
                        <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #009900">int</span> i<span style="color: #990000">=</span><span style="color: #993399">0</span><span style="color: #990000">;</span>i<span style="color: #990000">&lt;</span>soundArray<span style="color: #990000">.</span>length<span style="color: #990000">&amp;&amp;</span>play<span style="color: #990000">;</span>i<span style="color: #990000">++)</span> <span style="color: #FF0000">{</span>
                                <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span>t<span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>tick<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
                                        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span>b <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">)</span>
                                                soundArray<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> tock<span style="color: #990000">[</span>t<span style="color: #990000">];</span>
                                        <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
                                                soundArray<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> tick<span style="color: #990000">[</span>t<span style="color: #990000">];</span>
                                        t<span style="color: #990000">++;</span>
                                <span style="color: #FF0000">}</span> <span style="font-weight: bold"><span style="color: #0000FF">else</span></span> <span style="color: #FF0000">{</span>
                                        soundArray<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> silence<span style="color: #990000">;</span>
                                        s<span style="color: #990000">++;</span>
                                        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span>s <span style="color: #990000">&gt;=</span> <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>silence<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
                                                t <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
                                                s <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
                                                b<span style="color: #990000">++;</span>
                                                <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span>b <span style="color: #990000">&gt;</span> <span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>beat<span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">))</span>
                                                        b <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
                                        <span style="color: #FF0000">}</span>
                                <span style="color: #FF0000">}</span>
                        <span style="color: #FF0000">}</span>
                        msg <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">Message</span></span><span style="color: #990000">();</span>
                        msg<span style="color: #990000">.</span>obj <span style="color: #990000">=</span> <span style="color: #FF0000">""</span><span style="color: #990000">+</span>currentBeat<span style="color: #990000">;</span>
                        <span style="font-style: italic"><span style="color: #9A1900">// write the current beat right before or after</span></span>
                        <span style="font-style: italic"><span style="color: #9A1900">// writing to the audio buffer</span></span>
                        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span>bpm <span style="color: #990000">&lt;</span> <span style="color: #993399">100</span><span style="color: #990000">)</span>
                                mHandler<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">sendMessage</span></span><span style="color: #990000">(</span>msg<span style="color: #990000">);</span>
                        audioGenerator<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>soundArray<span style="color: #990000">);</span>
                        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span>bpm <span style="color: #990000">&gt;=</span> <span style="color: #993399">100</span><span style="color: #990000">)</span>
                                mHandler<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">sendMessage</span></span><span style="color: #990000">(</span>msg<span style="color: #990000">);</span>
                        currentBeat<span style="color: #990000">++;</span>
                        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span>currentBeat <span style="color: #990000">&gt;</span> beat<span style="color: #990000">)</span>
                                currentBeat <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
                <span style="color: #FF0000">}</span> <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span>play<span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph" id="beatkeeper-visual-tick"><p>As you can see the trick is to calculate the buffer size each time the
beats per minute (<strong>bpm</strong>) change.</p></div>
<div class="paragraph" id="beatkeeper-visual-tick"><p>Some times I am printing the current beat number before writing to the audio
buffer and some times after, because the <strong>bpm</strong> is low or high and the user
has to see the current beat as he is listening to the sound. Doing otherwise
would give a false sense to the user about the number of the current beat.</p></div>
<div class="paragraph" id="beatkeeper-visual-tick"><p>The number of <strong>100 bpm</strong> that I am using to decide whether to print before or
after was picked after some experimentation.</p></div>
<div class="paragraph" id="beatkeeper-visual-tick"><p>Here is a pic about this in action:</p></div>
<div class="paragraph" id="beatkeeper-visual-tick"><p><span class="image">
<img src="https://masterex.github.io/archive/2013/03/11/current-beat.png" alt="current beat in action" />
</span></p></div>
<div class="paragraph" id="beatkeeper-visual-tick"><p>Current beat is the <strong>third</strong> value.</p></div>
<div class="paragraph" id="beatkeeper-visual-tick"><p>I have updated BeatKeeper repo so full code about this can be found
<a href="https://github.com/MasterEx/BeatKeeper">here</a>.</p></div>
<div class="paragraph" id="beatkeeper-visual-tick"><p>The metronome visualization that I have implemented is very simple. If one
implements another one, more eye candy, feel free to leave a comment about it.</p></div>
<div class="ulist" id="beatkeeper-visual-tick"><div class="title">See also:</div><ul>
<li>
<p>
<a href="http://masterex.github.com/archive/2012/05/28/android-audio-synthesis.html">Android: Crafting a Metronome with Audio Synthesis</a>
</p>
</li>
</ul></div>
</div>
</div>
		]]>
</content:encoded>
        
        <pubDate>Mon, 11 Mar 2013 06:39:46 +0200</pubDate>
        <guid>https://masterex.github.io/archive/2013/03/11/beatkeeper-visual-tick.html</guid>
    </item>
    <item>
        <title>Wrong system time is bad for your pc health</title>
        <link>https://masterex.github.io/archive/2013/01/17/clock-related-security-concerns.html</link>
        <description>Wrong system time is bad for your pc health</description>
        <content:encoded>
<![CDATA[
		<div class="sect1">
<h2 id="_wrong_system_time_is_bad_for_your_pc_health">Wrong system time is bad for your pc health</h2>
<div class="sectionbody">
<div class="paragraph" id="clock-related-security-concerns"><p>Recently I have encountered 2 cases where the wrong system time caused
serious problems regarding the windows and antivirus updates.</p></div>
<div class="paragraph" id="clock-related-security-concerns"><p>Both systems are old and the mobo battery has runned out, so every time they
are unplugged or there is a power failure the system time is lost.</p></div>
<div class="paragraph" id="clock-related-security-concerns"><p>In the first case, this happened to a windows vista laptop. This had as a result for
the antivirus - microsoft security essentials (<strong>MSE</strong>) - definitions to be several months old,
and the computer to catch the infamous
<a href="http://removal-tool.blogspot.gr/2012/04/remove-malware-that-pretends-to-be.html">police virus</a>.</p></div>
<div class="paragraph" id="clock-related-security-concerns"><p>Virus removal was easy but the question <em>why a protected computer cathed a virus</em> arised.</p></div>
<div class="paragraph" id="clock-related-security-concerns"><p>The answer is that the wrong time made <strong>MSE</strong> to think that it has already
the latest virus definitions installed.</p></div>
<div class="paragraph" id="clock-related-security-concerns"><p>In the second case, an old P4 that I have just installed windows 7 couldn&#8217;t perform windows
updates because of the wrong time. I have spent quite some time reviewing the
network configuration before I notice that.</p></div>
<div class="paragraph" id="clock-related-security-concerns"><p>In most linux systems, the update mechanism checks only the versions of the local
packages, so the local time wouldn&#8217;t affect that.</p></div>
<div class="paragraph" id="clock-related-security-concerns"><p>However, there are other functions like authentication and stuff like that,
that require the correct local time.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_what_8217_s_the_solution">What&#8217;s the Solution?</h2>
<div class="sectionbody">
<div class="paragraph" id="clock-related-security-concerns"><p>The solution is definitely to buy a new battery for your motherboard!</p></div>
<div class="paragraph" id="clock-related-security-concerns"><p>One could say that synchronising the clock via <a href="http://en.wikipedia.org/wiki/Network_Time_Protocol">ntp</a>
would work bur unfortunately
ntp syncing isn&#8217;t working for large differences between the local and the
remote clock. Syncing is going to work only for <strong>~4 minute</strong> differences.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph" id="clock-related-security-concerns"><p>Every computer and exceptionally windows should have correct local time, especially if they are
communicating with other systems. Doing otherwise could cause communication failures
and security threats.</p></div>
</div>
</div>
		]]>
</content:encoded>
        
        <pubDate>Thu, 17 Jan 2013 01:49:30 +0200</pubDate>
        <guid>https://masterex.github.io/archive/2013/01/17/clock-related-security-concerns.html</guid>
    </item>
    <item>
        <title>AsciiBlog is Evolving</title>
        <link>https://masterex.github.io/archive/2013/01/16/asciiblog-is-evolving.html</link>
        <description>AsciiBlog is Evolving</description>
        <content:encoded>
<![CDATA[
		<div class="sect1">
<h2 id="_asciiblog_is_evolving">AsciiBlog is Evolving</h2>
<div class="sectionbody">
<div class="paragraph" id="asciiblog-is-evolving"><p>I have recently redesigned asciiblog and here I would like to share some thoughts with you.
I know that I am very likely the only person that uses asciiblog at the moment but however
I made some changes to make at least my life easier :)</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_new_design">New Design</h2>
<div class="sectionbody">
<div class="paragraph" id="asciiblog-is-evolving"><p>In the past asciiblog consisted of many different bash scripts. Right now asciiblog is only two
files and I am thinking very seriously to merge them.</p></div>
<div class="paragraph" id="asciiblog-is-evolving"><p>In the previous versions there were problems when one used a script from a wrong location. As far
as I know these issues are solved. So, there are 3 different ways of setting up asciiblog.</p></div>
<div class="ulist" id="asciiblog-is-evolving"><ul>
<li>
<p>
Call the asciiblog script by it&#8217;s full or referenced path
</p>
</li>
<li>
<p>
Add it to your execution <strong>PATH</strong> (I am using this one atm)
</p>
</li>
<li>
<p>
Install it in /usr/bin or something like that
</p>
</li>
</ul></div>
<div class="paragraph" id="asciiblog-is-evolving"><p>Command set resembles the git one. I&#8217;ll list it here:</p></div>
<div class="listingblock">
<a id="asciiblog-is-evolving"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt>AsciiBlog v<span style="color: #990000">.</span><span style="color: #993399">1</span><span style="color: #990000">.</span>0a - https<span style="color: #990000">:</span>//github<span style="color: #990000">.</span>com/MasterEx/AsciiBlog
Periklis Ntanasis <span style="color: #990000">&lt;</span>pntanasis@gmail<span style="color: #990000">.</span>com<span style="color: #990000">&gt;</span>

    usage<span style="color: #990000">:</span> asciiblog <span style="color: #990000">&lt;</span>option<span style="color: #990000">&gt;</span> <span style="color: #990000">[</span>ARGUMENT<span style="color: #990000">]</span>
    <span style="font-weight: bold"><span style="color: #0000FF">help</span></span>            Prints this <span style="font-weight: bold"><span style="color: #0000FF">help</span></span> message
    build-all       Builds all the pages and published posts
    build-pages     Builds all the pages
    delete          Deletes a published post
    init            Initializes a new asciiblog directory
    new-post        Creates a new post <span style="font-weight: bold"><span style="color: #0000FF">in</span></span> tmp
    post            Publishes an unpublished post
    tmp-build       Temporary builds all the pages and posts <span style="font-weight: bold"><span style="color: #0000FF">in</span></span> tmp</tt></pre></div></div>
<div class="paragraph" id="asciiblog-is-evolving"><p>Code is much more stable than the previous versions but there are plenty things still to be done.</p></div>
<div class="paragraph" id="asciiblog-is-evolving"><p>Keywords and description works now in the articles as it should so it is more SEO friendly.</p></div>
<div class="paragraph" id="asciiblog-is-evolving"><p>I am very happy with the new RSS witch contains the whole article. This makes it much more friendlier
for the RSS aggregators.</p></div>
<div class="paragraph" id="asciiblog-is-evolving"><p>I believe in the long run a blogger would blog carefree with it. As I said there are many things to be done
- and most likely there will always be some more,
and these things are only the ones that <strong>I</strong> need. Of course one could use asciiblog as it is but if
he would like something different he should get his hands on the code.</p></div>
<div class="paragraph" id="asciiblog-is-evolving"><p><a href="https://github.com/MasterEx/AsciiBlogDemo">Here</a> are some examples of other asciiblog custom templates based on free templates. I am going also
to make the source of this blog (before the html generation) public in the near future for having it
backed up and for reference.a</p></div>
<div class="ulist" id="asciiblog-is-evolving"><div class="title">See Also</div><ul>
<li>
<p>
<a href="https://github.com/MasterEx/AsciiBlog">AsciiBlog</a>
</p>
</li>
<li>
<p>
<a href="http://masterex.github.com/AsciiBlogDemo/">Default AsciiBlog Demo</a>
</p>
</li>
<li>
<p>
<a href="http://masterex.github.com/AsciiBlogDemo/blueice/">BlueIce Theme Demo</a>
</p>
</li>
<li>
<p>
<a href="http://masterex.github.com/AsciiBlogDemo/yellowcrossing/">YellowCrossing Theme Demo</a>
</p>
</li>
</ul></div>
</div>
</div>
		]]>
</content:encoded>
        
        <pubDate>Wed, 16 Jan 2013 02:01:03 +0200</pubDate>
        <guid>https://masterex.github.io/archive/2013/01/16/asciiblog-is-evolving.html</guid>
    </item>
    <item>
        <title>Monimix: A picture is worth a thousand words</title>
        <link>https://masterex.github.io/archive/2012/11/08/monimix-combination-of-monochrome-images.html</link>
        <description>Monimix: A picture is worth a thousand words</description>
        <content:encoded>
<![CDATA[
		<div class="sect1">
<h2 id="_monimix_a_picture_is_worth_a_thousand_words">Monimix: A picture is worth a thousand words</h2>
<div class="sectionbody">
</div>
</div>
<div class="sect1">
<h2 id="_the_idea">The idea!</h2>
<div class="sectionbody">
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>A couple of months before, I had an enlightenment. I thought
that it would be awesome if there were QR (Quick Response) tags that
use colors for more information density.</p></div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>Actually the idea was to combine a set of different QRs and get a colorfull
one that could get decombined back to the original set of QRs through
the reverse process.</p></div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>Anyway, a couple of weaks before I have done a short research (by googling it)
and have found that this concept already exists in a way and is known
by the name
<a href="http://en.wikipedia.org/wiki/High_Capacity_Color_Barcode">High Capacity Color Barcode (HCCB)</a>.</p></div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>HCCB tags are invented by Microsoft and create a 2D barcode using clusters
of colored triangles instead of the square pixels traditionally associated
with 2D barcodes. You can read more about this in wikipedia.</p></div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>As you can see this is a different approach of the same idea, put some color
in the game. Once again I have thought something that already exists!</p></div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>However, I really liked this idea so I decided to construct a program that
gets N monochrome images and returns a multi-color image that combines all
the monochromes.</p></div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>In it&#8217;s simpler form, this is <strong>monimix</strong>, which is named from monochrome image mix.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_use_cases">Use Cases</h2>
<div class="sectionbody">
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>Here comes the standar monimix help message that shortly describes it&#8217;s
functions.</p></div>
<div class="listingblock" id="monimix-combination-of-monochrome-images">
<div class="content">
<pre><code>$ java -jar monimix.jar.jar -h
monimix v.0.1 (2012 Nov 07) Copyright (C) 2012  Periklis Ntanasis
&lt;pntanasis@gmail.com&gt;

This program comes with ABSOLUTELY NO WARRANTY; for details visit
http://www.gnu.org/licenses/.
This is free software, and you are welcome to redistribute it
under certain conditions; visit http://www.gnu.org/licenses/ for details.

usage: monimix &lt;command&gt; [arguments] -i [file ...] -o [file ...]

Commands:
-i      Input, white space separated files
-o      Output, in case of demux it's the filename prefix
-b      Makes all the input images black
-c      Changes input image's color to the given color hex value
-t      Turns white background transparent
-w      Turns transparent background white
-f      Force file to be written even if already exists
-d      Debug mode
-h      Prints this help message</code></pre>
</div></div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>Let&#8217;s see the main functions in more detail. For starters, let&#8217;s say we have
<strong>3</strong> images: imageA, imageB and imageC.</p></div>
<div class="imageblock" id="monimix-combination-of-monochrome-images">
<div class="content">
<img src="https://masterex.github.io/archive/2012/11/08/images.png" alt="Original images" />
</div>
</div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>The first main function is the creation of an image that combines our <strong>3</strong> original
images. Let&#8217;s say that our 3 images have the .png suffix and png format. To
do this with monimix we should do <span class="green">java -jar monimix.jar -i imageA.png imageB.png imageC.png -o combo.png</span>.</p></div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>The 3 images should of course have the same size, i.e. 200x200px.</p></div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>The result would be the combination image combo.png, which would look like that:</p></div>
<div class="imageblock" id="monimix-combination-of-monochrome-images">
<div class="content">
<img src="https://masterex.github.io/archive/2012/11/08/combo1.png" alt="Combination image 1" />
</div>
</div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>The second main function is the reverse process that would give us the 3 original
images. To do that with monimix we should do <span class="green">java -jar monimix.jar -i combo.png -o image</span>.
This would produce 3 images of size same as the one of combo.png and with names
image0.png, image1.png and image2.png. All the outcome images will have
white colored background and black colored monochrome pictures.</p></div>
<div class="sect2">
<h3 id="_special_cases">Special Cases</h3>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>There are some special cases that monimix is designed to overcome.</p></div>
<div class="sect3">
<h4 id="_original_images_with_transparent_background">Original Images with Transparent Background</h4>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>If an image, i.e. imageA.png would have transparent background, then when
decombining the combo.png would produce an image with white background.</p></div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>To get the image to it&#8217;s original form, one with knowledge of the original image
could use monimix like that: <span class="green">java -jar monimix.jar -t -f -i imageA.png -o imageA.png</span>.</p></div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>I used the -t switch to set the white background to transparent and the -f switch
to overwrite the imageA.png file silently. Otherwise, monimix would asked
me if I wanted it to be overwritten or not.</p></div>
</div>
<div class="sect3">
<h4 id="_original_images_that_aren_8217_t_black_colored">Original Images that aren&#8217;t Black colored</h4>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>Just like before, the decombining process would produce black images. A monochrome
image however could be any color.</p></div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>One with knowledge of the original image could use monimix to change the
color of the produced image like that: <span class="green">java -jar monimix.jar -c <em>#FF0000</em> -f -i imageA.png -o imageA.png</span>.</p></div>
</div>
<div class="sect3">
<h4 id="_original_images_that_aren_8217_t_monochrome">Original Images that aren&#8217;t monochrome</h4>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>This is handled automatically by monimix during the combination but
however getting the original image back is out of the question.</p></div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>Let&#8217;s see an illustrated example of all the above things.</p></div>
<div class="imageblock" id="monimix-combination-of-monochrome-images">
<div class="content">
<img src="https://masterex.github.io/archive/2012/11/08/steps.png" alt="monimix steps" />
</div>
</div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>Let&#8217;s see every step in detail:</p></div>
<div class="openblock" id="monimix-combination-of-monochrome-images">
<div class="content">
<div class="olist arabic" id="monimix-combination-of-monochrome-images"><ol class="arabic">
<li>
<p>
<strong>ImageB.png</strong> and <strong>ImageC.png</strong> have transparent background.
</p>
</li>
<li>
<p>
<span class="green">java -jar monimix.jar -i image*.png -o combo.png</span> and we get combo.png
</p>
</li>
<li>
<p>
<span class="green">java -jar monimix.jar -i combo.png -o image</span> and we get image[1-4].png (it&#8217;s actually 0-3 :P).
As you can see <strong>imageD.png</strong> isn&#8217;t fully restored.
</p>
</li>
<li>
<p>
<span class="green">java -jar monimix.jar -t -f -i image2.png -o image2.png</span> and
<span class="green">java -jar monimix.jar -t -f -i image3.png -o image3.png</span> to set the backgrounds
to transparent
</p>
</li>
<li>
<p>
<span class="green">java -jar monimix.jar -c <em>ff0000</em> -f -i image2.png -o image2.png</span> to
change the image&#8217;s color from black to red.
</p>
</li>
</ol></div>
</div></div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_image_combination">Image Combination</h2>
<div class="sectionbody">
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>Let&#8217;s see how the image combination is done in more detail. This was the
most challenging part of monimx.</p></div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>First of all we need to determine how many different colors we are going to need.
If we want to combine 2 images we need 3 different colors, to combine 3 we
need 7 and so on. The generic formula for the number of colors when combining
N images is this:</p></div>
<div class="imageblock" id="monimix-combination-of-monochrome-images">
<div class="content">
<img src="https://masterex.github.io/archive/2012/11/08/formula.png" alt="number of colors formula" />
</div>
</div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>Then, we combine 2 images at a time. At first we combine the first 2 images and after
that we combine the combined one with the next image. The trick is
that when the combined image isn&#8217;t colliding with the next it keeps its previous colors.</p></div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>Something else worth mentioning is that the colors are placed depending the previous
color that was visible. This means that i.e. color B will always be on top of color
A.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_image_decombination">Image Decombination</h2>
<div class="sectionbody">
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>While decombining the images we need to reverse the combination process.</p></div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>The only tricky part worth mentioning is that first of all we need to find
the number of images that were used to produced the combined one. To do this
we have to find the number of the maximum possible colors of the combined image. Just counting
the colors that are present isn&#8217;t enough because this number could be smaller
than what we want.</p></div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>To get this more clear think of combining 3 images that aren&#8217;t colliding anywhere.
The combination would contain only 3 different colors. If we count the colors
in order to find how many images were combined then we mistakenly would think
that there were 2 original images instead of 3.</p></div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>So we find the number of combined images by the max RGB value of all the
visible colors. If we get this number everything else is trivial.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_the_ultimate_goal">The Ultimate Goal</h2>
<div class="sectionbody">
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>The original idea was to use all these stuff for something like that:</p></div>
<div class="imageblock" id="monimix-combination-of-monochrome-images">
<div class="content">
<img src="https://masterex.github.io/archive/2012/11/08/qrconcept.png" alt="monimix and QRs" />
</div>
</div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>In this colored QR we have 3 times more info in the same space than a black one.</p></div>
<div class="sect2">
<h3 id="_things_to_think">Things to think</h3>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>A version that would receive images from a webcam or smart-phone
cam would need some modifications.</p></div>
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>To be more precise, we should use only highly distinct colors, something that
would limit the number of images that could be combined. Also, we should
remove the noise from the camera by finding the distance from the set of colors
that we used and replace every pixel&#8217;s color with the one closer to the ones of the set.</p></div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph" id="monimix-combination-of-monochrome-images"><p>I strongly believe that this concept could be used with smart-phones etc.
However, I am not sure if it&#8217;s the best way to succeed the greatest information
density.
I am not motivated enough at this time to test
this concept myself but if one tries this out, he&#8217;s more than welcome to
leave a comment below.</p></div>
<div class="ulist" id="monimix-combination-of-monochrome-images"><div class="title">See Also</div><ul>
<li>
<p>
<a href="https://github.com/MasterEx/masterex.github.com">Monimix Github Repo</a>
</p>
</li>
<li>
<p>
<a href="http://en.wikipedia.org/wiki/Mobile_tagging">Mobile tagging</a>
</p>
</li>
<li>
<p>
<a href="http://en.wikipedia.org/wiki/High_Capacity_Color_Barcode">High Capacity Color Barcode</a>
</p>
</li>
</ul></div>
</div>
</div>
		]]>
</content:encoded>
        
        <pubDate>Thu, 08 Nov 2012 00:00:00 +0200</pubDate>
        <guid>https://masterex.github.io/archive/2012/11/08/monimix-combination-of-monochrome-images.html</guid>
    </item>
    <item>
        <title>A deep look into PHPShadow 3.2</title>
        <link>https://masterex.github.io/archive/2012/10/10/phpshadow-3.2.0-review.html</link>
        <description>A deep look into PHPShadow 3.2</description>
        <content:encoded>
<![CDATA[
		<div class="sect1">
<h2 id="_a_deep_look_into_phpshadow_3_2">A deep look into PHPShadow 3.2</h2>
<div class="sectionbody">
</div>
</div>
<div class="sect1">
<h2 id="_introduction">Introduction</h2>
<div class="sectionbody">
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Back in August of 2011 I&#8217;ve written a <a href="http://masterex.github.com/archive/2011/08/27/php-protect-the-code.html">post</a>
about PHP code obfuscation and encryption.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>As I had wrote, one could use these two methods to keep his php <em>source</em>
code <em>more or less</em> secret.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>In this article I am going to review one particular commercial PHP encryption
solution, <strong><a href="http://www.phpshadow.com/">PHPShadow</a></strong>.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>I was lucky enough to get a free license of PHPShadow by PHPShadow&#8217;s Edwin
Hermann <em>back in January</em> in order to evaluate the -then- <em>new</em> version of it (<strong>3.2.0</strong>).</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>However, somehow I got busy and I wasn&#8217;t able to publish it. I had reviewed
PHPShadow 3.2.0 and almost finished my article but then I got busy and now
PHPShadow is in version <strong>4</strong> with significant changes.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>To be honest Edwin was kind enough to send me a license for PHPShadow version 4
but it lasted for a month and I wasn&#8217;t able to review it back then.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p><em>Just to keep my word to Edwin I am going to publish this article which refers mostly
to PHPShadow version 3.2.0 and has some notices about version 4.</em></p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>So here I go. In the beginning I am going to analyze PHPShadow from some
different viewpoints and in the end I&#8217;ll share with you my conclusions about it. If you
are looking just for a quick PHPShadow overview jump to the conclusion
instead. I&#8217;ll have a special paragraph in the end for PHPShadow 4, <strong>everything else is for
3.2.0, especially the Performance and Security sections</strong>.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_phpshadow_in_a_nutshell">PHPShadow in a nutshell</h2>
<div class="sectionbody">
<div class="paragraph" id="phpshadow-3.2.0-review"><p>For those of you not familiar with PHPShadow, it is an encryption mechanism
for PHP.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>The current workflow is pretty simple. Just use the encryption tool to
encrypt your PHP files and you are done.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>However, a webserver should have the <strong>phpshadow.so</strong> PHP extension installed
in order to execute the encrypted file.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Here is a quick and straightforward code example:</p></div>
<div class="listingblock">
<a id="phpshadow-3.2.0-review"></a>
<div class="title">Original Code</div>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #990000">&lt;?php</span> <span style="font-weight: bold"><span style="color: #0000FF">echo</span></span> <span style="color: #FF0000">"Hello, World!"</span><span style="color: #990000">;</span> <span style="color: #990000">?&gt;</span></tt></pre></div></div>
<div class="listingblock">
<a id="phpshadow-3.2.0-review"></a>
<div class="title">Encrypted Code</div>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #990000">&lt;?php</span>
<span style="font-style: italic"><span style="color: #9A1900">/* This script is protected by PHPshadow.  Visit </span></span><span style="text-decoration: underline"><span style="color: #0000FF">http://www.phpshadow.com</span></span><span style="font-style: italic"><span style="color: #9A1900"> */</span></span>
<span style="font-weight: bold"><span style="color: #000000">phpshadow_exec</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span><span style="font-weight: bold"><span style="color: #0000FF">__FILE__</span></span><span style="color: #990000">,</span><span style="color: #FF0000">"</span>
<span style="color: #FF0000">ECQAGMWTWIOIVTRKACVFNHIAVNJEECUT</span>
<span style="color: #FF0000">"</span><span style="color: #990000">);</span> <span style="color: #990000">?&gt;</span></tt></pre></div></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Let&#8217;s dive into more details</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_user_guide">User Guide</h2>
<div class="sectionbody">
<div class="paragraph" id="phpshadow-3.2.0-review"><p>PHPShadow comes with a user guide that can be downloaded from the <a href="http://www.phpshadow.com/download.php">download</a>
section.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>As I am writing this post the current version is <strong>3.2.0</strong>.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>I found it very detailed and easy to read. There are step by step instructions
that even a very inexperienced developer can easily understand.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>The guide includes topics as phpshadow extension installation, installation on
shared hosting, the phpshadow encoder&#8217;s usage, usage examples, best practice guidelines
etc.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_encryption_workflow">Encryption Workflow</h2>
<div class="sectionbody">
<div class="paragraph" id="phpshadow-3.2.0-review"><p>There are two possible ways to encrypt a file. The online encoder that
encrypts only one file for 0.99 euro (or for free in trial mode) and the encoder tool.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>The online tool is pretty straightforward, however I&#8217;ve only tested the
free encryption. Let&#8217;s just say that it can be very painfull to encrypt
large or multiple files in this way. The reasons are obvious.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>The encoder tool can be downloaded from the <a href="http://www.phpshadow.com/download.php">download</a>
section for free. It is available for <strong>Linux</strong>, <strong>FreeBSD</strong> and <strong>Mac OS X Lion</strong>.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>It says that is available for <strong>Linux kernel 2.6</strong> but I have used it with <strong>3.x</strong> series with no
problem.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>If you run the encoder with no options you&#8217;ll get the available options.
Let me quote them and explain some of them.</p></div>
<div class="listingblock" id="phpshadow-3.2.0-review">
<div class="content">
<pre><code>OPTIONS
     -d               do not include the dynamic extension loader
     -f               force encoding of already-encoded files
     -l lpath         looks in lpath for the licence file (instead of in
                      /etc/phpshadow)
     -o               overwrite files (no backup copy made)
     -s filename      skips files named filename
     -t               uses the free trial licence (introduces a 10-second delay
                      when the script is executed)
     -x extension     encodes files ending in ".extension"  (in addition to
                      the default ".php")</code></pre>
</div></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Without the -d option the dynamic loader will be included and executed before our code.
This looks like this:</p></div>
<div class="listingblock">
<a id="phpshadow-3.2.0-review"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #990000">&lt;?php</span>
<span style="font-weight: bold"><span style="color: #0000FF">eval</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">base64_decode</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'aWYoIWV4dGVuc2lvbl9sb2FkZWQoJ1BIUHNoYWRvdycpKXtpZighaW5p</span>
<span style="color: #FF0000">X2dldCgnZW5hYmxlX2RsJykpe2V4aXQoIkV4dGVuc2lvbiBsb2FkaW5nIGRpc2FibGVkIG9uIHNl</span>
<span style="color: #FF0000">cnZlci5cbiIpO31pZighZnVuY3Rpb25fZXhpc3RzKCdkbCcpKXtleGl0KCJFeHRlbnNpb24gbG9h</span>
<span style="color: #FF0000">ZGluZyBub3QgYXZhaWxhYmxlIGZvciB0aGlzIHNhcGkgKCIucGhwX3NhcGlfbmFtZSgpLiIpLlxu</span>
<span style="color: #FF0000">Iik7fWlmKCFmaWxlX2V4aXN0cyhpbmlfZ2V0KCdleHRlbnNpb25fZGlyJykuJy9waHBzaGFkb3cu</span>
<span style="color: #FF0000">c28nKSl7ZXhpdCgiRXh0ZW5zaW9uIG1pc3NpbmcgZnJvbSBleHRlbnNpb25zIGRpcmVjdG9yeSAo</span>
<span style="color: #FF0000">Ii5pbmlfZ2V0KCdleHRlbnNpb25fZGlyJykuIikuICBJZiB5b3UgYXJlIHVzaW5nIGEgc2hhcmVk</span>
<span style="color: #FF0000">IGhvc3RpbmcgZW52aXJvbm1lbnQsIGFzayB5b3VyIHByb3ZpZGVyIHRvIHBsYWNlIGEgY29weSBv</span>
<span style="color: #FF0000">ZiB0aGUgUEhQc2hhZG93IHNlcnZlciBleHRlbnNpb24gaW4gdGhlIGV4dGVuc2lvbnMgZGlyZWN0</span>
<span style="color: #FF0000">b3J5LlxuIik7fWlmKGRsKCdwaHBzaGFkb3cuc28nKT09PWZhbHNlKXtleGl0KCJFeHRlbnNpb24g</span>
<span style="color: #FF0000">ZmFpbGVkIHRvIGxvYWQuXG4iKTt9fQ=='</span><span style="color: #990000">));</span>
<span style="color: #990000">?&gt;</span></tt></pre></div></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>This is actually PHP code in <strong>base64</strong> format that will be executed by calling the
PHP&#8217;s <span class="green">eval()</span> method. If we decode it, it looks like this:</p></div>
<div class="listingblock">
<a id="phpshadow-3.2.0-review"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #990000">&lt;?php</span>
<span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(!</span><span style="font-weight: bold"><span style="color: #000000">extension_loaded</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'PHPshadow'</span><span style="color: #990000">))</span><span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(!</span><span style="font-weight: bold"><span style="color: #000000">ini_get</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'enable_dl'</span><span style="color: #990000">))</span><span style="color: #FF0000">{</span>
                <span style="font-weight: bold"><span style="color: #0000FF">exit</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"Extension loading disabled on server.\n"</span><span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(!</span><span style="font-weight: bold"><span style="color: #000000">function_exists</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'dl'</span><span style="color: #990000">))</span><span style="color: #FF0000">{</span>
                <span style="font-weight: bold"><span style="color: #0000FF">exit</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"Extension loading not available for this sapi (</span>
<span style="color: #FF0000">                "</span><span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">php_sapi_name</span></span><span style="color: #990000">().</span><span style="color: #FF0000">").\n"</span><span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(!</span><span style="font-weight: bold"><span style="color: #000000">file_exists</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">ini_get</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'extension_dir'</span><span style="color: #990000">).</span><span style="color: #FF0000">'/phpshadow.so'</span><span style="color: #990000">))</span><span style="color: #FF0000">{</span>
                <span style="font-weight: bold"><span style="color: #0000FF">exit</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"Extension missing from extensions directory (</span>
<span style="color: #FF0000">                "</span><span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">ini_get</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'extension_dir'</span><span style="color: #990000">).</span><span style="color: #FF0000">").</span>
<span style="color: #FF0000">                 If you are using a shared hosting environment, ask your provider</span>
<span style="color: #FF0000">                 to place a copy of the PHPshadow server extension in</span>
<span style="color: #FF0000">                 the extensions directory.\n"</span><span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">dl</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'phpshadow.so'</span><span style="color: #990000">)===</span><span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">)</span><span style="color: #FF0000">{</span>
                <span style="font-weight: bold"><span style="color: #0000FF">exit</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"Extension failed to load.\n"</span><span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span>
<span style="color: #990000">?&gt;</span></tt></pre></div></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>As you can understand in case we know the <strong>phpshadow</strong> extension is on and working,
this is a needless check that will slow our code execution, especially if we use multiple
inclusions of encrypted files, with no reason.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>So, as it is indicated in the guide one should use this only if she isn&#8217;t
sure about her phpshadow installation.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Other than that there isn&#8217;t any other option that needs further explanation.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>To encrypt a file you have to be connected to the internet in order for
the encoder to be able to check if your license is valid.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>In conclusion, I found the encoder easy to use and surprisingly fast!</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_installing_the_phpshadow_extension">Installing the PHPShadow extension</h2>
<div class="sectionbody">
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Installing <strong>phpshadow.so</strong> PHP extension isn&#8217;t any different from installing any
other PHP extension. Just place <strong>phpshadow.so</strong> in the web server&#8217;s extension
directory and add the <span class="green">extension=phpshadow.so</span> line in your <strong>php.ini</strong> file.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Once again there are details in the user guide. Nothing tricky here.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_free_phpshadow_version">Free PHPShadow Version</h2>
<div class="sectionbody">
<div class="paragraph" id="phpshadow-3.2.0-review"><p>The free version introduces a <strong>10 second delay</strong>. This delay is in any case
unacceptable. I wouldn&#8217;t recommend anyone to use it for any case other than
getting familiar with PHPShadow&#8217;s workflow.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_performance">Performance</h2>
<div class="sectionbody">
<div class="paragraph" id="phpshadow-3.2.0-review"><p>I have benchmarked PHPShadow&#8217;s encrypted code and here are my findings.</p></div>
<div class="sect2">
<h3 id="_part_1_apachebench">Part 1 - ApacheBench</h3>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>For the first part of my benchmark I&#8217;ve used <strong>Apache Benchmark</strong> version <strong>2.3</strong> (Revision 655654),
and in the figures above I&#8217;ve compared the requests per second which demonstrates
the average time a page has to load. I have run the test in the same enviroment for
about 3-5 times and I&#8217;ve kept the best average run.</p></div>
<div class="admonitionblock" id="phpshadow-3.2.0-review">
<table><tr>
<td class="icon">
<img src="https://masterex.github.io/archive/2012/10/10/../../../../images/icons/note.png" alt="Note" />
</td>
<td class="content">I&#8217;ve run the benchmark like <span class="green">ab -c 1 &lt;url&gt;</span>. That is concurrency level 1
a.k.a. just one request.</td>
</tr></table>
</div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>At first I&#8217;ve tested a simple Hello World PHP script. As you can see in the chart below
all the script variations (unencrypted,encrypted without dynamic loader, encrypted with
dynamic loader, encrypted by the free encoder) are
almost similar for a project of that scale. However, even for a webpage as
simple as this the online encoder ir out of the question.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p><span class="image">
<img src="https://masterex.github.io/archive/2012/10/10/stats1.png" alt="stats figure 1" />
</span></p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>After that I wanted to test only the dynamic loader to see how much overhead adds
to the whole process.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>As shown in the next chart, calling the dynamic encoder code unformatted can
serve up to 300 requests more than the base64 one, that is included
by the phpshadow encryption tool.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p><span class="image">
<img src="https://masterex.github.io/archive/2012/10/10/stats2.png" alt="stats figure 2" />
</span></p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>This means that if you have to include the dynamic loader you should better use
the non base64 format. However, as I&#8217;ve said before it&#8217;s really better to
not use it at all.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Continuing my tests I&#8217;ve benchmarked two real world projects, the first is the <strong>manuf.php</strong>
that can be found <a href="https://raw.github.com/uberspot/OpenWifiStatistics-web/master/manuf.php">here</a>.
It&#8217;s actually a 20k lines PHP array with MAC vendor prefixes taken from the
<a href="http://anonsvn.wireshark.org/wireshark/trunk/manuf">wireshark project</a>. The other
is <strong>arq</strong>, a custom MVC project I wrote some months back for a university project
and implements multiple file inclusions.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Here are the charts.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p><span class="image">
<img src="https://masterex.github.io/archive/2012/10/10/stats3.png" alt="stats figure 3" />
</span></p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>In these cases as we can see unencrypted code can run significantly faster
than the encrypted one. Note that in this chart the encrypted code doesn&#8217;t use
the dynamic loader.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Also, I&#8217;d like to mention that the original&#8217;s <strong>manuf.php</strong> code is <strong>20023</strong> lines, <strong>2105628</strong> chars
and the encrypted&#8217;s <strong>manuf_le.php</strong> code is <strong>85765</strong> lines, <strong>6603460</strong> chars. Ofcourse this is an extreme
case but however this is why I choose it.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Anyway, I have kept playing with the concurrency level and the number of
requests with <strong>arq</strong> (my custom project) until I&#8217;ve reached to a peak!</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>In <strong>10000</strong> requests and concurrency level <strong>25</strong> the arq scored <strong>295.62</strong>
requests per second while the encoded version scored <strong>67.67</strong>.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p><span class="image">
<img src="https://masterex.github.io/archive/2012/10/10/stats4.png" alt="stats figure 4" />
</span></p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>This is pretty significant and shows that the encoded code scales poorly.</p></div>
</div>
<div class="sect2">
<h3 id="_part_2_memory_management">Part 2 - Memory Management</h3>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>I&#8217;ve also conducted some tests to find the maximum memory used. To find
this I used the PHP&#8217;s <span class="green">memory_get_peak_usage()</span> function.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>The unencrypted manuf.php peaked <strong>26921244</strong> or <strong>26.92</strong> MB max memory usage,
while the encrypted peaked <strong>42244396</strong> or <strong>42.24</strong> MB.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p><span class="image">
<img src="https://masterex.github.io/archive/2012/10/10/stats5.png" alt=""stats figure 5" />
</span></p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>The unencrypted arq project peaked <strong>1245692</strong> or <strong>1.246</strong> MB max memory usage,
while the encrypted peaked <strong>1325184</strong> or <strong>1.325</strong> MB</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p><span class="image">
<img src="https://masterex.github.io/archive/2012/10/10/stats6.png" alt="stats figure 6" />
</span></p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>As we can see in some extreme cases there can be nearly twice the normal
maximum memory usage.</p></div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_security">Security</h2>
<div class="sectionbody">
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Security would be my main concern if I would like to use an encryption mechanism
to hide my code. I may not be the best to answer if PHPShadow is totaly secure
but as far as I can say, I find it pretty
secure.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>PHPShadow website claims that:</p></div>
<div class="listingblock" id="phpshadow-3.2.0-review">
<div class="content">
<pre><code>Decryption is performed on-the-fly and entirely in memory. This means that
data is never saved, shown or stored anywhere - not even temporarily.</code></pre>
</div></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Let me waffle a bit before I get to my conclusion.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>In the beginning, I tried to analyze the produced code to understand where the
encryption key is stored and what is the connection between the original
code (plain text) and the produced one (cipher text).</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>I had no luck on that and the most interesting findings
are that unicode characters produce more encrypted text than the ascii ones.
Actually, they produce almost <strong>2</strong> times more code which is pretty logical if
you consider that <strong>UTF-8</strong> requires more bytes to represent the characters.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Another interesting finding is that free encoder produces different ciphertext
from the paid one and decoder determines what kind of encoder was used by the first
argument of <span class="green">phpshadow_eval()</span> and the first <strong>22bit</strong> (I think :P) of
the ciphertext.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Finally, when I started analyzing the ciphertext I thought that it was a pattern
of keys and ciphertext i.e. qfesAFSD where qfes is the key that decrypts
AFSD but as I found out  both previous and next ciphertext characters define
the decryption product.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>This is good because otherwise one could create a pool (something like rainbow tables)
of keys and ciphertext and use it to decrypt other ciphertexts with it.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Also, one could use a pool like this to produce a phpshadow encrypted text
without a license!</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>However, I wasn&#8217;t able to find out such a relation between encryption key and
ciphertext which is rather good or I am noob. I am afraid that the second is more
likely but at least I tried :D</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>A security expert, which I am not, could have another opinion.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>After my shot to analyze the ciphertext I wondered if it was possible to run
apache in debug mode through gdb and get a glimpse on what is going on behind
the scenes, but it seemed a long shot and too much trouble
to bother with.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Just from curiosity I would like to hear if that&#8217;s possible and if someone
had checked it out.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Finally, I tried to see what information I could deduct by using a set of
available PHP functions.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Here is my magic code:</p></div>
<div class="listingblock">
<a id="phpshadow-3.2.0-review"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #990000">&lt;?php</span>
<span style="font-weight: bold"><span style="color: #0000FF">echo</span></span> <span style="color: #FF0000">"&lt;pre&gt;"</span><span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000000">print_r</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">get_defined_vars</span></span><span style="color: #990000">());</span>
<span style="font-weight: bold"><span style="color: #000000">print_r</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">get_defined_functions</span></span><span style="color: #990000">());</span>
<span style="font-weight: bold"><span style="color: #000000">print_r</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">get_declared_classes</span></span><span style="color: #990000">());</span>
<span style="font-weight: bold"><span style="color: #000000">print_r</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">get_defined_constants</span></span><span style="color: #990000">());</span>
<span style="font-weight: bold"><span style="color: #000000">print_r</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">get_included_files</span></span><span style="color: #990000">());</span>
<span style="font-weight: bold"><span style="color: #000000">debug_print_backtrace</span></span><span style="color: #990000">();</span>
<span style="font-style: italic"><span style="color: #9A1900">// or echo var_dump(debug_backtrace());</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">echo</span></span> <span style="color: #FF0000">'&lt;/pre&gt;'</span><span style="color: #990000">;</span>
<span style="color: #990000">?&gt;</span></tt></pre></div></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>This is important because it means that if for example one had an encrypted
configuration file another one could just add the <span class="green">get_defined_vars()</span> function
at the end of the encrypted code and get all the sensitive information such as database
usernames and passwords etc.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>This cancels the usage of PHPShadow for protecting configuration files and the like.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>One could just unset the variables inside her encrypted block to ensure that
noone gets them but that may be impossible in some cases and break dependencies of global
variables, especially in large projects.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>That&#8217;s all about security I think. In general PHPShadow succeeds to protect/hide
the code, however a <strong>3rd</strong> person could still deduct many important information.
I think in combination with the encryption, obfuscation
could partially solve this problem.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>The best solution however, that I am not aware how doable is, is for
PHPShadow to handle this by itself.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_pricing_scheme">Pricing Scheme</h2>
<div class="sectionbody">
<div class="paragraph" id="phpshadow-3.2.0-review"><p>When I first spotted PHPShadow, it was selling the server extension and
offered the encryption tool for free.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>This was a big mistake in my opinion because it made very difficult and especially
expensive to install the extension in many servers. Now one can use her
encrypted code everywhere as long as the extension is loaded.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Also, this makes the extension more appealing for hosting providers to
provide it by default in their hosting packages. This is a win-win situation
for both the hosting providers and the PHPShadow.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Now, the <a href="http://www.phpshadow.com/purchase.php">price scheme</a> is much better.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>However some packages are doomed to fail, or at list they should! Currently the
<strong>cheaper</strong> package offers a <strong>48hours</strong> license for <strong>5 EUR</strong> and the most expensive
a <strong>12 months</strong> one for <strong>100 EUR</strong>.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>If I was going to use PHPShadow in a project of mine I would use the cheapest
license. If I wanted to publish a new version in a usual basis I would publish one
every 1 month and so I would only had to paid 5x12=<strong>60 EUR</strong> which is <strong>40 EUR</strong> less
that the <strong>1 year license</strong>.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Ok, I understand that this is a great pressure especially if your product is
immature and new bugs pop out all the time. However, with some careful planning
this is a very promising tactic, especially for low budget projects.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Other than that one who doesn&#8217;t want to spent any money and is a little bold
could try to implement another encryption mechanism on top of PHPShadow.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Here I&#8217;ll introduce some code snippets that implement this concept. They
are pretty naive but they serve our purpose really nicely.</p></div>
<div class="listingblock">
<a id="phpshadow-3.2.0-review"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #990000">&lt;?php</span>

<span style="font-style: italic"><span style="color: #9A1900">// Create the keypair</span></span>
<span style="color: #009900">$res</span><span style="color: #990000">=</span><span style="font-weight: bold"><span style="color: #000000">openssl_pkey_new</span></span><span style="color: #990000">();</span>

<span style="font-style: italic"><span style="color: #9A1900">// Get private key</span></span>
<span style="font-weight: bold"><span style="color: #000000">openssl_pkey_export</span></span><span style="color: #990000">(</span><span style="color: #009900">$res</span><span style="color: #990000">,</span> <span style="color: #009900">$privatekey</span><span style="color: #990000">);</span>

<span style="font-weight: bold"><span style="color: #000000">file_put_contents</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'privatekey.txt'</span><span style="color: #990000">,</span><span style="color: #009900">$privatekey</span><span style="color: #990000">);</span>
<span style="font-style: italic"><span style="color: #9A1900">// Get public key</span></span>
<span style="color: #009900">$publickey</span><span style="color: #990000">=</span><span style="font-weight: bold"><span style="color: #000000">openssl_pkey_get_details</span></span><span style="color: #990000">(</span><span style="color: #009900">$res</span><span style="color: #990000">);</span>
<span style="color: #009900">$publickey</span><span style="color: #990000">=</span><span style="color: #009900">$publickey</span><span style="color: #990000">[</span><span style="color: #FF0000">"key"</span><span style="color: #990000">];</span>

<span style="font-weight: bold"><span style="color: #000000">file_put_contents</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'publickey.txt'</span><span style="color: #990000">,</span><span style="color: #009900">$publickey</span><span style="color: #990000">);</span>

<span style="color: #990000">?&gt;</span></tt></pre></div></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>This generates an openssl key pair. We&#8217;ll use the public key for the encryption
and the private for the decryption.</p></div>
<div class="listingblock">
<a id="phpshadow-3.2.0-review"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #990000">&lt;?php</span>

<span style="font-style: italic"><span style="color: #9A1900">// Get public key</span></span>
<span style="color: #009900">$publickey</span><span style="color: #990000">=</span><span style="font-weight: bold"><span style="color: #000000">file_get_contents</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'publickey.txt'</span><span style="color: #990000">);</span>

<span style="color: #009900">$cleartext</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">file_get_contents</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'hello.php'</span><span style="color: #990000">);</span>

<span style="color: #009900">$c</span><span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
<span style="color: #009900">$cleartext</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">str_ireplace</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'&lt;?php'</span><span style="color: #990000">,</span><span style="color: #FF0000">''</span><span style="color: #990000">,</span><span style="color: #009900">$cleartext</span><span style="color: #990000">,</span><span style="color: #009900">$c</span><span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span><span style="color: #009900">$pos</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">strrpos</span></span><span style="color: #990000">(</span><span style="color: #009900">$cleartext</span><span style="color: #990000">,</span> <span style="color: #FF0000">'?&gt;'</span><span style="color: #990000">));</span>
        <span style="color: #009900">$cleartext</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">substr_replace</span></span><span style="color: #990000">(</span><span style="color: #009900">$cleartext</span><span style="color: #990000">,</span><span style="color: #FF0000">''</span><span style="color: #990000">,</span><span style="color: #009900">$pos</span><span style="color: #990000">,</span><span style="font-weight: bold"><span style="color: #000000">strlen</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'?&gt;'</span><span style="color: #990000">));</span>

<span style="font-weight: bold"><span style="color: #000000">openssl_public_encrypt</span></span><span style="color: #990000">(</span><span style="color: #009900">$cleartext</span><span style="color: #990000">,</span> <span style="color: #009900">$crypttext</span><span style="color: #990000">,</span> <span style="color: #009900">$publickey</span><span style="color: #990000">);</span>

<span style="font-weight: bold"><span style="color: #000000">file_put_contents</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'hello-enc'</span><span style="color: #990000">,</span><span style="color: #009900">$crypttext</span><span style="color: #990000">);</span>

<span style="color: #990000">?&gt;</span></tt></pre></div></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>This gets a stored public key and encrypts a file with it. A couple of lines
there remove the <span class="green">&lt;?php</span> and <span class="green">?&gt;</span> tags.
Then it puts the the ciphertext into a new file. In that case the original file
was a "Hello World" one and the ciphertext was the above:</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p><span class="image">
<img src="https://masterex.github.io/archive/2012/10/10/ciphertext.png" alt="Cipher Text" />
</span></p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>The critical part is the one that we&#8217;ll execute the encypted file. Here
is our precious decoder</p></div>
<div class="listingblock">
<a id="phpshadow-3.2.0-review"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #990000">&lt;?php</span>

<span style="color: #009900">$crypttext</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">file_get_contents</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'hello-enc'</span><span style="color: #990000">);</span>

<span style="color: #009900">$privatekey</span> <span style="color: #990000">=</span> <span style="color: #FF0000">'-----BEGIN PRIVATE KEY-----</span>
<span style="color: #FF0000">MIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBAJMHoO4lIBqjEqLo</span>
<span style="color: #FF0000">Fdcw5IE15niR87wB/DEn2CJzu5aNjgkmU7cQe3jmL6Qme0bAK0UFgHVDHf/M2nmT</span>
<span style="color: #FF0000">DpMLUGiiY47/eD6awUh8ROFq34DLog8k5kmp+kY7WJ49NqNNNgU+gA6gVm93ncKJ</span>
<span style="color: #FF0000">pcMGayfTaEKsdXJ0m7Z/haDeBaJ3AgMBAAECgYAXgBGl3sM53rS82xGampL7YA0d</span>
<span style="color: #FF0000">Wl61vy96/95Y61yhXLDGH50j1nuVwFz/BLORhGemGZIFrBugZjLJWcrrj9RjFwSY</span>
<span style="color: #FF0000">mTzBPwj6Qy5YI0LQDe3fGiPugKEJnRZLbCPo9H+gLQDl1onr0uMdZaB1Gn9eOBEo</span>
<span style="color: #FF0000">UmqAKCZapzeY8LkWcQJBAMIRz6+Gc5MK6mGjucQukNJn20es8lfgFqJ00aIjHVhb</span>
<span style="color: #FF0000">6CcuHSYwUcVihTtCjfgwrEr4fEg7MCvHFceZSLsifRkCQQDB8vtQf3q6birHJ68/</span>
<span style="color: #FF0000">x3ZraKkfdAc4TkjEOQGOBIPrA2Y42UqFz+9KfR7WP46gSier7/9k3gk6Rtx1S8Z4</span>
<span style="color: #FF0000">nn4PAkAmlO3qIlu1vvTLxoX29575BYa1oC9pwvYdBAZtKnf6CgOETomi/vYyvJxq</span>
<span style="color: #FF0000">JJge4GZQXUgv//xap7CvxsyLz5Z5AkBzrSiXanEYoHyDK/gqYh0PEu1MBTgJLSfZ</span>
<span style="color: #FF0000">YOa8fZTwpqZhYbhA9zQRiW7K+j1m/NOMiSgaURPP3lO+4eMOLfmhAkBEKu+zSW0H</span>
<span style="color: #FF0000">S1663mH3Lt4kgFDpSMYqUsEU/oOEP1RlIW90LUJxzirsovQHuP/S53QM04N982GU</span>
<span style="color: #FF0000">U8SME98oZ2kc</span>
<span style="color: #FF0000">-----END PRIVATE KEY-----'</span><span style="color: #990000">;</span>
<span style="color: #009900">$decrypted</span> <span style="color: #990000">=</span> <span style="color: #FF0000">''</span><span style="color: #990000">;</span>

<span style="font-weight: bold"><span style="color: #000000">openssl_private_decrypt</span></span><span style="color: #990000">(</span><span style="color: #009900">$crypttext</span><span style="color: #990000">,</span> <span style="color: #009900">$decrypted</span><span style="color: #990000">,</span> <span style="color: #009900">$privatekey</span><span style="color: #990000">);</span>

<span style="font-weight: bold"><span style="color: #0000FF">eval</span></span><span style="color: #990000">(</span><span style="color: #009900">$decrypted</span><span style="color: #990000">);</span>

<span style="font-weight: bold"><span style="color: #0000FF">unset</span></span><span style="color: #990000">(</span><span style="color: #009900">$privatekey</span><span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #0000FF">unset</span></span><span style="color: #990000">(</span><span style="color: #009900">$crypttext</span><span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #0000FF">unset</span></span><span style="color: #990000">(</span><span style="color: #009900">$decrypted</span><span style="color: #990000">);</span>

<span style="color: #990000">?&gt;</span></tt></pre></div></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>I get the ciphertext and use the private key to get the
plain text. Then, PHP&#8217;s function <span class="green">eval()</span> executes the
code. Please note here that I had removed the PHP tags that contained the
PHP code during the encryption.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>After executing the code I unset the variables that contain the sensitive
information.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Also, here I use the encrypted file name <em>hello_enc</em> hardcoded into the
decoder but we could easily craft a function to pass it dynamically.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>So, now just PHPEncode it and you&#8217;ll have your own encoding/decoding
mechanism.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Let me just say to you that this is not as trivial as it may seems and
in the best case it&#8217;s performance and security is equivelant of PHPShadow&#8217;s.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph" id="phpshadow-3.2.0-review"><p>PHPShadow is easy to use and well documented. It is also really cheap. Spending
<strong>5 EUR</strong> in order to protect a commercial project that makes you earn  money
is a really insignificant amount of money. It is also useful for distributing
demos of your app or code components that you don&#8217;t want your client to mess with.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>The security is pretty good. I guess the weak part of PHPShadow is the performance
and especially memory usage. This makes it good only for small to medium
applications. However, I guess this is good enough for most of the cases.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_phpshadow_4">PHPShadow 4</h2>
<div class="sectionbody">
<div class="paragraph" id="phpshadow-3.2.0-review"><p>I&#8217;ll try to be brief about PHPShadow version 4.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>I really can&#8217;t comment the performance but I find it very reasonable to be
worse than the unencrypted code, both in memory usage and execution time.
However, I strongly believe that it will be ok for small to medium projects.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>As for the security I can only tell that PHPShadow 4 uses both letters and
numbers for the cipher-text.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Here is an example:</p></div>
<div class="listingblock">
<a id="phpshadow-3.2.0-review"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #990000">&lt;?php</span>
<span style="font-style: italic"><span style="color: #9A1900">/* This script is protected by PHPshadow.  Visit </span></span><span style="text-decoration: underline"><span style="color: #0000FF">http://www.phpshadow.com</span></span><span style="font-style: italic"><span style="color: #9A1900"> */</span></span>
<span style="font-weight: bold"><span style="color: #000000">phpshadow_exec</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">,</span><span style="font-weight: bold"><span style="color: #0000FF">__FILE__</span></span><span style="color: #990000">,</span><span style="color: #FF0000">"</span>
<span style="color: #FF0000">dfcd1f6822bfc8bf8f1e0a2719f58be2c17591003dd5a8f2bed21ac635546914</span>
<span style="color: #FF0000">"</span><span style="color: #990000">,</span><span style="color: #FF0000">"</span>
<span style="color: #FF0000">92f9489e711898324620984e1ad46037acf02944ed5815b75610899a2fd6867ac9aa0b50821f</span>
<span style="color: #FF0000">a1fd7df1f8a2afa26149</span>
<span style="color: #FF0000">"</span><span style="color: #990000">);</span> <span style="color: #990000">?&gt;</span></tt></pre></div></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>This makes me believe that it&#8217;s harder to get cracked by brute force than
the previous version.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Also, note that the 64bit key is more distinguished in this version.</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Now for the things that I can comment:</p></div>
<div class="sect2">
<h3 id="_pros">Pros</h3>
<div class="ulist" id="phpshadow-3.2.0-review"><ul>
<li>
<p>
Easy to use
</p>
</li>
<li>
<p>
Very comprehensible manual
</p>
</li>
<li>
<p>
Quick encryption with the encryption tool
</p>
</li>
<li>
<p>
If you have a license of a previous version that hasn&#8217;t expired you can use it
</p>
</li>
<li>
<p>
In case of upgrade PHPShadow&#8217;s team will probably send you a license that lasts for a small
period of time in order to upgrade your projects to the new version
</p>
</li>
<li>
<p>
Reasonable price, see also the <em>Pricing Scheme</em> section in this article for more info
</p>
</li>
<li>
<p>
Smaller cipher-text, the manuf.php encrypted with PHPshadow 4 is <strong>6603460</strong> chars long, <strong>35%</strong> smaller
than that encoded with the version 3.2.0
</p>
</li>
<li>
<p>
Free email support
</p>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_cons">Cons</h3>
<div class="ulist" id="phpshadow-3.2.0-review"><ul>
<li>
<p>
Server extension is not backward compatible with version 3.2.0
</p>
</li>
<li>
<p>
As far as I can tell a server cannot have both PHPShadow 3.2.0 and 4 extensions installed
</p>
</li>
<li>
<p>
There is no way for one to update an old project to version 4. Ofcourse, as I said it&#8217;s very
likely the PHPShadow team will send him a new license but what if he couldn&#8217;t upgrade all
his projects before the license expires? I think a tool that converts encrypted code form
a previous PHPShadow version to the latest would be nice :)
</p>
</li>
</ul></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>That&#8217;s all I can really tell about PHPShadow 4. Try it for yourself and let me know if you liked it :)</p></div>
<div class="paragraph" id="phpshadow-3.2.0-review"><p>Keep coding!</p></div>
</div>
</div>
</div>
		]]>
</content:encoded>
        
        <pubDate>Wed, 10 Oct 2012 00:00:00 +0300</pubDate>
        <guid>https://masterex.github.io/archive/2012/10/10/phpshadow-3.2.0-review.html</guid>
    </item>
    <item>
        <title>Android: Crafting a Metronome with Audio Synthesis</title>
        <link>https://masterex.github.io/archive/2012/05/28/android-audio-synthesis.html</link>
        <description>Android: Crafting a Metronome with Audio Synthesis</description>
        <content:encoded>
<![CDATA[
		<div class="sect1">
<h2 id="_android_crafting_a_metronome_with_audio_synthesis">Android: Crafting a Metronome with Audio Synthesis</h2>
<div class="sectionbody">
</div>
</div>
<div class="sect1">
<h2 id="_where_is_the_source_code">Where is the source code</h2>
<div class="sectionbody">
<div class="paragraph" id="android-audio-synthesis"><p>Currently I am working on a project for my uni where I need to extend a metronome
for android with some additional functionalities. At first I thought that it
would be very easy to find plenty of open source metronomes out there.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>As it seems I was wrong. The only code I found was <a href="http://code.google.com/p/android-metronome/">android-metronome</a>
by Akshat Aranya. After compiling and running the project with my colleague
we saw that the beat wasn&#8217;t stable. For my disappointment <a href="http://stackoverflow.com/questions/6018824/play-a-sound-every-n-milliseconds">this</a>
stackoverflow thread confirmed that.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>Funny thing is that the google play version of it seems stable, but anyway
we weren&#8217;t able to produce a stable version from the source code.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_crafting_a_metronome_day_0">Crafting a Metronome day 0</h2>
<div class="sectionbody">
<div class="paragraph" id="android-audio-synthesis"><p>Amazed how the code for such a <em>trivial</em> thing wasn&#8217;t available we started
our own implementation.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>In the beginning we used timers to play a sound every x seconds. It was
a great a failure!</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>We used threads and the like but the <em>metronome</em> was far from accurate.
Again after a
<a href="http://stackoverflow.com/questions/4035971/metronome-timer-slowdown-via-handler-or-threads-too">stackoverflow search</a>
we saw that this path was wrong.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>Just for the story, it was about then when my colleague had to quit for personal matters.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>So, convinced by the <a href="http://stackoverflow.com/questions/6018824/play-a-sound-every-n-milliseconds">first</a>
stackoverflow thread that the android <strong>AudioTrack</strong> was the right way to go I started
to implement a metronome with that.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_at_last_a_metronome">At last a Metronome!</h2>
<div class="sectionbody">
<div class="paragraph" id="android-audio-synthesis"><p>So, here we are now with a working metronome :D</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>Let&#8217;s see the core metronome class.</p></div>
<div class="listingblock">
<a id="android-audio-synthesis"></a>
<div class="title">AudioGenerator</div>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000080">package</span></span> pntanasis<span style="color: #990000">.</span>master_ex<span style="color: #990000">.</span>android<span style="color: #990000">;</span>

<span style="font-weight: bold"><span style="color: #000080">import</span></span> android<span style="color: #990000">.</span>media<span style="color: #990000">.</span>AudioFormat<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080">import</span></span> android<span style="color: #990000">.</span>media<span style="color: #990000">.</span>AudioManager<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080">import</span></span> android<span style="color: #990000">.</span>media<span style="color: #990000">.</span>AudioTrack<span style="color: #990000">;</span>

<span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">AudioGenerator</span> <span style="color: #FF0000">{</span>

    <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #009900">int</span> sampleRate<span style="color: #990000">;</span>
    <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #008080">AudioTrack</span> audioTrack<span style="color: #990000">;</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #000000">AudioGenerator</span></span><span style="color: #990000">(</span><span style="color: #009900">int</span> sampleRate<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>sampleRate <span style="color: #990000">=</span> sampleRate<span style="color: #990000">;</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #009900">double</span><span style="color: #990000">[]</span> <span style="font-weight: bold"><span style="color: #000000">getSineWave</span></span><span style="color: #990000">(</span><span style="color: #009900">int</span> samples<span style="color: #990000">,</span><span style="color: #009900">int</span> sampleRate<span style="color: #990000">,</span><span style="color: #009900">double</span> frequencyOfTone<span style="color: #990000">)</span><span style="color: #FF0000">{</span>
        <span style="color: #009900">double</span><span style="color: #990000">[]</span> sample <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="color: #009900">double</span><span style="color: #990000">[</span>samples<span style="color: #990000">];</span>
        <span style="font-weight: bold"><span style="color: #0000FF">for</span></span> <span style="color: #990000">(</span><span style="color: #009900">int</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> samples<span style="color: #990000">;</span> i<span style="color: #990000">++)</span> <span style="color: #FF0000">{</span>
            sample<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> Math<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">sin</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span> <span style="color: #990000">*</span> Math<span style="color: #990000">.</span>PI <span style="color: #990000">*</span> i <span style="color: #990000">/</span> <span style="color: #990000">(</span>sampleRate<span style="color: #990000">/</span>frequencyOfTone<span style="color: #990000">));</span>
        <span style="color: #FF0000">}</span>
                <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> sample<span style="color: #990000">;</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #009900">byte</span><span style="color: #990000">[]</span> <span style="font-weight: bold"><span style="color: #000000">get16BitPcm</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">[]</span> samples<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        <span style="color: #009900">byte</span><span style="color: #990000">[]</span> generatedSound <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="color: #009900">byte</span><span style="color: #990000">[</span><span style="color: #993399">2</span> <span style="color: #990000">*</span> samples<span style="color: #990000">.</span>length<span style="color: #990000">];</span>
        <span style="color: #009900">int</span> index <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
        <span style="font-weight: bold"><span style="color: #0000FF">for</span></span> <span style="color: #990000">(</span><span style="color: #009900">double</span> sample <span style="color: #990000">:</span> samples<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
            <span style="font-style: italic"><span style="color: #9A1900">// scale to maximum amplitude</span></span>
            <span style="color: #009900">short</span> maxSample <span style="color: #990000">=</span> <span style="color: #990000">(</span><span style="color: #009900">short</span><span style="color: #990000">)</span> <span style="color: #990000">((</span>sample <span style="color: #990000">*</span> Short<span style="color: #990000">.</span>MAX_VALUE<span style="color: #990000">));</span>
            <span style="font-style: italic"><span style="color: #9A1900">// in 16 bit wav PCM, first byte is the low order byte</span></span>
            generatedSound<span style="color: #990000">[</span>index<span style="color: #990000">++]</span> <span style="color: #990000">=</span> <span style="color: #990000">(</span><span style="color: #009900">byte</span><span style="color: #990000">)</span> <span style="color: #990000">(</span>maxSample <span style="color: #990000">&amp;</span> <span style="color: #993399">0x00ff</span><span style="color: #990000">);</span>
            generatedSound<span style="color: #990000">[</span>index<span style="color: #990000">++]</span> <span style="color: #990000">=</span> <span style="color: #990000">(</span><span style="color: #009900">byte</span><span style="color: #990000">)</span> <span style="color: #990000">((</span>maxSample <span style="color: #990000">&amp;</span> <span style="color: #993399">0xff00</span><span style="color: #990000">)</span> <span style="color: #990000">&gt;&gt;&gt;</span> <span style="color: #993399">8</span><span style="color: #990000">);</span>

        <span style="color: #FF0000">}</span>
        <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> generatedSound<span style="color: #990000">;</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">createPlayer</span></span><span style="color: #990000">()</span><span style="color: #FF0000">{</span>
        audioTrack <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">AudioTrack</span></span><span style="color: #990000">(</span>AudioManager<span style="color: #990000">.</span>STREAM_MUSIC<span style="color: #990000">,</span>
                sampleRate<span style="color: #990000">,</span> AudioFormat<span style="color: #990000">.</span>CHANNEL_CONFIGURATION_MONO<span style="color: #990000">,</span>
                AudioFormat<span style="color: #990000">.</span>ENCODING_PCM_16BIT<span style="color: #990000">,</span> sampleRate<span style="color: #990000">,</span>
                AudioTrack<span style="color: #990000">.</span>MODE_STREAM<span style="color: #990000">);</span>

        audioTrack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">();</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">[]</span> samples<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        <span style="color: #009900">byte</span><span style="color: #990000">[]</span> generatedSnd <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">get16BitPcm</span></span><span style="color: #990000">(</span>samples<span style="color: #990000">);</span>
        audioTrack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">write</span></span><span style="color: #990000">(</span>generatedSnd<span style="color: #990000">,</span> <span style="color: #993399">0</span><span style="color: #990000">,</span> generatedSnd<span style="color: #990000">.</span>length<span style="color: #990000">);</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">destroyAudioTrack</span></span><span style="color: #990000">()</span> <span style="color: #FF0000">{</span>
        audioTrack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">stop</span></span><span style="color: #990000">();</span>
        audioTrack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">release</span></span><span style="color: #990000">();</span>
    <span style="color: #FF0000">}</span>

<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph" id="android-audio-synthesis"><p>Here we create an AudioTrack object and set the options for streaming
audio, using mono sound and 16bit PCM audio format.</p></div>
<div class="sect2">
<h3 id="_audio_101">Audio 101</h3>
<div class="paragraph" id="android-audio-synthesis"><p>Sound is actually a wave. We call it soundwave. There are many
different soundwaves named from their form such as sine wave, sawtooth wave,
square wave etc.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>Soundwaves have a frequency just as all the kind of waves. That is the circle or repeat rate.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>So, different sounds are produced by different frequencies. For example <strong>C</strong> note
may be produced by <strong>16.35</strong> Hz frequency and <strong>D</strong> by <strong>18.35</strong> Hz.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>Something else important when capturing or creating sound from a digital
device is the sample rate. This is how many samples we capture per second.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>A sample is the value of the sound (in the waveform) at a specific moment.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>The sample rate has to be 2 times more than the max frequency.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>Anyway, enough with the theory.</p></div>
</div>
<div class="sect2">
<h3 id="_back_to_the_code">Back to the code</h3>
<div class="paragraph" id="android-audio-synthesis"><p>The <span class="green">getSineWave()</span> method returns an array with samples
of a sine wave with the given frequency and sample rate.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>The <span class="green">get16BitPcm()</span> gets the samples and returns a PCM byte array.
PCM is a method used to digitally represent sampled analog signals. It
stands for Pulse Code Modulation.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>Notice that every sample is represented by a double and in order to encode
it to 16bit PCM we have to use only <strong>16bits</strong> aka <strong>2</strong> bytes. So we get the max
integer (short: 2^15-1 or 32767) nearest to the double sample value and then
we convert it to <strong>2</strong> bytes.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>To do that we perform a bitwise AND with the bitmask <strong>0x00ff</strong> to get the
little end bits and then a bitwise AND with the bitmask <strong>0xff00</strong> and shift
the bits <strong>8</strong> positions (bits) to the right.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p><span class="image">
<img src="https://masterex.github.io/archive/2012/05/28/sampleBitmask.png" alt="samples and bitmasks" />
</span></p></div>
<div class="paragraph" id="android-audio-synthesis"><p>So we populate an array of bytes that contains the waveform in PCM.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>Other than that we write the sound <em>directly</em> to the audio device buffer
with the <span class="green">writeSound()</span> method.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>The other important class of our metronome is the <strong>Metronome</strong> class. Here it is:</p></div>
<div class="listingblock">
<a id="android-audio-synthesis"></a>
<div class="title">Metronome</div>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000080">package</span></span> pntanasis<span style="color: #990000">.</span>master_ex<span style="color: #990000">.</span>android<span style="color: #990000">;</span>

<span style="font-weight: bold"><span style="color: #000080">import</span></span> android<span style="color: #990000">.</span>util<span style="color: #990000">.</span>Log<span style="color: #990000">;</span>

<span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Metronome</span> <span style="color: #FF0000">{</span>

        <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #009900">double</span> bpm<span style="color: #990000">;</span>
        <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #009900">int</span> beat<span style="color: #990000">;</span>
        <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #009900">int</span> noteValue<span style="color: #990000">;</span>
        <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #009900">int</span> silence<span style="color: #990000">;</span>

        <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #009900">double</span> beatSound<span style="color: #990000">;</span>
        <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #009900">double</span> sound<span style="color: #990000">;</span>
        <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="font-weight: bold"><span style="color: #0000FF">final</span></span> <span style="color: #009900">int</span> tick <span style="color: #990000">=</span> <span style="color: #993399">1000</span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// samples of tick</span></span>

        <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #009900">boolean</span> play <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>

        <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #008080">AudioGenerator</span> audioGenerator <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">AudioGenerator</span></span><span style="color: #990000">(</span><span style="color: #993399">8000</span><span style="color: #990000">);</span>

        <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #000000">Metronome</span></span><span style="color: #990000">()</span> <span style="color: #FF0000">{</span>
                audioGenerator<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">createPlayer</span></span><span style="color: #990000">();</span>
        <span style="color: #FF0000">}</span>

        <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">calcSilence</span></span><span style="color: #990000">()</span> <span style="color: #FF0000">{</span>
                silence <span style="color: #990000">=</span> <span style="color: #990000">(</span><span style="color: #009900">int</span><span style="color: #990000">)</span> <span style="color: #990000">(((</span><span style="color: #993399">60</span><span style="color: #990000">/</span>bpm<span style="color: #990000">)*</span><span style="color: #993399">8000</span><span style="color: #990000">)-</span>tick<span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>

        <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">()</span> <span style="color: #FF0000">{</span>
                <span style="font-weight: bold"><span style="color: #000000">calcSilence</span></span><span style="color: #990000">();</span>
                <span style="color: #009900">double</span><span style="color: #990000">[]</span> tick <span style="color: #990000">=</span>
                        audioGenerator<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getSineWave</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>tick<span style="color: #990000">,</span> <span style="color: #993399">8000</span><span style="color: #990000">,</span> beatSound<span style="color: #990000">);</span>
                <span style="color: #009900">double</span><span style="color: #990000">[]</span> tock <span style="color: #990000">=</span>
                        audioGenerator<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getSineWave</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>tick<span style="color: #990000">,</span> <span style="color: #993399">8000</span><span style="color: #990000">,</span> sound<span style="color: #990000">);</span>
                <span style="color: #009900">double</span> silence <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
                <span style="color: #009900">double</span><span style="color: #990000">[]</span> sound <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="color: #009900">double</span><span style="color: #990000">[</span><span style="color: #993399">8000</span><span style="color: #990000">];</span>
                <span style="color: #009900">int</span> t <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">,</span>s <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">,</span>b <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
                <span style="font-weight: bold"><span style="color: #0000FF">do</span></span> <span style="color: #FF0000">{</span>
                        <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #009900">int</span> i<span style="color: #990000">=</span><span style="color: #993399">0</span><span style="color: #990000">;</span>i<span style="color: #990000">&lt;</span>sound<span style="color: #990000">.</span>length<span style="color: #990000">&amp;&amp;</span>play<span style="color: #990000">;</span>i<span style="color: #990000">++)</span> <span style="color: #FF0000">{</span>
                                <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span>t<span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>tick<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
                                        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span>b <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">)</span>
                                                sound<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> tock<span style="color: #990000">[</span>t<span style="color: #990000">];</span>
                                        <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
                                                sound<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> tick<span style="color: #990000">[</span>t<span style="color: #990000">];</span>
                                        t<span style="color: #990000">++;</span>
                                <span style="color: #FF0000">}</span> <span style="font-weight: bold"><span style="color: #0000FF">else</span></span> <span style="color: #FF0000">{</span>
                                        sound<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> silence<span style="color: #990000">;</span>
                                        s<span style="color: #990000">++;</span>
                                        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span>s <span style="color: #990000">&gt;=</span> <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>silence<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
                                                t <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
                                                s <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
                                                b<span style="color: #990000">++;</span>
                                                <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span>b <span style="color: #990000">&gt;</span> <span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>beat<span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">))</span>
                                                        b <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
                                        <span style="color: #FF0000">}</span>
                                <span style="color: #FF0000">}</span>
                        <span style="color: #FF0000">}</span>
                        audioGenerator<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>sound<span style="color: #990000">);</span>
                <span style="color: #FF0000">}</span> <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span>play<span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>

        <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">stop</span></span><span style="color: #990000">()</span> <span style="color: #FF0000">{</span>
                play <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
                audioGenerator<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">destroyAudioTrack</span></span><span style="color: #990000">();</span>
        <span style="color: #FF0000">}</span>

        <span style="font-style: italic"><span style="color: #9A1900">/* Getters and Setters ... */</span></span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph" id="android-audio-synthesis"><p>In a nutshell it creates <strong>2</strong> sounds or better <strong>2</strong> arrays of samples, one for
the first beat and one for the others and it sends them to the audio device
by the <span class="green">writeSound()</span> method. Between the sounds it writes a <em>zero
waveform</em> which is actually silence.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>So we produce sound all the time in a loop but this sound may be silence.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>The only significant thing I should say is that the beat sound lasts as long as
<strong>1000</strong> samples, which is <strong>1/8</strong> of a second beacause a second consists of <strong>8000</strong>
samples (or another sample rate of our choice).</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>So, the remaining space between tho beats is filled with "silence" by the formula
<span class="green">silence = 60/bpm * 8000 - tick</span>.</p></div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_some_more_audio_synthesis_magic">Some more Audio Synthesis Magic</h2>
<div class="sectionbody">
<div class="paragraph" id="android-audio-synthesis"><p>As you have noticed I don&#8217;t load any sound for the metronome but I create
one programmatisticaly.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>In such a way one could synthesize a song. As a proof of concept I used
my fine AudioGenerator Class to play the first few note of the traditional
song <strong>Oh, Susanna</strong>.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p><span class="image">
<img src="https://masterex.github.io/archive/2012/05/28/susana.png" alt="susana partiture" />
</span></p></div>
<div class="paragraph" id="android-audio-synthesis"><p>This partitura was created with <a href="http://tuxguitar.herac.com.ar/">TuxGuitar</a>.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>Here is my first attempt:</p></div>
<div class="listingblock">
<a id="android-audio-synthesis"></a>
<div class="title">AudioSynthesisDemoActivity</div>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000080">package</span></span> pntanasis<span style="color: #990000">.</span>master_ex<span style="color: #990000">.</span>android<span style="color: #990000">;</span>

<span style="font-weight: bold"><span style="color: #000080">import</span></span> android<span style="color: #990000">.</span>app<span style="color: #990000">.</span>Activity<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080">import</span></span> android<span style="color: #990000">.</span>os<span style="color: #990000">.</span>Bundle<span style="color: #990000">;</span>

<span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">AudioSynthesisDemoActivity</span> <span style="font-weight: bold"><span style="color: #0000FF">extends</span></span> Activity <span style="color: #FF0000">{</span>
    <span style="font-style: italic"><span style="color: #9A1900">/** Called when the activity is first created. */</span></span>
    @Override
    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">onCreate</span></span><span style="color: #990000">(</span><span style="color: #008080">Bundle</span> savedInstanceState<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">super</span></span><span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">onCreate</span></span><span style="color: #990000">(</span>savedInstanceState<span style="color: #990000">);</span>
        <span style="font-weight: bold"><span style="color: #000000">setContentView</span></span><span style="color: #990000">(</span>R<span style="color: #990000">.</span>layout<span style="color: #990000">.</span>main<span style="color: #990000">);</span>

        <span style="color: #008080">AudioGenerator</span> audio <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">AudioGenerator</span></span><span style="color: #990000">(</span><span style="color: #993399">8000</span><span style="color: #990000">);</span>

        <span style="color: #009900">double</span><span style="color: #990000">[]</span> silence <span style="color: #990000">=</span> audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getSineWave</span></span><span style="color: #990000">(</span><span style="color: #993399">200</span><span style="color: #990000">,</span> <span style="color: #993399">8000</span><span style="color: #990000">,</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>

        <span style="color: #009900">int</span> noteDuration <span style="color: #990000">=</span> <span style="color: #993399">2400</span><span style="color: #990000">;</span>

        <span style="color: #009900">double</span><span style="color: #990000">[]</span> doNote <span style="color: #990000">=</span> audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getSineWave</span></span><span style="color: #990000">(</span>noteDuration<span style="color: #990000">/</span><span style="color: #993399">2</span><span style="color: #990000">,</span> <span style="color: #993399">8000</span><span style="color: #990000">,</span> <span style="color: #993399">523.25</span><span style="color: #990000">);</span>
        <span style="color: #009900">double</span><span style="color: #990000">[]</span> reNote <span style="color: #990000">=</span> audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getSineWave</span></span><span style="color: #990000">(</span>noteDuration<span style="color: #990000">/</span><span style="color: #993399">2</span><span style="color: #990000">,</span> <span style="color: #993399">8000</span><span style="color: #990000">,</span> <span style="color: #993399">587.33</span><span style="color: #990000">);</span>
        <span style="color: #009900">double</span><span style="color: #990000">[]</span> faNote <span style="color: #990000">=</span> audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getSineWave</span></span><span style="color: #990000">(</span>noteDuration<span style="color: #990000">,</span> <span style="color: #993399">8000</span><span style="color: #990000">,</span> <span style="color: #993399">698.46</span><span style="color: #990000">);</span>
        <span style="color: #009900">double</span><span style="color: #990000">[]</span> laNote <span style="color: #990000">=</span> audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getSineWave</span></span><span style="color: #990000">(</span>noteDuration<span style="color: #990000">,</span> <span style="color: #993399">8000</span><span style="color: #990000">,</span> <span style="color: #993399">880.00</span><span style="color: #990000">);</span>
        <span style="color: #009900">double</span><span style="color: #990000">[]</span> laNote2 <span style="color: #990000">=</span>
                audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getSineWave</span></span><span style="color: #990000">((</span><span style="color: #009900">int</span><span style="color: #990000">)</span> <span style="color: #990000">(</span>noteDuration<span style="color: #990000">*</span><span style="color: #993399">1.25</span><span style="color: #990000">),</span> <span style="color: #993399">8000</span><span style="color: #990000">,</span> <span style="color: #993399">880.00</span><span style="color: #990000">);</span>
        <span style="color: #009900">double</span><span style="color: #990000">[]</span> siNote <span style="color: #990000">=</span> audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getSineWave</span></span><span style="color: #990000">(</span>noteDuration<span style="color: #990000">/</span><span style="color: #993399">2</span><span style="color: #990000">,</span> <span style="color: #993399">8000</span><span style="color: #990000">,</span> <span style="color: #993399">987.77</span><span style="color: #990000">);</span>
        <span style="color: #009900">double</span><span style="color: #990000">[]</span> doNote2 <span style="color: #990000">=</span>
                audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getSineWave</span></span><span style="color: #990000">((</span><span style="color: #009900">int</span><span style="color: #990000">)</span> <span style="color: #990000">(</span>noteDuration<span style="color: #990000">*</span><span style="color: #993399">1.25</span><span style="color: #990000">),</span> <span style="color: #993399">8000</span><span style="color: #990000">,</span> <span style="color: #993399">523.25</span><span style="color: #990000">);</span>
        <span style="color: #009900">double</span><span style="color: #990000">[]</span> miNote <span style="color: #990000">=</span> audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getSineWave</span></span><span style="color: #990000">(</span>noteDuration<span style="color: #990000">/</span><span style="color: #993399">2</span><span style="color: #990000">,</span> <span style="color: #993399">8000</span><span style="color: #990000">,</span> <span style="color: #993399">659.26</span><span style="color: #990000">);</span>
        <span style="color: #009900">double</span><span style="color: #990000">[]</span> miNote2 <span style="color: #990000">=</span> audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getSineWave</span></span><span style="color: #990000">(</span>noteDuration<span style="color: #990000">,</span> <span style="color: #993399">8000</span><span style="color: #990000">,</span> <span style="color: #993399">659.26</span><span style="color: #990000">);</span>
        <span style="color: #009900">double</span><span style="color: #990000">[]</span> doNote3 <span style="color: #990000">=</span> audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getSineWave</span></span><span style="color: #990000">(</span>noteDuration<span style="color: #990000">,</span> <span style="color: #993399">8000</span><span style="color: #990000">,</span> <span style="color: #993399">523.25</span><span style="color: #990000">);</span>
        <span style="color: #009900">double</span><span style="color: #990000">[]</span> miNote3 <span style="color: #990000">=</span> audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getSineWave</span></span><span style="color: #990000">(</span>noteDuration<span style="color: #990000">*</span><span style="color: #993399">3</span><span style="color: #990000">,</span> <span style="color: #993399">8000</span><span style="color: #990000">,</span> <span style="color: #993399">659.26</span><span style="color: #990000">);</span>
        <span style="color: #009900">double</span><span style="color: #990000">[]</span> reNote2 <span style="color: #990000">=</span> audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getSineWave</span></span><span style="color: #990000">(</span>noteDuration<span style="color: #990000">*</span><span style="color: #993399">4</span><span style="color: #990000">,</span> <span style="color: #993399">8000</span><span style="color: #990000">,</span> <span style="color: #993399">587.33</span><span style="color: #990000">);</span>

        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">createPlayer</span></span><span style="color: #990000">();</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>doNote<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>reNote<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>faNote<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>laNote<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>laNote2<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>siNote<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>laNote<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>faNote<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>doNote2<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>miNote<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>faNote<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>faNote<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>miNote2<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>doNote3<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>miNote3<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>doNote<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>reNote<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>faNote<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>laNote<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>laNote2<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>siNote<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>laNote<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>faNote<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>doNote2<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>miNote<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>faNote<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>faNote<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>miNote2<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>miNote2<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>silence<span style="color: #990000">);</span>
        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">writeSound</span></span><span style="color: #990000">(</span>reNote2<span style="color: #990000">);</span>

        audio<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">destroyAudioTrack</span></span><span style="color: #990000">();</span>

    <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph" id="android-audio-synthesis"><p>And here is my hopefully more <strong>human</strong> readable version:</p></div>
<div class="listingblock">
<a id="android-audio-synthesis"></a>
<div class="title">AudioSynthesisDemoActivity</div>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000080">package</span></span> pntanasis<span style="color: #990000">.</span>master_ex<span style="color: #990000">.</span>android<span style="color: #990000">;</span>

<span style="font-weight: bold"><span style="color: #000080">import</span></span> pntanasis<span style="color: #990000">.</span>master_ex<span style="color: #990000">.</span>android<span style="color: #990000">.</span>Synthesizer<span style="color: #990000">.</span>Note0<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080">import</span></span> android<span style="color: #990000">.</span>app<span style="color: #990000">.</span>Activity<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080">import</span></span> android<span style="color: #990000">.</span>os<span style="color: #990000">.</span>Bundle<span style="color: #990000">;</span>

<span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">AudioSynthesisDemoActivity</span> <span style="font-weight: bold"><span style="color: #0000FF">extends</span></span> Activity <span style="color: #FF0000">{</span>
    <span style="font-style: italic"><span style="color: #9A1900">/** Called when the activity is first created. */</span></span>
    @Override
    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">onCreate</span></span><span style="color: #990000">(</span><span style="color: #008080">Bundle</span> savedInstanceState<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">super</span></span><span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">onCreate</span></span><span style="color: #990000">(</span>savedInstanceState<span style="color: #990000">);</span>
        <span style="font-weight: bold"><span style="color: #000000">setContentView</span></span><span style="color: #990000">(</span>R<span style="color: #990000">.</span>layout<span style="color: #990000">.</span>main<span style="color: #990000">);</span>

        <span style="color: #008080">Synthesizer</span> synthesizer <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">Synthesizer</span></span><span style="color: #990000">();</span>

        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>C<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">8</span><span style="color: #990000">);</span>
        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>E<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">8</span><span style="color: #990000">);</span>

        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>F<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">4</span><span style="color: #990000">);</span>
        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>A<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">4</span><span style="color: #990000">);</span>
        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>A<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">3.0</span><span style="color: #990000">/</span><span style="color: #993399">8</span><span style="color: #990000">);</span>
        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>B<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">8</span><span style="color: #990000">);</span>

        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>A<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">4</span><span style="color: #990000">);</span>
        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>F<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">4</span><span style="color: #990000">);</span>
        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>C<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">3.0</span><span style="color: #990000">/</span><span style="color: #993399">8</span><span style="color: #990000">);</span>
        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>E<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">8</span><span style="color: #990000">);</span>

        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>F<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">4</span><span style="color: #990000">);</span>
        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>F<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">4</span><span style="color: #990000">);</span>
        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>E<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">4</span><span style="color: #990000">);</span>
        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>C<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">4</span><span style="color: #990000">);</span>

        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>E<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">3.0</span><span style="color: #990000">/</span><span style="color: #993399">4</span><span style="color: #990000">);</span>
        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>C<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">8</span><span style="color: #990000">);</span>
        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>E<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">8</span><span style="color: #990000">);</span>

        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>F<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">4</span><span style="color: #990000">);</span>
        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>A<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">4</span><span style="color: #990000">);</span>
        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>A<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">3.0</span><span style="color: #990000">/</span><span style="color: #993399">8</span><span style="color: #990000">);</span>
        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>B<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">8</span><span style="color: #990000">);</span>

        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>A<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">4</span><span style="color: #990000">);</span>
        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>F<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">4</span><span style="color: #990000">);</span>
        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>C<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">3.0</span><span style="color: #990000">/</span><span style="color: #993399">8</span><span style="color: #990000">);</span>
        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>E<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">8</span><span style="color: #990000">);</span>

        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>F<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">4</span><span style="color: #990000">);</span>
        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>F<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">4</span><span style="color: #990000">);</span>
        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>E<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">4</span><span style="color: #990000">);</span>
        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>C<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1.0</span><span style="color: #990000">/</span><span style="color: #993399">4</span><span style="color: #990000">);</span>

        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">play</span></span><span style="color: #990000">(</span>Note0<span style="color: #990000">.</span>C<span style="color: #990000">,</span> <span style="color: #993399">5</span><span style="color: #990000">,</span> <span style="color: #993399">1</span><span style="color: #990000">);</span>

        synthesizer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">stop</span></span><span style="color: #990000">();</span>

    <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph" id="android-audio-synthesis"><p>The signature of the play method is <span class="green">play(Note0 note,int octave,double duration)</span>.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>In both cases I used the frequencies corresponding to notes that I found
in the website <a href="http://www.phy.mtu.edu/~suits/notefreqs.html">Physics of Music Notes</a> of
MTU.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>The code of the above snippets is available <a href="https://gist.github.com/2784265">here</a>.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_path_of_illumination">Path of Illumination</h2>
<div class="sectionbody">
<div class="paragraph" id="android-audio-synthesis"><p>To sum up the trick was to use an ever lasting while loop to write sound
to the audio device all the time and not to try to play sound every x seconds
with timers and the like.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>I speculate that this happens because the android os cannot guarantee a process
to start in a specified time. However, when a process starts the system will
split the resources equally.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>Note that if we stop write data to the audio device buffer we&#8217;ll get an
empty buffer warning.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>If you don&#8217;t like that just release the device when you don&#8217;t need it.</p></div>
<div class="sect2">
<h3 id="_share_love">Share love</h3>
<div class="paragraph" id="android-audio-synthesis"><p>I am relatively new to android and to multimedia stuff so I may very likely
be wrong here or there.</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>Feel free to correct me or share your thoughts :)</p></div>
<div class="paragraph" id="android-audio-synthesis"><p>cheers xD</p></div>
</div>
<div class="sect2">
<h3 id="_see_also">See Also</h3>
<div class="ulist" id="android-audio-synthesis"><ul>
<li>
<p>
<a href="https://github.com/MasterEx/BeatKeeper">Beat Keeper Unlisensed Android Metronome</a>
</p>
</li>
<li>
<p>
<a href="https://play.google.com/store/apps/details?id=pntanasis.android.metronome">Google Play: Beat Keeper</a>
</p>
</li>
<li>
<p>
<a href="http://docs.oracle.com/javase/tutorial/java/nutsandbolts/op3.html">Bitwise and Bit Shift Operators</a>
</p>
</li>
<li>
<p>
<a href="http://www.erpgreat.com/java/java-bitwise-shift-operators.htm">Java Bitwise Shift Operators</a>
</p>
</li>
<li>
<p>
<a href="http://en.wikipedia.org/wiki/Note">Wikipedia: Note</a>
</p>
</li>
<li>
<p>
<a href="http://en.wikipedia.org/wiki/Sine_wave">Wikipedia: Sine Wave</a>
</p>
</li>
<li>
<p>
<a href="http://en.wikipedia.org/wiki/Angular_frequency">Wikipedia: Angular frequency</a>
</p>
</li>
<li>
<p>
<a href="http://en.wikipedia.org/wiki/Nyquist%E2%80%93Shannon_sampling_theorem">Wikipedia: Nyquist–Shannon sampling theorem</a>
</p>
</li>
<li>
<p>
<a href="http://stackoverflow.com/questions/2413426/playing-an-arbitrary-tone-with-android">Stackoverflow: Playing an arbitrary tone with Android</a>
</p>
</li>
<li>
<p>
<a href="http://marblemice.blogspot.com/2010/04/generate-and-play-tone-in-android.html">Generate And Play A Tone In Android</a>
</p>
</li>
<li>
<p>
<a href="http://www.badlogicgames.com/wordpress/?p=228">FUN WITH AUDIOTRACK</a>
</p>
</li>
</ul></div>
</div>
</div>
</div>
		]]>
</content:encoded>
        
        <pubDate>Mon, 28 May 2012 00:00:00 +0300</pubDate>
        <guid>https://masterex.github.io/archive/2012/05/28/android-audio-synthesis.html</guid>
    </item>
    <item>
        <title>JUPAR: Updating Java desktop applications made easy!</title>
        <link>https://masterex.github.io/archive/2011/12/25/jupar.html</link>
        <description>JUPAR: Updating Java desktop applications made easy!</description>
        <content:encoded>
<![CDATA[
		<div class="sect1">
<h2 id="_jupar_updating_java_desktop_applications_made_easy">JUPAR: Updating Java desktop applications made easy!</h2>
<div class="sectionbody">
</div>
</div>
<div class="sect1">
<h2 id="_introduction">Introduction</h2>
<div class="sectionbody">
<div class="paragraph" id="jupar"><p>A neat feature for a desktop application is to automatically notify
the user for available updates or even provide automatic updating functionality.</p></div>
<div class="paragraph" id="jupar"><p>Building such an architecture seemed interesting to me, so out of curiosity
I&#8217;ve decided to implement a library and an architecture that can provide that
kind of functionality.</p></div>
<div class="paragraph" id="jupar"><p>I&#8217;ve created JUPAR wihch stands up for Java Updates Architecture! It is pretty simple
and it&#8217;s main purpose is to act as a proof of concept for how
this functionality could be implemented but one could easily use it in
a real world application as well.</p></div>
<div class="paragraph" id="jupar"><p>As you can easily assume I have implemented this concept to work with Java
desktop applications <strong>but the same concept could easily be implemented in
any other language too</strong>.</p></div>
<div class="paragraph" id="jupar"><p>Below I&#8217;ll explain how this architecture works and later there will be
a demostration.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_architecture">Architecture</h2>
<div class="sectionbody">
<div class="paragraph" id="jupar"><p>First of all the application checks if there is a newer version available.</p></div>
<div class="paragraph" id="jupar"><p>It is doing this by checking an xml file located somewhere in a remote
server. I am using xml files because they are easily configurable and Java
has a built in API for parsing them.</p></div>
<div class="paragraph" id="jupar"><p>So, when this is done we can notify the user that a new version is available
and prompt him to manually download and install it or allow the application
to perfom an automatic update.</p></div>
<div class="paragraph" id="jupar"><p>Let&#8217;s assume now that an automatic update takes place. The application parses
another xml file which contains links with all the files that we are going to need for
the update.</p></div>
<div class="paragraph" id="jupar"><p>Then all the needed files are downloaded and stored in a temporary directory.
There, there is also an xml file with the instructions. Instructions are the steps
that our application needs to follow in order to be updated.</p></div>
<div class="paragraph" id="jupar"><p>There are 3 kind of instructions.</p></div>
<div class="ulist" id="jupar"><ul>
<li>
<p>
<strong>MOVE</strong>: Moves a new file in the place of an old one
</p>
</li>
<li>
<p>
<strong>DELETE</strong>: Deletes an old file
</p>
</li>
<li>
<p>
<strong>EXECUTE</strong>: Executes a new file (a jar actually)
</p>
</li>
</ul></div>
<div class="paragraph" id="jupar"><p>The purpose of <strong>MOVE</strong> and <strong>DELETE</strong> is pretty obvious. The purpose of <strong>EXECUTE</strong> is
to perform advanced operations such as updating a database scheme. This
keeps JUPAR complexity low and provides more flexibility to the developer.</p></div>
<div class="paragraph" id="jupar"><p>The hole procedure is described to the next figure.</p></div>
<div class="paragraph" id="jupar"><p><span class="image">
<img src="https://masterex.github.io/archive/2011/12/25/jupar.png" alt="JUPAR Architecture" />
</span></p></div>
</div>
</div>
<div class="sect1">
<h2 id="_demonstration">Demonstration</h2>
<div class="sectionbody">
<div class="paragraph" id="jupar"><p>Ok, let&#8217;s now see it in action!</p></div>
<div class="paragraph" id="jupar"><p>I have built a dump application that displays the application version.
We are going to see both the code that we should include in our application
and the xml files that we should create!</p></div>
<div class="paragraph" id="jupar"><p>Here is the relevant code:</p></div>
<div class="listingblock">
<a id="jupar"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-style: italic"><span style="color: #9A1900">/**</span></span>
<span style="font-style: italic"><span style="color: #9A1900"> * Check for new version</span></span>
<span style="font-style: italic"><span style="color: #9A1900"> */</span></span>
<span style="color: #009900">int</span> answer <span style="color: #990000">=</span> <span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">;</span>
<span style="color: #008080">Release</span> release <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">Release</span></span><span style="color: #990000">();</span>
release<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">setpkgver</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"1.0"</span><span style="color: #990000">);</span>
release<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">setPkgrel</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"1"</span><span style="color: #990000">);</span>
<span style="color: #008080">ReleaseXMLParser</span> parser <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">ReleaseXMLParser</span></span><span style="color: #990000">();</span>
<span style="font-weight: bold"><span style="color: #0000FF">try</span></span> <span style="color: #FF0000">{</span>
  <span style="color: #008080">Release</span> current <span style="color: #990000">=</span>
      parser<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">parse</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"http://niovi.aueb.gr/~p3070130/latest.xml"</span><span style="color: #990000">,</span> Modes<span style="color: #990000">.</span>URL<span style="color: #990000">);</span>
  <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>current<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">compareTo</span></span><span style="color: #990000">(</span>release<span style="color: #990000">)</span> <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span><span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
    answer <span style="color: #990000">=</span>
        JOptionPane<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">showConfirmDialog</span></span><span style="color: #990000">(</span>rootPane<span style="color: #990000">,</span> <span style="color: #FF0000">"A new version of this"</span>
        <span style="color: #990000">+</span> <span style="color: #FF0000">" program is available</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">Would you like to install it?"</span><span style="color: #990000">,</span>
        <span style="color: #FF0000">"Update"</span><span style="color: #990000">,</span> JOptionPane<span style="color: #990000">.</span>YES_NO_OPTION<span style="color: #990000">,</span> JOptionPane<span style="color: #990000">.</span>INFORMATION_MESSAGE<span style="color: #990000">);</span>
    <span style="font-weight: bold"><span style="color: #0000FF">switch</span></span> <span style="color: #990000">(</span>answer<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
      <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> <span style="color: #993399">0</span><span style="color: #990000">:</span>
        <span style="font-style: italic"><span style="color: #9A1900">/**</span></span>
<span style="font-style: italic"><span style="color: #9A1900">         * Download needed files</span></span>
<span style="font-style: italic"><span style="color: #9A1900">         */</span></span>
        <span style="color: #008080">Downloader</span> dl <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">Downloader</span></span><span style="color: #990000">();</span>
        dl<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">download</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"http://niovi.aueb.gr/~p3070130/files.xml"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"tmp"</span><span style="color: #990000">,</span> Modes<span style="color: #990000">.</span>URL<span style="color: #990000">);</span>
        <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>
      <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> <span style="color: #993399">1</span><span style="color: #990000">:</span>
        <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>
    <span style="color: #FF0000">}</span>
  <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span> <span style="font-weight: bold"><span style="color: #0000FF">catch</span></span> <span style="color: #990000">(</span><span style="color: #008080">SAXException</span> ex<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
  JOptionPane<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">showMessageDialog</span></span><span style="color: #990000">(</span>rootPane<span style="color: #990000">,</span> <span style="color: #FF0000">"The xml wasn't loaded succesfully!</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">"</span><span style="color: #990000">,</span>
      <span style="color: #FF0000">"Something went wrong!"</span><span style="color: #990000">,</span> JOptionPane<span style="color: #990000">.</span>WARNING_MESSAGE<span style="color: #990000">);</span>
  Logger<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getLogger</span></span><span style="color: #990000">(</span>JUPARDemo<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span><span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getName</span></span><span style="color: #990000">()).</span><span style="font-weight: bold"><span style="color: #000000">log</span></span><span style="color: #990000">(</span>Level<span style="color: #990000">.</span>SEVERE<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">null</span></span><span style="color: #990000">,</span> ex<span style="color: #990000">);</span>
  answer <span style="color: #990000">=</span> <span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span> <span style="font-weight: bold"><span style="color: #0000FF">catch</span></span> <span style="color: #990000">(</span><span style="color: #008080">FileNotFoundException</span> ex<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
  JOptionPane<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">showMessageDialog</span></span><span style="color: #990000">(</span>rootPane<span style="color: #990000">,</span>
      <span style="color: #FF0000">"Files were unable to be read or created successfully!</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">"</span>
      <span style="color: #990000">+</span> <span style="color: #FF0000">"Please be sure that you have the right permissions and"</span>
      <span style="color: #990000">+</span> <span style="color: #FF0000">" internet connectivity!"</span><span style="color: #990000">,</span>
      <span style="color: #FF0000">"Something went wrong!"</span><span style="color: #990000">,</span> JOptionPane<span style="color: #990000">.</span>WARNING_MESSAGE<span style="color: #990000">);</span>
  Logger<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getLogger</span></span><span style="color: #990000">(</span>JUPARDemo<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span><span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getName</span></span><span style="color: #990000">()).</span><span style="font-weight: bold"><span style="color: #000000">log</span></span><span style="color: #990000">(</span>Level<span style="color: #990000">.</span>SEVERE<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">null</span></span><span style="color: #990000">,</span> ex<span style="color: #990000">);</span>
  answer <span style="color: #990000">=</span> <span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span> <span style="font-weight: bold"><span style="color: #0000FF">catch</span></span> <span style="color: #990000">(</span><span style="color: #008080">IOException</span> ex<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
  JOptionPane<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">showMessageDialog</span></span><span style="color: #990000">(</span>rootPane<span style="color: #990000">,</span> <span style="color: #FF0000">"IOEXception!"</span><span style="color: #990000">,</span>
      <span style="color: #FF0000">"Something went wrong!"</span><span style="color: #990000">,</span> JOptionPane<span style="color: #990000">.</span>WARNING_MESSAGE<span style="color: #990000">);</span>
  Logger<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getLogger</span></span><span style="color: #990000">(</span>JUPARDemo<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span><span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getName</span></span><span style="color: #990000">()).</span><span style="font-weight: bold"><span style="color: #000000">log</span></span><span style="color: #990000">(</span>Level<span style="color: #990000">.</span>SEVERE<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">null</span></span><span style="color: #990000">,</span> ex<span style="color: #990000">);</span>
  answer <span style="color: #990000">=</span> <span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span> <span style="font-weight: bold"><span style="color: #0000FF">catch</span></span> <span style="color: #990000">(</span><span style="color: #008080">InterruptedException</span> ex<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
  JOptionPane<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">showMessageDialog</span></span><span style="color: #990000">(</span>rootPane<span style="color: #990000">,</span> <span style="color: #FF0000">"The connection has been lost!</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">"</span>
      <span style="color: #990000">+</span> <span style="color: #FF0000">"Please check your internet connectivity!"</span><span style="color: #990000">,</span>
      <span style="color: #FF0000">"Something went wrong!"</span><span style="color: #990000">,</span> JOptionPane<span style="color: #990000">.</span>WARNING_MESSAGE<span style="color: #990000">);</span>
  Logger<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getLogger</span></span><span style="color: #990000">(</span>JUPARDemo<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span><span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getName</span></span><span style="color: #990000">()).</span><span style="font-weight: bold"><span style="color: #000000">log</span></span><span style="color: #990000">(</span>Level<span style="color: #990000">.</span>SEVERE<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">null</span></span><span style="color: #990000">,</span> ex<span style="color: #990000">);</span>
  answer <span style="color: #990000">=</span> <span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>

<span style="font-style: italic"><span style="color: #9A1900">/**</span></span>
<span style="font-style: italic"><span style="color: #9A1900"> * Start the updating procedure</span></span>
<span style="font-style: italic"><span style="color: #9A1900"> */</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>answer <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
  <span style="font-weight: bold"><span style="color: #0000FF">try</span></span> <span style="color: #FF0000">{</span>
    <span style="color: #008080">Updater</span> update <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">Updater</span></span><span style="color: #990000">();</span>
    update<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">update</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"update.xml"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"tmp"</span><span style="color: #990000">,</span> Modes<span style="color: #990000">.</span>FILE<span style="color: #990000">);</span>
    JOptionPane<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">showMessageDialog</span></span><span style="color: #990000">(</span>rootPane<span style="color: #990000">,</span>
        <span style="color: #FF0000">"The update was completed successfuly.</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">"</span>
        <span style="color: #990000">+</span> <span style="color: #FF0000">"Please restart the application in order the changes take effect."</span><span style="color: #990000">);</span>
  <span style="color: #FF0000">}</span> <span style="font-weight: bold"><span style="color: #0000FF">catch</span></span> <span style="color: #990000">(</span><span style="color: #008080">SAXException</span> ex<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
    Logger<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getLogger</span></span><span style="color: #990000">(</span>JUPARDemo<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span><span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getName</span></span><span style="color: #990000">()).</span><span style="font-weight: bold"><span style="color: #000000">log</span></span><span style="color: #990000">(</span>Level<span style="color: #990000">.</span>SEVERE<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">null</span></span><span style="color: #990000">,</span> ex<span style="color: #990000">);</span>
  <span style="color: #FF0000">}</span> <span style="font-weight: bold"><span style="color: #0000FF">catch</span></span> <span style="color: #990000">(</span><span style="color: #008080">InterruptedException</span> ex<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
    Logger<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getLogger</span></span><span style="color: #990000">(</span>JUPARDemo<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span><span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getName</span></span><span style="color: #990000">()).</span><span style="font-weight: bold"><span style="color: #000000">log</span></span><span style="color: #990000">(</span>Level<span style="color: #990000">.</span>SEVERE<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">null</span></span><span style="color: #990000">,</span> ex<span style="color: #990000">);</span>
  <span style="color: #FF0000">}</span> <span style="font-weight: bold"><span style="color: #0000FF">catch</span></span> <span style="color: #990000">(</span><span style="color: #008080">FileNotFoundException</span> ex<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
    Logger<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getLogger</span></span><span style="color: #990000">(</span>JUPARDemo<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span><span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getName</span></span><span style="color: #990000">()).</span><span style="font-weight: bold"><span style="color: #000000">log</span></span><span style="color: #990000">(</span>Level<span style="color: #990000">.</span>SEVERE<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">null</span></span><span style="color: #990000">,</span> ex<span style="color: #990000">);</span>
  <span style="color: #FF0000">}</span> <span style="font-weight: bold"><span style="color: #0000FF">catch</span></span> <span style="color: #990000">(</span><span style="color: #008080">IOException</span> ex<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
    Logger<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getLogger</span></span><span style="color: #990000">(</span>JUPARDemo<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span><span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getName</span></span><span style="color: #990000">()).</span><span style="font-weight: bold"><span style="color: #000000">log</span></span><span style="color: #990000">(</span>Level<span style="color: #990000">.</span>SEVERE<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">null</span></span><span style="color: #990000">,</span> ex<span style="color: #990000">);</span>
  <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span>

<span style="font-style: italic"><span style="color: #9A1900">/**</span></span>
<span style="font-style: italic"><span style="color: #9A1900"> * Delete tmp directory</span></span>
<span style="font-style: italic"><span style="color: #9A1900"> */</span></span>
<span style="color: #008080">File</span> tmp <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">File</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"tmp"</span><span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>tmp<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">exists</span></span><span style="color: #990000">())</span> <span style="color: #FF0000">{</span>
  <span style="font-weight: bold"><span style="color: #0000FF">for</span></span> <span style="color: #990000">(</span><span style="color: #008080">File</span> file <span style="color: #990000">:</span> tmp<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">listFiles</span></span><span style="color: #990000">())</span> <span style="color: #FF0000">{</span>
    file<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">delete</span></span><span style="color: #990000">();</span>
  <span style="color: #FF0000">}</span>
  tmp<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">delete</span></span><span style="color: #990000">();</span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph" id="jupar"><p>Let&#8217;s see the highlights!</p></div>
<div class="sect2">
<h3 id="_check_for_new_version">Check for new version</h3>
<div class="paragraph" id="jupar"><p>We set this applications version and release number. So version is a float number
such as 1.0 , 1.1 etc and release is an integer starting from 1 and counting.</p></div>
<div class="paragraph" id="jupar"><p>Then we set the remote xml with the current release info. Here is an example:</p></div>
<div class="listingblock">
<a id="jupar"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000080">&lt;?xml</span></span> <span style="color: #009900">version</span><span style="color: #990000">=</span><span style="color: #FF0000">"1.0"</span> <span style="color: #009900">encoding</span><span style="color: #990000">=</span><span style="color: #FF0000">"UTF-8"</span><span style="font-weight: bold"><span style="color: #000080">?&gt;</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">&lt;information&gt;</span></span>
    <span style="font-weight: bold"><span style="color: #0000FF">&lt;pubDate&gt;</span></span>Sat, 24 Dec 2011 19:58:42 +0200<span style="font-weight: bold"><span style="color: #0000FF">&lt;/pubDate&gt;</span></span>
    <span style="font-weight: bold"><span style="color: #0000FF">&lt;pkgver&gt;</span></span>1.0<span style="font-weight: bold"><span style="color: #0000FF">&lt;/pkgver&gt;</span></span>
    <span style="font-weight: bold"><span style="color: #0000FF">&lt;pkgrel&gt;</span></span>2<span style="font-weight: bold"><span style="color: #0000FF">&lt;/pkgrel&gt;</span></span>
    <span style="font-weight: bold"><span style="color: #0000FF">&lt;severity&gt;</span></span>normal<span style="font-weight: bold"><span style="color: #0000FF">&lt;/severity&gt;</span></span>
    <span style="font-weight: bold"><span style="color: #0000FF">&lt;extra&gt;</span></span>
                <span style="font-weight: bold"><span style="color: #0000FF">&lt;message&gt;&lt;/message&gt;</span></span>
    <span style="font-weight: bold"><span style="color: #0000FF">&lt;/extra&gt;</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">&lt;/information&gt;</span></span></tt></pre></div></div>
<div class="paragraph" id="jupar"><p>Message can be a short description of the update that you can display to
the user or something like that.</p></div>
<div class="paragraph" id="jupar"><p>Severity can be used as you wish. You may for example perform automatic
updates only when severity is high or whatever you like.</p></div>
<div class="paragraph" id="jupar"><p>Back to the code, the Release Class implements the comparable interface
so we can directly compare two different releases.</p></div>
<div class="paragraph" id="jupar"><p>In this demo, if a new release is available an option dialog is displayed
asking the user if he wants to update or not. As I said before one could just
notify the user for the new version and don&#8217;t perform an automatic update.</p></div>
<div class="paragraph" id="jupar"><p>Anyway, if the answer is positive we parse the <span class="red">files.xml</span> file and download
the needed files. Here how <span class="red">files.xml</span> looks like:</p></div>
<div class="listingblock">
<a id="jupar"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000080">&lt;?xml</span></span> <span style="color: #009900">version</span><span style="color: #990000">=</span><span style="color: #FF0000">"1.0"</span> <span style="color: #009900">encoding</span><span style="color: #990000">=</span><span style="color: #FF0000">"UTF-8"</span><span style="font-weight: bold"><span style="color: #000080">?&gt;</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">&lt;download&gt;</span></span>
        <span style="font-weight: bold"><span style="color: #0000FF">&lt;file&gt;</span></span>http://niovi.aueb.gr/~p3070130/update.xml<span style="font-weight: bold"><span style="color: #0000FF">&lt;/file&gt;</span></span>
        <span style="font-weight: bold"><span style="color: #0000FF">&lt;file&gt;</span></span>http://niovi.aueb.gr/~p3070130/JUPARDemo.jar<span style="font-weight: bold"><span style="color: #0000FF">&lt;/file&gt;</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">&lt;/download&gt;</span></span></tt></pre></div></div>
<div class="paragraph" id="jupar"><p>All the files are stored in a temporary directory.</p></div>
</div>
<div class="sect2">
<h3 id="_automatic_update">Automatic Update</h3>
<div class="paragraph" id="jupar"><p>When the update starts we parse the instructions file which is by then stored
 localy.
This is the last xml file and looks like this:</p></div>
<div class="listingblock">
<a id="jupar"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000080">&lt;?xml</span></span> <span style="color: #009900">version</span><span style="color: #990000">=</span><span style="color: #FF0000">"1.0"</span> <span style="color: #009900">encoding</span><span style="color: #990000">=</span><span style="color: #FF0000">"UTF-8"</span><span style="font-weight: bold"><span style="color: #000080">?&gt;</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">&lt;update&gt;</span></span>
    <span style="font-weight: bold"><span style="color: #0000FF">&lt;instruction&gt;</span></span>
        <span style="font-weight: bold"><span style="color: #0000FF">&lt;action&gt;</span></span>MOVE<span style="font-weight: bold"><span style="color: #0000FF">&lt;/action&gt;</span></span>
        <span style="font-weight: bold"><span style="color: #0000FF">&lt;file&gt;</span></span>JUPARDemo.jar<span style="font-weight: bold"><span style="color: #0000FF">&lt;/file&gt;</span></span>
        <span style="font-weight: bold"><span style="color: #0000FF">&lt;destination&gt;</span></span>JUPARDemo.jar<span style="font-weight: bold"><span style="color: #0000FF">&lt;/destination&gt;</span></span>
    <span style="font-weight: bold"><span style="color: #0000FF">&lt;/instruction&gt;</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">&lt;/update&gt;</span></span></tt></pre></div></div>
<div class="paragraph" id="jupar"><p>The above xml file contains an instruction that moves the new file JUPARDemo.jar
from the temporary directory to the current working directory (see below)
in the place of the old JUPARDemo.jar.</p></div>
<div class="paragraph" id="jupar"><p>Finally we delete the temporary directory.</p></div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_pros_and_cons">Pros and Cons</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_advantages">Advantages</h3>
<div class="paragraph" id="jupar"><p>JUPAR is pretty small and simple. Everyone could easily hack its code
and add the kind of functionality that she needs. It&#8217;s pretty flexible, developer
handles all the exceptions as she wants. It doesn&#8217;t require any server
side software installed, it just needs some xml files in the right place!</p></div>
</div>
<div class="sect2">
<h3 id="_disadvantages">Disadvantages</h3>
<div class="paragraph" id="jupar"><p>Lack of documentation.</p></div>
<div class="paragraph" id="jupar"><p>All the exceptions are thrown for the developer to handle them.
However, some times it&#8217;s not clear where the exception occurred. For example
a method may throw IOException both when a file isn&#8217;t accessible through
network or it hasn&#8217;t permissions to write a file locally. Most of the times
this isn&#8217;t important as the developer will log the error and get the
exact line where the exception occurred, however if we care to show an
appropriate message to the user this is a problem.</p></div>
<div class="paragraph" id="jupar"><p>Temporary files are stored to the <strong>current working directory</strong> and files are
copied/deleted to/from the <strong>current working directory</strong>.</p></div>
<div class="paragraph" id="jupar"><p>For example if our working directory is curdir and we execute our application
like <span class="blue">java -jar dist/JUPARDemo.jar</span> the
<span class="green">tmp</span> file will be created in the <span class="green">curdir</span> directory and then the new JUPARDemo.jar file
will be copied to <span class="green">curdir</span> too.</p></div>
<div class="paragraph" id="jupar"><p>After some though Java doesn&#8217;t provides a clear way of finding the executable&#8217;s
path. So, I have included an update method that takes also the executable&#8217;s
path as an argument and let&#8217;s up to the developer how to handle this.</p></div>
<div class="paragraph" id="jupar"><p>In my account there are 3 possible ways to do this.</p></div>
<div class="sect3">
<h4 id="_find_the_executable_path_with_java">Find the executable path with Java</h4>
<div class="paragraph" id="jupar"><p>You can try to find the executables path with a command like:</p></div>
<div class="listingblock">
<a id="jupar"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">File</span></span><span style="color: #990000">(</span>MyClass<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span><span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getProtectionDomain</span></span><span style="color: #990000">().</span><span style="font-weight: bold"><span style="color: #000000">getCodeSource</span></span><span style="color: #990000">()</span>
<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getLocation</span></span><span style="color: #990000">().</span><span style="font-weight: bold"><span style="color: #000000">toURI</span></span><span style="color: #990000">().</span>g‌​<span style="font-weight: bold"><span style="color: #000000">etPath</span></span><span style="color: #990000">());</span></tt></pre></div></div>
<div class="paragraph" id="jupar"><p>However I am not sure if this works in every case and as far as I know it
doesn&#8217;t works for JVMs previous to 1.5.</p></div>
</div>
<div class="sect3">
<h4 id="_use_a_predefined_path">Use a predefined path</h4>
<div class="paragraph" id="jupar"><p>It is possible to use a predefined path in your Java application.</p></div>
<div class="paragraph" id="jupar"><p>There are 2 supported ways to accomplish this.</p></div>
<div class="sect4">
<h5 id="_first_way">First way</h5>
<div class="paragraph" id="jupar"><p>Use a full path to set the temporary directory:</p></div>
<div class="listingblock">
<a id="jupar"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt>dl<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">download</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"http://niovi.aueb.gr/~p3070130/files.xml"</span><span style="color: #990000">,</span>
 <span style="color: #FF0000">"/home/periklis/Workspace/JUPARDEMO/dist/tmp"</span><span style="color: #990000">,</span> Modes<span style="color: #990000">.</span>URL<span style="color: #990000">);</span>
<span style="color: #990000">...</span>
update<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">update</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"update.xml"</span><span style="color: #990000">,</span>
<span style="color: #FF0000">"/home/periklis/Workspace/JUPARDEMO/dist/tmp"</span><span style="color: #990000">,</span> Modes<span style="color: #990000">.</span>FILE<span style="color: #990000">);</span>
<span style="color: #990000">...</span>
<span style="color: #008080">File</span> tmp <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">File</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"/home/periklis/Workspace/JUPARDEMO/dist/tmp"</span><span style="color: #990000">);</span></tt></pre></div></div>
<div class="paragraph" id="jupar"><p>And then have an <span class="red">update.xml</span> with also full paths.</p></div>
<div class="listingblock">
<a id="jupar"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000080">&lt;?xml</span></span> <span style="color: #009900">version</span><span style="color: #990000">=</span><span style="color: #FF0000">"1.0"</span> <span style="color: #009900">encoding</span><span style="color: #990000">=</span><span style="color: #FF0000">"UTF-8"</span><span style="font-weight: bold"><span style="color: #000080">?&gt;</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">&lt;update&gt;</span></span>
  <span style="font-weight: bold"><span style="color: #0000FF">&lt;instruction&gt;</span></span>
   <span style="font-weight: bold"><span style="color: #0000FF">&lt;action&gt;</span></span>MOVE<span style="font-weight: bold"><span style="color: #0000FF">&lt;/action&gt;</span></span>
   <span style="font-weight: bold"><span style="color: #0000FF">&lt;file&gt;</span></span>JUPARDemo.jar<span style="font-weight: bold"><span style="color: #0000FF">&lt;/file&gt;</span></span>
   <span style="font-weight: bold"><span style="color: #0000FF">&lt;destination&gt;</span></span>/home/periklis/Workspace/JUPARDEMO/dist/JUPARDemo.jar<span style="font-weight: bold"><span style="color: #0000FF">&lt;/destination&gt;</span></span>
  <span style="font-weight: bold"><span style="color: #0000FF">&lt;/instruction&gt;</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">&lt;/update&gt;</span></span></tt></pre></div></div>
<div class="paragraph" id="jupar"><p>This is how demo fullv1 and fullv2 that comes with JUPAR is implemented.</p></div>
</div>
<div class="sect4">
<h5 id="_second_way">Second way</h5>
<div class="paragraph" id="jupar"><p>This way is actually like the first one but it doesn&#8217;t need a modified
<span class="red">updates.xml</span>. As I mentioned before, after some consideration I decided
to provide an update method that takes the executable&#8217;s full path as an argument.</p></div>
<div class="paragraph" id="jupar"><p>So we only need to have something like that:</p></div>
<div class="listingblock">
<a id="jupar"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt>dl<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">download</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"http://niovi.aueb.gr/~p3070130/files.xml"</span><span style="color: #990000">,</span>
 <span style="color: #FF0000">"/home/periklis/Workspace/JUPARDEMO/dist/tmp"</span><span style="color: #990000">,</span> Modes<span style="color: #990000">.</span>URL<span style="color: #990000">);</span>
<span style="color: #990000">...</span>
update<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">update</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"update.xml"</span><span style="color: #990000">,</span>
<span style="color: #FF0000">"/home/periklis/Workspace/JUPARDEMO/dist/tmp"</span><span style="color: #990000">,</span>
<span style="color: #FF0000">"/home/periklis/Workspace/JUPARDEMO/dist"</span><span style="color: #990000">,</span> Modes<span style="color: #990000">.</span>FILE<span style="color: #990000">);</span>
<span style="color: #990000">...</span>
<span style="color: #008080">File</span> tmp <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">File</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"/home/periklis/Workspace/JUPARDEMO/dist/tmp"</span><span style="color: #990000">);</span></tt></pre></div></div>
<div class="paragraph" id="jupar"><p>Both first and second way work but comes with a great limitation. The
developer should maintain different versions of the executable for
every different system that she wants to deploy it.
Ok, in a way this is how things work in the linux world where the package
maintainer maintains a package adjusted to her distribution. However,
this shouldn&#8217;t be considered as granted so I&#8217;ll continue with the 3rd approach
that I think is the most smooth.</p></div>
</div>
</div>
<div class="sect3">
<h4 id="_use_a_predefined_path_from_local_configuration">Use a predefined path from local configuration</h4>
<div class="paragraph" id="jupar"><p>This way is actually like the above with the difference that the developer
will read the executable&#8217;s path from a configuration file. This has the
avantage that the package maintainer doesn&#8217;t need to recompile the application
to add the full path.</p></div>
<div class="paragraph" id="jupar"><p>By convention the configuration file could be in <span class="green">/home/user/.appname</span> in
linux systems and to the corresponding in Windows.</p></div>
</div>
</div>
<div class="sect2">
<h3 id="_disadvantages_conclusion">Disadvantages Conclusion</h3>
<div class="paragraph" id="jupar"><p>There are some problems into JUPAR but the developer can easily overcome them
and that is due to JUPAR&#8217;s flexibility. If there is a best way to overcome
a problem one could easily implement it into JUPAR and share some love :)</p></div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_todo_list">Todo List</h2>
<div class="sectionbody">
<div class="paragraph" id="jupar"><p>Here are some thoughts that I may look into the future:</p></div>
<div class="ulist" id="jupar"><ul>
<li>
<p>
Store the file/filepaths as File objects and not as Strings
</p>
</li>
<li>
<p>
Throw more detailed Exceptions
</p>
</li>
<li>
<p>
Let the methods that use an URLConnection to set the timeout value
</p>
</li>
<li>
<p>
Write some documentation
</p>
</li>
<li>
<p>
Add JSON and maybe plain text support other than xml
</p>
</li>
<li>
<p>
Test it!
</p>
</li>
</ul></div>
<div class="ulist" id="jupar"><div class="title">See Also</div><ul>
<li>
<p>
<a href="https://github.com/MasterEx/jupar/tree/master/src/jupar">JUPAR source code and demos</a>
</p>
</li>
<li>
<p>
<a href="http://stackoverflow.com/questions/320542/how-to-get-the-path-of-a-running-jar-file">How to get the path of a running jar file?</a>
</p>
</li>
<li>
<p>
<a href="http://stackoverflow.com/questions/305461/automatic-updates-of-java-desktop-application">How do you remotely update Java applications?</a>
</p>
</li>
</ul></div>
</div>
</div>
		]]>
</content:encoded>
        
        <pubDate>Sun, 25 Dec 2011 00:00:00 +0200</pubDate>
        <guid>https://masterex.github.io/archive/2011/12/25/jupar.html</guid>
    </item>
    <item>
        <title>Some retro technology! ZX Spectrum</title>
        <link>https://masterex.github.io/archive/2011/11/20/spectrum-zx.html</link>
        <description>Some retro technology! ZX Spectrum</description>
        <content:encoded>
<![CDATA[
		<div class="sect1">
<h2 id="_some_retro_technology_zx_spectrum">Some retro technology! ZX Spectrum</h2>
<div class="sectionbody">
</div>
</div>
<div class="sect1">
<h2 id="_introduction">Introduction</h2>
<div class="sectionbody">
<div class="paragraph" id="spectrum-zx"><p>The first computer I&#8217;ve used and I remember (8-bit game consoles don&#8217;t count)
was a <strong>386</strong> running <strong>MS-DOS</strong> and <strong>Windows 3.1</strong>. However, before that my
parents have got a very cool computer! That was a <strong>Sinclair&#8217;s ZX Spectrum</strong>.</p></div>
<div class="sect2">
<h3 id="_specs">Specs</h3>
<div class="paragraph" id="spectrum-zx"><p>ZX Spectrum was released in 1982 by Sinclair, it got a 16kB or 48kB RAM
and a Z80 processor running @ 3.5MHz! That was pretty awesome back then and
if you ask me I find it still pretty awesome!</p></div>
<div class="paragraph" id="spectrum-zx"><p>Spectrum&#8217;s operating system was Sinclair BASIC which is a BASIC programming
language dialect. As you assume Spectrum programs were written is Sinclair BASIC.
You can read more about ZX Spectrum in <a href="http://en.wikipedia.org/wiki/Sinclair_BASIC">wikipedia</a>.</p></div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_story">Story</h2>
<div class="sectionbody">
<div class="paragraph" id="spectrum-zx"><p>So, to continue the story about ZX Spectrum and I, I haven&#8217;t used it until
I got into high school. Then somehow I came across with it during some
house cleaning. As a curius person I am etc, I plugged it and played with
it.</p></div>
<div class="paragraph" id="spectrum-zx"><p>The most advanced thing I wrote in Spectrum was a little program which displayed
the Greek flag and played the Greek national anthem that I have found
in the Sinclair BASIC programming guide.</p></div>
<div class="paragraph" id="spectrum-zx"><p>Ok, that was back then, let&#8217;s get back to the present!</p></div>
<div class="paragraph" id="spectrum-zx"><p>A couple of days a ago, during another house cleaning I spotted the original
ZX Specrtum&#8217;s box. So, that was a great chance to pack the Spectrum into
its original box and write this blog post to introduce this piece of
old school technology to people that never had the chance to see it back
then.</p></div>
<div class="paragraph" id="spectrum-zx"><p>Furthermore, I&#8217;ll introduce you the basic Spectrum&#8217;s set up which is pretty
cool and how writing, saving and loading programs works.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_setup">Setup</h2>
<div class="sectionbody">
<div class="paragraph" id="spectrum-zx"><p>Picture is related!</p></div>
<div class="paragraph" id="spectrum-zx"><p><span class="image">
<img src="https://masterex.github.io/archive/2011/11/20/spectrum-setup.png" alt="ZX Spectrum setup" />
</span></p></div>
<div class="paragraph" id="spectrum-zx"><p><a href="http://en.wikipedia.org/wiki/File:ZXSpectrum48k.jpg">ZX Spectrum</a> , <a href="http://en.wikipedia.org/wiki/File:RadioShack-ctr-119.jpg">cassette deck</a></p></div>
<div class="paragraph" id="spectrum-zx"><p>A figure like that was included in ZX Spectrum quick start guide. Due to
copyright issues I won&#8217;t include the exact figure but that one which I have
made.</p></div>
<div class="paragraph" id="spectrum-zx"><p>As you can see we need to connect ZX Spectrum to a TV. The TV will work as
a monitor for the Spectrum. After connecting the Spectrum&#8217;s output to the
UHF Aerial Socket as an ordinary video player we need to tune
the television in channel UHF 36. If everything goes well we will see
Spectrum&#8217;s initial screen with Sinclair&#8217;s copyright note.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_executing_commands">Executing commands</h2>
<div class="sectionbody">
<div class="paragraph" id="spectrum-zx"><p>It is possible to run directly commands in Sinclair BASIC.
So we could directly run:</p></div>
<div class="listingblock">
<a id="spectrum-zx"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt>LET name<span style="color: #009900">$=</span><span style="color: #FF0000">"Periklis"</span>
PRINT name$</tt></pre></div></div>
<div class="sect2">
<h3 id="_writing_a_program">Writing a program</h3>
<div class="paragraph" id="spectrum-zx"><p>A program is a series of commands that can be repeated later. Here is an
example:</p></div>
<div class="listingblock">
<a id="spectrum-zx"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #993399">10</span> LET b<span style="color: #009900">$=</span><span style="color: #FF0000">"What is your age? "</span>
<span style="color: #993399">20</span> LET a<span style="color: #009900">$=</span><span style="color: #FF0000">"Your age is "</span>
<span style="color: #993399">30</span> INPUT <span style="color: #990000">(</span>b<span style="color: #009900">$)</span><span style="color: #990000">;</span>age
<span style="color: #993399">40</span> PRINT a<span style="color: #009900">$;</span>age</tt></pre></div></div>
<div class="paragraph" id="spectrum-zx"><p>The line numbers are mandatory as BASIC needs them to define which instruction
is to be executed. It is normal to start at 10 and to increase this by 10 for
each new line  because this allows other lines to be inserted later.</p></div>
<div class="paragraph" id="spectrum-zx"><p>After writing the program nothing will happen until we use the RUN command.</p></div>
<div class="paragraph" id="spectrum-zx"><p>Use RUN as many times as you want to run the program. You can use the LIST
command to see the program&#8217;s source code again.</p></div>
<div class="paragraph" id="spectrum-zx"><p>To write a new program use the NEW command.</p></div>
</div>
<div class="sect2">
<h3 id="_saving_a_program">Saving a program</h3>
<div class="paragraph" id="spectrum-zx"><p>There is a limit to how many instructions can be stored in the computer. The
ZX Spectrum indicates this limit by emitting a buzz.</p></div>
<div class="paragraph" id="spectrum-zx"><p>It is also possible to write programs, store them and execute them later,
whenever you want. However ZX Spectrum doesn&#8217;t have a non-volatile data
storage device. The prorgams are stored temporary in the RAM.</p></div>
<div class="paragraph" id="spectrum-zx"><p>So how is it possible to write programs for later use?</p></div>
<div class="paragraph" id="spectrum-zx"><p>The answer is simple. If you see more carefully the setup figure you
will see a cassette deck that I haven&#8217;t mentioned yet. It is possible to
save programs in an ordinary cassette through a cassette recorder and load them
later with it.</p></div>
<div class="paragraph" id="spectrum-zx"><p>Now let&#8217;s assume that we want to save the program above. Let&#8217;s call it <em>Age</em>.
We should use the <span class="green">SAVE "Age"</span> command.</p></div>
<div class="paragraph" id="spectrum-zx"><p>Then the computer will come up with a message <strong>Start tape then press any key</strong>.
After that press <em>a key</em>, and when the computer reports <strong>OK</strong> stop the recording.</p></div>
<div class="paragraph" id="spectrum-zx"><p>Your program will be succesfully saved in the tape. Awesome! Isn&#8217;t it?</p></div>
</div>
<div class="sect2">
<h3 id="_load_a_program">Load a program</h3>
<div class="paragraph" id="spectrum-zx"><p>To use a saved program you have to <strong>LOAD</strong> it first. Rewind the tape and if
you have a cassette player with a tape counter go just before start recording your
prorgam. Use the <span class="green">LOAD "Age"</span> command and play the cassette.</p></div>
<div class="paragraph" id="spectrum-zx"><p>That was it!</p></div>
<div class="paragraph" id="spectrum-zx"><p>I believe that saving a program in a cassette is pretty awesome. I hope
you enjoyed this article! Maybe in 30 years or so your own state of the art
computer will seems as exotic as ZX Spectrum to the future generations!</p></div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_bonus_pictrures">Bonus Pictrures</h2>
<div class="sectionbody">
<div class="paragraph" id="spectrum-zx"><p><span class="image">
<img src="https://masterex.github.io/archive/2011/11/20/spectrum1.JPG" alt="ZX Spectrum 1" width="650" />
</span></p></div>
<div class="paragraph" id="spectrum-zx"><p><span class="image">
<img src="https://masterex.github.io/archive/2011/11/20/spectrum2.JPG" alt="ZX Spectrum 2" width="650" />
</span></p></div>
<div class="paragraph" id="spectrum-zx"><p>Unfortunately the asdf keys seems not to work anymore&#8230; :_(</p></div>
</div>
</div>
		]]>
</content:encoded>
        
        <pubDate>Sun, 20 Nov 2011 00:00:00 +0200</pubDate>
        <guid>https://masterex.github.io/archive/2011/11/20/spectrum-zx.html</guid>
    </item>
    <item>
        <title>Java: A simple and neat cli Progress Bar</title>
        <link>https://masterex.github.io/archive/2011/10/23/java-cli-progress-bar.html</link>
        <description>Java: A simple and neat cli Progress Bar</description>
        <content:encoded>
<![CDATA[
		<div class="sect1">
<h2 id="_java_a_simple_and_neat_cli_progress_bar">Java: A simple and neat cli Progress Bar</h2>
<div class="sectionbody">
<div class="paragraph" id="java-cli-progress-bar"><p>Back on June c00kiemon5ter wrote a cli progress bar in java. As it seems
it isn&#8217;t something difficult but I find it pretty usefull and worth to
be mentioned. The progress bar was originally written as part of F.I.C.</p></div>
<div class="paragraph" id="java-cli-progress-bar"><p>Here is how it looks like:</p></div>
<div class="paragraph" id="java-cli-progress-bar"><p><span class="image">
<img src="https://masterex.github.io/archive/2011/10/23/progressbar.gif" alt="Progress Bar Demo" />
</span></p></div>
</div>
</div>
<div class="sect1">
<h2 id="_usage">Usage</h2>
<div class="sectionbody">
<div class="paragraph" id="java-cli-progress-bar"><p>Let&#8217;s see how you can use it in your own project. The ProgressBar Class
is the following one:</p></div>
<div class="listingblock">
<a id="java-cli-progress-bar"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-style: italic"><span style="color: #9A1900">/**</span></span>
<span style="font-style: italic"><span style="color: #9A1900"> * Ascii progress meter. On completion this will reset itself,</span></span>
<span style="font-style: italic"><span style="color: #9A1900"> * so it can be reused</span></span>
<span style="font-style: italic"><span style="color: #9A1900"> * </span></span><span style="font-weight: bold"><span style="color: #0000FF">&lt;br</span></span> <span style="font-weight: bold"><span style="color: #0000FF">/&gt;&lt;br</span></span> <span style="font-weight: bold"><span style="color: #0000FF">/&gt;</span></span>
<span style="font-style: italic"><span style="color: #9A1900"> * 100% ################################################## |</span></span>
<span style="font-style: italic"><span style="color: #9A1900"> */</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">ProgressBar</span> <span style="color: #FF0000">{</span>
    <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #008080">StringBuilder</span> progress<span style="color: #990000">;</span>

    <span style="font-style: italic"><span style="color: #9A1900">/**</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     * initialize progress bar properties.</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     */</span></span>
    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #000000">ProgressBar</span></span><span style="color: #990000">()</span> <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #000000">init</span></span><span style="color: #990000">();</span>
    <span style="color: #FF0000">}</span>

    <span style="font-style: italic"><span style="color: #9A1900">/**</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     * called whenever the progress bar needs to be updated.</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     * that is whenever progress was made.</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     *</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     * </span></span><span style="color: #009900">@param</span><span style="font-style: italic"><span style="color: #9A1900"> done an int representing the work done so far</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     * </span></span><span style="color: #009900">@param</span><span style="font-style: italic"><span style="color: #9A1900"> total an int representing the total work</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     */</span></span>
    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">update</span></span><span style="color: #990000">(</span><span style="color: #009900">int</span> done<span style="color: #990000">,</span> <span style="color: #009900">int</span> total<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        <span style="color: #009900">char</span><span style="color: #990000">[]</span> workchars <span style="color: #990000">=</span> <span style="color: #FF0000">{</span><span style="color: #FF0000">'|'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'/'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'-'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'</span><span style="color: #CC33CC">\\</span><span style="color: #FF0000">'</span><span style="color: #FF0000">}</span><span style="color: #990000">;</span>
        <span style="color: #008080">String</span> format <span style="color: #990000">=</span> <span style="color: #FF0000">"</span><span style="color: #CC33CC">\r</span><span style="color: #FF0000">%3d%% %s %c"</span><span style="color: #990000">;</span>

        <span style="color: #009900">int</span> percent <span style="color: #990000">=</span> <span style="color: #990000">(++</span>done <span style="color: #990000">*</span> <span style="color: #993399">100</span><span style="color: #990000">)</span> <span style="color: #990000">/</span> total<span style="color: #990000">;</span>
        <span style="color: #009900">int</span> extrachars <span style="color: #990000">=</span> <span style="color: #990000">(</span>percent <span style="color: #990000">/</span> <span style="color: #993399">2</span><span style="color: #990000">)</span> <span style="color: #990000">-</span> <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>progress<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">length</span></span><span style="color: #990000">();</span>

        <span style="font-weight: bold"><span style="color: #0000FF">while</span></span> <span style="color: #990000">(</span>extrachars<span style="color: #990000">--</span> <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span><span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
            progress<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">append</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'#'</span><span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>

        System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">printf</span></span><span style="color: #990000">(</span>format<span style="color: #990000">,</span> percent<span style="color: #990000">,</span> progress<span style="color: #990000">,</span>
         workchars<span style="color: #990000">[</span>done <span style="color: #990000">%</span> workchars<span style="color: #990000">.</span>length<span style="color: #990000">]);</span>

        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>done <span style="color: #990000">==</span> total<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
            System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">flush</span></span><span style="color: #990000">();</span>
            System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">();</span>
            <span style="font-weight: bold"><span style="color: #000000">init</span></span><span style="color: #990000">();</span>
        <span style="color: #FF0000">}</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">private</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">init</span></span><span style="color: #990000">()</span> <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>progress <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">StringBuilder</span></span><span style="color: #990000">(</span><span style="color: #993399">60</span><span style="color: #990000">);</span>
    <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph" id="java-cli-progress-bar"><p>Just copy it in a ProgressBar.java file or something in your desired package
(and add the appropriate package name).</p></div>
<div class="paragraph" id="java-cli-progress-bar"><p>Then you have to initialize it and call manually the update method. The
update method takes the done work units so far and the total work units.</p></div>
<div class="paragraph" id="java-cli-progress-bar"><p>Here is an example:</p></div>
<div class="listingblock">
<a id="java-cli-progress-bar"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000080">package</span></span> progressbardemo<span style="color: #990000">;</span>

<span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">ProgressBarDemo</span> <span style="color: #FF0000">{</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">main</span></span><span style="color: #990000">(</span>String<span style="color: #990000">[]</span> args<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        <span style="color: #008080">ProgressBar</span> bar <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">ProgressBar</span></span><span style="color: #990000">();</span>

        System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"Process Starts Now!"</span><span style="color: #990000">);</span>

        bar<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">update</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span> <span style="color: #993399">1000</span><span style="color: #990000">);</span>
        <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #009900">int</span> i<span style="color: #990000">=</span><span style="color: #993399">0</span><span style="color: #990000">;</span>i<span style="color: #990000">&lt;</span><span style="color: #993399">1000</span><span style="color: #990000">;</span>i<span style="color: #990000">++)</span> <span style="color: #FF0000">{</span>
                        <span style="font-style: italic"><span style="color: #9A1900">// do something!</span></span>
            <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #009900">int</span> j<span style="color: #990000">=</span><span style="color: #993399">0</span><span style="color: #990000">;</span>j<span style="color: #990000">&lt;</span><span style="color: #993399">10000000</span><span style="color: #990000">;</span>j<span style="color: #990000">++)</span>
                <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #009900">int</span> p<span style="color: #990000">=</span><span style="color: #993399">0</span><span style="color: #990000">;</span>p<span style="color: #990000">&lt;</span><span style="color: #993399">10000000</span><span style="color: #990000">;</span>p<span style="color: #990000">++);</span>
            <span style="font-style: italic"><span style="color: #9A1900">// update the progress bar</span></span>
            bar<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">update</span></span><span style="color: #990000">(</span>i<span style="color: #990000">,</span> <span style="color: #993399">1000</span><span style="color: #990000">);</span>
        <span style="color: #FF0000">}</span>
        System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"Process Completed!"</span><span style="color: #990000">);</span>
    <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph" id="java-cli-progress-bar"><p>As you can see the total work units can be changed during the program
execution. So, if we have a program that copies files and has copied
X of Y we use <span class="green">bar.update(X,Y);</span> but if suddenly we have to copy
K more files then we use <span class="green">bar.update(X',Y+K);</span> , on the fly.</p></div>
<div class="admonitionblock" id="java-cli-progress-bar">
<table><tr>
<td class="icon">
<img src="https://masterex.github.io/archive/2011/10/23/../../../../images/icons/warning.png" alt="Warning" />
</td>
<td class="content">The Progress Bar is meaningful only when the user has to wait. If the
process terminates quickly it is meaningless and furthermore the symbols are
drawn way too fast and not smoothly!</td>
</tr></table>
</div>
<div class="paragraph" id="java-cli-progress-bar"><p>You can find the Progress Bar original code <a href="https://github.com/c00kiemon5ter/Fractal-Image-Compression/blob/master/src/lib/io/ProgressBar.java">here</a>.
You can also check the <a href="https://github.com/c00kiemon5ter/Fractal-Image-Compression">F.I.C. project</a>
to see how it was used there.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_how_it_works">How it works</h2>
<div class="sectionbody">
<div class="paragraph" id="java-cli-progress-bar"><p>Let&#8217;s have a look in the code and understand how the magic works.</p></div>
<div class="paragraph" id="java-cli-progress-bar"><p>First of all c00kiemon5ter creates a <span class="red">StringBuilder</span> object of 60 characters
long. This is obviously the progress bar!</p></div>
<div class="paragraph" id="java-cli-progress-bar"><p>So let&#8217;s see the <span class="blue">update</span> method. I&#8217;ll introduce it again with extra
comments that explain what&#8217;s happening.</p></div>
<div class="listingblock">
<a id="java-cli-progress-bar"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-style: italic"><span style="color: #9A1900">/**</span></span>
<span style="font-style: italic"><span style="color: #9A1900"> * called whenever the progress bar needs to be updated.</span></span>
<span style="font-style: italic"><span style="color: #9A1900"> * that is whenever progress was made.</span></span>
<span style="font-style: italic"><span style="color: #9A1900"> *</span></span>
<span style="font-style: italic"><span style="color: #9A1900"> * </span></span><span style="color: #009900">@param</span><span style="font-style: italic"><span style="color: #9A1900"> done an int representing the work done so far</span></span>
<span style="font-style: italic"><span style="color: #9A1900"> * </span></span><span style="color: #009900">@param</span><span style="font-style: italic"><span style="color: #9A1900"> total an int representing the total work</span></span>
<span style="font-style: italic"><span style="color: #9A1900"> */</span></span>
 <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">update</span></span><span style="color: #990000">(</span><span style="color: #009900">int</span> done<span style="color: #990000">,</span> <span style="color: #009900">int</span> total<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
    <span style="font-style: italic"><span style="color: #9A1900">// contains the characters that create the spinning wait symbol</span></span>
    <span style="color: #009900">char</span><span style="color: #990000">[]</span> workchars <span style="color: #990000">=</span> <span style="color: #FF0000">{</span><span style="color: #FF0000">'|'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'/'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'-'</span><span style="color: #990000">,</span> <span style="color: #FF0000">'</span><span style="color: #CC33CC">\\</span><span style="color: #FF0000">'</span><span style="color: #FF0000">}</span><span style="color: #990000">;</span>
    <span style="font-style: italic"><span style="color: #9A1900">/**</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     * it is the progress bar format.</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     * let's have a closer look:</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     * - \r is the carriage return, in other words it moves</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     *   the "cursor" to the first position on the same line</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     * - %3d is a 3 digit decimal integer</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     * - %% is the literal % character</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     * - %s is a string, particularly the "###...#" symbols</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     * - %c is a character, particularly the spinning wait symbol</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     */</span></span>
    <span style="color: #008080">String</span> format <span style="color: #990000">=</span> <span style="color: #FF0000">"</span><span style="color: #CC33CC">\r</span><span style="color: #FF0000">%3d%% %s %c"</span><span style="color: #990000">;</span>

    <span style="font-style: italic"><span style="color: #9A1900">// calculates how much work units per cent have been completed</span></span>
    <span style="color: #009900">int</span> percent <span style="color: #990000">=</span> <span style="color: #990000">(++</span>done <span style="color: #990000">*</span> <span style="color: #993399">100</span><span style="color: #990000">)</span> <span style="color: #990000">/</span> total<span style="color: #990000">;</span>
    <span style="font-style: italic"><span style="color: #9A1900">// total number of # to be appended</span></span>
    <span style="color: #009900">int</span> extrachars <span style="color: #990000">=</span> <span style="color: #990000">(</span>percent <span style="color: #990000">/</span> <span style="color: #993399">2</span><span style="color: #990000">)</span> <span style="color: #990000">-</span> <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">.</span>progress<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">length</span></span><span style="color: #990000">();</span>

    <span style="font-style: italic"><span style="color: #9A1900">// append the # to the progress bar</span></span>
    <span style="font-weight: bold"><span style="color: #0000FF">while</span></span> <span style="color: #990000">(</span>extrachars<span style="color: #990000">--</span> <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span><span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        progress<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">append</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'#'</span><span style="color: #990000">);</span>
    <span style="color: #FF0000">}</span>

    <span style="font-style: italic"><span style="color: #9A1900">// updates/redraws the progress bar</span></span>
    System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">printf</span></span><span style="color: #990000">(</span>format<span style="color: #990000">,</span> percent<span style="color: #990000">,</span>
    progress<span style="color: #990000">,</span> workchars<span style="color: #990000">[</span>done <span style="color: #990000">%</span> workchars<span style="color: #990000">.</span>length<span style="color: #990000">]);</span>

    <span style="font-style: italic"><span style="color: #9A1900">/**</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     * if the work have been completed it forces the output</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     * to be written, changes line and resets itself so it</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     * can be reused.</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     */</span></span>
    <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>done <span style="color: #990000">==</span> total<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">flush</span></span><span style="color: #990000">();</span>
        System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">();</span>
        <span style="font-weight: bold"><span style="color: #000000">init</span></span><span style="color: #990000">();</span>
    <span style="color: #FF0000">}</span>
 <span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph" id="java-cli-progress-bar"><p>That was <a href="http://c00kiemon5ter.github.com/">c00kiemon5ter&#8217;s</a> simple but
pretty cli progress bar. Thank you dude! :)</p></div>
<div class="sect2">
<h3 id="_see_also">See Also</h3>
<div class="ulist" id="java-cli-progress-bar"><ul>
<li>
<p>
<a href="https://github.com/c00kiemon5ter/Fractal-Image-Compression">Fractal Image Compression code</a>
</p>
</li>
<li>
<p>
<a href="http://c00kiemon5ter.github.com/Fractal-Image-Compression/#slide1">Fractal Image Compression Presentation</a>
</p>
</li>
<li>
<p>
<a href="http://download.oracle.com/javase/6/docs/api/java/lang/StringBuffer.html">Java StringBuffer Class</a>
</p>
</li>
<li>
<p>
<a href="http://download.oracle.com/javase/6/docs/api/java/lang/System.html">Java System Class</a>
</p>
</li>
<li>
<p>
<a href="http://download.oracle.com/javase/6/docs/api/java/io/PrintStream.html">Java PrintStream Class</a>
</p>
</li>
</ul></div>
</div>
</div>
</div>
		]]>
</content:encoded>
        
        <pubDate>Sun, 23 Oct 2011 00:00:00 +0300</pubDate>
        <guid>https://masterex.github.io/archive/2011/10/23/java-cli-progress-bar.html</guid>
    </item>
    <item>
        <title>Trackable File Distribution: A simple approach</title>
        <link>https://masterex.github.io/archive/2011/10/09/trackable-file-distribution-a-simple-approach.html</link>
        <description>Trackable File Distribution: A simple approach</description>
        <content:encoded>
<![CDATA[
		<div class="sect1">
<h2 id="_trackable_file_distribution_a_simple_approach">Trackable File Distribution: A simple approach</h2>
<div class="sectionbody">
</div>
</div>
<div class="sect1">
<h2 id="_scenario">Scenario</h2>
<div class="sectionbody">
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>Let&#8217;s asume that we have a community or something that distributes
material such as pictures, pdf&#8217;s e.t.c. by a website to it&#8217;s registered only
users. If the <em>management</em> wants only the registered members to download
the material is it possible to somehow track a member who leaks
something in another public mean such as uploading it to a public place
or redistributing it via torrents?</p></div>
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>The solution I came up is pretty simple and it&#8217;s called
<a href="http://en.wikipedia.org/wiki/Steganography">steganography</a>.</p></div>
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>Before I continue let me state that this method isn&#8217;t <em>bulletproof</em>.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_steganography">Steganography</h2>
<div class="sectionbody">
<div class="quoteblock" id="trackable-file-distribution-a-simple-approach">
<div class="content">
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>Steganography is the art and science of writing hidden messages in such
a way that no one, apart from the sender and intended recipient, suspects
the existence of the message, a form of security through obscurity.</p></div>
</div>
<div class="attribution">
&#8212; wikipedia
</div></div>
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>So, in general steaganography is a process where you are hiding something inside
something else! Usually hiding it in plain sight.</p></div>
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>The trick is that no one knows that something exists in there. As wikipedia
states that&#8217;s <strong>a form of security through obscurity</strong>.</p></div>
<div class="sect2">
<h3 id="_so_how_steganography_fits_in_our_case">So how steganography fits in our case?</h3>
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>That we are going to do is hide a unique identifier inside
each downloaded file that will connect it to a specific user.</p></div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_let_8217_s_see_how">Let&#8217;s see how!</h2>
<div class="sectionbody">
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>In the above example I am going to show you that concept with some PHP code.
Note that I just choose PHP because I feel more familiar with but this can
be done in any language of your choise.</p></div>
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>Let&#8217;s asume that we are going to distribute a GIF file.</p></div>
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>First of all let&#8217;s construct the identifier.</p></div>
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>You can construct the identifier any way you like but here it is the first
thing that poped into my head.</p></div>
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>If we have a user with username <strong>master</strong> and with password <strong>pass</strong> we can create
a unique identifier that will be the first 7 digits of the user name plus
password hash (md5 will do). This is md5("masterpass") = ab1e5cb87bca828b54a4a24c2b37ea8f
and the first 7 digits are <strong>ab1e5cb</strong>. This pattern can identify 36^7 unique
users.</p></div>
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>So now that we have our unique identifier we can serve the file to the
user like that:</p></div>
<div class="listingblock">
<a id="trackable-file-distribution-a-simple-approach"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #990000">&lt;?php</span>

<span style="font-weight: bold"><span style="color: #0000FF">function</span></span> <span style="font-weight: bold"><span style="color: #000000">sendfile</span></span><span style="color: #990000">(</span><span style="color: #009900">$file</span><span style="color: #990000">,</span><span style="color: #009900">$identifier</span><span style="color: #990000">,</span><span style="color: #009900">$id_length</span><span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
  <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">file_exists</span></span><span style="color: #990000">(</span><span style="color: #009900">$file</span><span style="color: #990000">))</span> <span style="color: #FF0000">{</span>
    <span style="color: #009900">$filesize</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">filesize</span></span><span style="color: #990000">(</span><span style="color: #009900">$file</span><span style="color: #990000">)+</span><span style="color: #009900">$id_length</span><span style="color: #990000">;</span>
    <span style="font-weight: bold"><span style="color: #000000">header</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'Content-Description: File Transfer'</span><span style="color: #990000">);</span>
    <span style="font-weight: bold"><span style="color: #000000">header</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'Content-Type: application/octet-stream'</span><span style="color: #990000">);</span>
    <span style="font-weight: bold"><span style="color: #000000">header</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'Content-Disposition: attachment; filename='</span><span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">basename</span></span><span style="color: #990000">(</span><span style="color: #009900">$file</span><span style="color: #990000">));</span>
    <span style="font-weight: bold"><span style="color: #000000">header</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'Content-Transfer-Encoding: binary'</span><span style="color: #990000">);</span>
    <span style="font-weight: bold"><span style="color: #000000">header</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'Expires: 0'</span><span style="color: #990000">);</span>
    <span style="font-weight: bold"><span style="color: #000000">header</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'Cache-Control: must-revalidate, post-check=0, pre-check=0'</span><span style="color: #990000">);</span>
    <span style="font-weight: bold"><span style="color: #000000">header</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'Pragma: public'</span><span style="color: #990000">);</span>
    <span style="font-weight: bold"><span style="color: #000000">header</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'Content-Length: '</span> <span style="color: #990000">.</span> <span style="color: #009900">$filesize</span><span style="color: #990000">);</span>
    <span style="font-weight: bold"><span style="color: #000000">ob_clean</span></span><span style="color: #990000">();</span>
    <span style="font-weight: bold"><span style="color: #000000">flush</span></span><span style="color: #990000">();</span>
    <span style="font-weight: bold"><span style="color: #000000">readfile</span></span><span style="color: #990000">(</span><span style="color: #009900">$file</span><span style="color: #990000">);</span>
    <span style="font-weight: bold"><span style="color: #0000FF">echo</span></span> <span style="color: #009900">$identifier</span><span style="color: #990000">;</span>
    <span style="font-weight: bold"><span style="color: #0000FF">exit</span></span><span style="color: #990000">;</span>
  <span style="color: #FF0000">}</span>
  <span style="font-weight: bold"><span style="color: #0000FF">else</span></span> <span style="color: #FF0000">{</span>
    <span style="font-weight: bold"><span style="color: #0000FF">echo</span></span> <span style="color: #FF0000">"FILE NOT FOUND! :("</span><span style="color: #990000">;</span>
  <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span>

<span style="font-weight: bold"><span style="color: #000000">sendfile</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"image.gif"</span><span style="color: #990000">,</span><span style="color: #FF0000">"ab1e5cb"</span><span style="color: #990000">,</span><span style="color: #993399">7</span><span style="color: #990000">);</span>

<span style="color: #990000">?&gt;</span></tt></pre></div></div>
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p><a href="https://gist.github.com/1273109">Here</a> is the gist with the code.</p></div>
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>The <strong>sendfile</strong> function takes the files name/location, the identifier and
the identifiers length(in bytes) and returns the trackable file to the user.</p></div>
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>If we run <em>diff</em> to the original GIF and the one our user downloaded we&#8217;ll
see that they differ.</p></div>
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>If we <em>hexdump</em> the original file we&#8217;ll see that the last hex is that:</p></div>
<div class="listingblock">
<a id="trackable-file-distribution-a-simple-approach"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #993399">0002710</span> <span style="color: #993399">0000</span> 003b
000271a</tt></pre></div></div>
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p><a href="http://www.forensicswiki.org/wiki/GIF">The 3B hex value is the GIF footer</a>.
However <em>most</em> programs use only the
header to identify the file so most image viewers will display our GIF just as
the original.</p></div>
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>The GIF that our user have downloaded will be 7 bytes larger:</p></div>
<div class="listingblock">
<a id="trackable-file-distribution-a-simple-approach"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt>$ du -b image1<span style="color: #990000">.</span>gif
<span style="color: #993399">10010</span>  image1<span style="color: #990000">.</span>gif
$ du -b image<span style="color: #990000">.</span>gif
<span style="color: #993399">10003</span>  image<span style="color: #990000">.</span>gif</tt></pre></div></div>
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>If we hexdump it the last line will be:</p></div>
<div class="listingblock">
<a id="trackable-file-distribution-a-simple-approach"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #993399">0002710</span> <span style="color: #993399">0000</span> 613b <span style="color: #993399">3162</span> <span style="color: #993399">3565</span> <span style="color: #993399">6263</span>
000271a</tt></pre></div></div>
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>As we can see there are 7 more bytes which are our unique identifier.
You can check that if you check the hex values in an <a href="http://www.asciitable.com/">ascii
character table</a>.</p></div>
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>Further more <em>hexdump</em> can dump a file in ascii with the <strong>-C</strong> switch. So
the downloaded file last line is:</p></div>
<div class="listingblock">
<a id="trackable-file-distribution-a-simple-approach"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #993399">00002710</span>  <span style="color: #993399">00</span> <span style="color: #993399">00</span> 3b <span style="color: #993399">61</span> <span style="color: #993399">62</span> <span style="color: #993399">31</span> <span style="color: #993399">65</span> <span style="color: #993399">35</span>  <span style="color: #993399">63</span> <span style="color: #993399">62</span>                    <span style="color: #990000">|..;</span>ab1e5cb<span style="color: #990000">|</span>
0000271a</tt></pre></div></div>
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>Here we can see our identifier pretty clearly.</p></div>
<div class="sect2">
<h3 id="_sum_up">Sum up</h3>
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>To sum up if a user had leaked the file image.gif we can easily associate
that file with him!</p></div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_why_not_bulletproof">Why not bulletproof</h2>
<div class="sectionbody">
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>That&#8217;s pretty obvious! As easily as we inserted the identifier someone can
remove it.</p></div>
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>Also some programs may check the file footer before they open the file.
That may result to a failure.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>There are other means that can achieve the same result such as
a visual watermark introduced in a picture. However, those that aren&#8217;t alert/destroy
the file can be reversed with some basic skills.</p></div>
<div class="paragraph" id="trackable-file-distribution-a-simple-approach"><p>Furthermore there are staganography methods that can mark a file in a
less profound way. Those methods are more advanced and complex and as I
implied earlier they may alter/destroy the original&#8217;s file data and have
as a result a copy with lesser quality.</p></div>
<div class="ulist" id="trackable-file-distribution-a-simple-approach"><div class="title">See Also</div><ul>
<li>
<p>
<a href="http://www.forensicswiki.org/wiki/Category:File_Formats">File Formats</a>
</p>
</li>
<li>
<p>
<a href="http://en.wikipedia.org/wiki/Digital_rights_management">Digital rights management (DRM)</a>
</p>
</li>
<li>
<p>
<a href="http://unixhelp.ed.ac.uk/CGI/man-cgi?hexdump+1">$man hexdump</a>
</p>
</li>
<li>
<p>
<a href="http://www.informit.com/guides/content.aspx?g=security&amp;seqNum=103">Steganography as a digital signing method - Watermarks</a>
</p>
</li>
</ul></div>
</div>
</div>
		]]>
</content:encoded>
        
        <pubDate>Sun, 09 Oct 2011 00:00:00 +0300</pubDate>
        <guid>https://masterex.github.io/archive/2011/10/09/trackable-file-distribution-a-simple-approach.html</guid>
    </item>
    <item>
        <title>PHP: Protect the c0d3</title>
        <link>https://masterex.github.io/archive/2011/08/27/php-protect-the-code.html</link>
        <description>PHP: Protect the c0d3</description>
        <content:encoded>
<![CDATA[
		<div class="sect1">
<h2 id="_php_protect_the_c0d3">PHP: Protect the c0d3</h2>
<div class="sectionbody">
</div>
</div>
<div class="sect1">
<h2 id="_introduction">Introduction</h2>
<div class="sectionbody">
<div class="paragraph" id="php-protect-the-code"><p>Protecting the PHP code I wrote has passed my mind in the past but
never actually bothered me because the code I have wrote was either
open source  or hosted in a self-administrated enviroment.</p></div>
<div class="paragraph" id="php-protect-the-code"><p>Anyway, as it seems many people are interested in protecting their
code from distribution without their permission.</p></div>
<div class="paragraph" id="php-protect-the-code"><p>The only true case where I may find it meaningful is when it is about
a commercial module that may be redistributed many times and imported in
many different projects. In that case the developer may be afraid for
pirate redistribution of his work.</p></div>
<div class="paragraph" id="php-protect-the-code"><p>However, the best thing a developer can do is to use an appropriate license
 scheme and get the advice of a good lawyer!</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_research">Research</h2>
<div class="sectionbody">
<div class="paragraph" id="php-protect-the-code"><p>Motivated by this
<a href="http://stackoverflow.com/questions/7008804/problem-in-encrypt-php-code-for-intellectual-property/7009992">question</a>
I have been wondering how someone can secure his PHP code.</p></div>
<div class="paragraph" id="php-protect-the-code"><p>After a little research in the interwebz I&#8217;ve found that there are two
possible solutions:</p></div>
<div class="quoteblock" id="php-protect-the-code">
<div class="title">Source Code Obfuscators</div>
<div class="content">
<div class="paragraph" id="php-protect-the-code"><p>Source code is obfucated to make it hard to understand and make any changes.
Example of obfuscation can be removing line breaks, spaces, comments, renaming variables,
function names, etc. where applicable, as well as very simple source code encoding.
Restoring obfuscated source code is trivial. These solutions are truly insecure, can
result in sever performance degradation, and don&#8217;t offer 100% code compatibility. None
the less such solutions do have a place in the market and are suitable for some people
(mostly because they are cheap, about $20, or available for free). You&#8217;ll find a bunch
quering search engines for "free php obfuscator".</p></div>
</div>
<div class="attribution">
<em>http://www.zubrag.com/articles/php-source-code-encoders-and-protectors.php</em><br />
&#8212; zubrag.com
</div></div>
<div class="quoteblock" id="php-protect-the-code">
<div class="title">Encoders</div>
<div class="content">
<div class="paragraph" id="php-protect-the-code"><p>Obfuscate (some can also optimize) PHP source code, compile it to bytecodes,
and eliminate the source code. Such solutions are stable and extremely hard
to reverse-engineer. Depending on the solution price these will provide you
with options to manage licenses, generate files to expire on a given date or
after a time period (trial period).</p></div>
<div class="paragraph" id="php-protect-the-code"><p>Roughly saying solutions of this type consist of two main parts:</p></div>
<div class="ulist" id="php-protect-the-code"><ul>
<li>
<p>
Encoder - program which obfuscates, encodes/encrypts source files
</p>
</li>
<li>
<p>
Loader (decoder) - these programs are designed to decode encrypted sources
and feed PHP engine with decoded sources to execute. End user will need to have
decoder (loader) installed on their server in order to be able to run your encoded application.
Loaders are available for free download.
</p>
</li>
</ul></div>
</div>
<div class="attribution">
<em>http://www.zubrag.com/articles/php-source-code-encoders-and-protectors.php</em><br />
&#8212; zubrag.com
</div></div>
<div class="paragraph" id="php-protect-the-code"><p>So, in other words an <strong>obfuscator</strong> changes many things regarding the
formatting of the program, making it unreadble at first glance. However,
the program can still become readable if someone put some effort into it.</p></div>
<div class="paragraph" id="php-protect-the-code"><p>The <strong>encoders</strong> actually encrypt the program by using an encryption
algorithm. In order to execute the PHP code a decryptor (loader) has
to be installed to the target maschine and the appropriate
<a href="http://en.wikipedia.org/wiki/Public-key_cryptography">public key</a> be in place.</p></div>
<div class="paragraph" id="php-protect-the-code"><p>Above I&#8217;ll demonstrate you both concepts and later I&#8217;ll present you some
real world solutions!</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_let_8217_s_have_a_look">Let&#8217;s have a look</h2>
<div class="sectionbody">
<div class="paragraph" id="php-protect-the-code"><p>For the above demos I&#8217;ll use this pretty cool PHP code:</p></div>
<div class="listingblock">
<a id="php-protect-the-code"></a>
<div class="title">CoolCode</div>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #990000">&lt;?php</span>

<span style="font-style: italic"><span style="color: #9A1900">/**</span></span>
<span style="font-style: italic"><span style="color: #9A1900">* Better use arrays by reference</span></span>
<span style="font-style: italic"><span style="color: #9A1900">* </span></span><span style="text-decoration: underline"><span style="color: #0000FF">http://php.net/manual/en/language.references.php</span></span>
<span style="font-style: italic"><span style="color: #9A1900">*</span></span>
<span style="font-style: italic"><span style="color: #9A1900">*/</span></span>

<span style="color: #009900">$input</span> <span style="color: #990000">=</span> <span style="color: #FF0000">"this is my sample which is sorted and simple"</span><span style="color: #990000">;</span>

<span style="font-weight: bold"><span style="color: #0000FF">echo</span></span> <span style="color: #FF0000">"Input: "</span><span style="color: #990000">.</span><span style="color: #009900">$input</span><span style="color: #990000">.</span><span style="color: #FF0000">"&lt;br/&gt;"</span><span style="color: #990000">;</span>

<span style="font-weight: bold"><span style="color: #0000FF">foreach</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">explode</span></span><span style="color: #990000">(</span><span style="color: #FF0000">" "</span><span style="color: #990000">,</span><span style="color: #009900">$input</span><span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #0000FF">as</span></span> <span style="color: #009900">$in</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">isset</span></span><span style="color: #990000">(</span><span style="color: #009900">$firstarray</span><span style="color: #990000">[</span><span style="font-weight: bold"><span style="color: #000000">strlen</span></span><span style="color: #990000">(</span><span style="color: #009900">$in</span><span style="color: #990000">)][</span><span style="color: #009900">$in</span><span style="color: #990000">]))</span>
                <span style="color: #009900">$firstarray</span><span style="color: #990000">[</span><span style="font-weight: bold"><span style="color: #000000">strlen</span></span><span style="color: #990000">(</span><span style="color: #009900">$in</span><span style="color: #990000">)][</span><span style="color: #009900">$in</span><span style="color: #990000">]++;</span>
        <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
                <span style="color: #009900">$firstarray</span><span style="color: #990000">[</span><span style="font-weight: bold"><span style="color: #000000">strlen</span></span><span style="color: #990000">(</span><span style="color: #009900">$in</span><span style="color: #990000">)][</span><span style="color: #009900">$in</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>

<span style="font-weight: bold"><span style="color: #000000">ksort</span></span><span style="color: #990000">(</span><span style="color: #009900">$firstarray</span><span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #0000FF">foreach</span></span><span style="color: #990000">(</span><span style="color: #009900">$firstarray</span> <span style="font-weight: bold"><span style="color: #0000FF">as</span></span> <span style="color: #990000">&amp;</span><span style="color: #009900">$secarray</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #000000">ksort</span></span><span style="color: #990000">(</span><span style="color: #009900">$secarray</span><span style="color: #990000">);</span>
<span style="color: #FF0000">}</span>
<span style="font-weight: bold"><span style="color: #000000">print_r</span></span><span style="color: #990000">(</span><span style="color: #009900">$firstarray</span><span style="color: #990000">);</span>

<span style="color: #990000">?&gt;</span></tt></pre></div></div>
<div class="sect2">
<h3 id="_obfuscators">Obfuscators</h3>
<div class="paragraph" id="php-protect-the-code"><p>In order to demonstrate how a simple obfuscator works I&#8217;ll cook a small
java application that uses the power of regex to obfuscate our code!</p></div>
<div class="paragraph" id="php-protect-the-code"><p><a href="https://gist.github.com/1171816#file_coolphpobfuscator.java">Here</a> you can
find the gist with the whole code.</p></div>
<div class="paragraph" id="php-protect-the-code"><p>I&#8217;ll just go directly to the interesting part:</p></div>
<div class="listingblock">
<a id="php-protect-the-code"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt>code <span style="color: #990000">=</span> code<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">replaceAll</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">|</span><span style="color: #CC33CC">\t</span><span style="color: #FF0000">"</span><span style="color: #990000">,</span> <span style="color: #FF0000">""</span><span style="color: #990000">);</span>        <span style="font-style: italic"><span style="color: #9A1900">// not tabs and breaks</span></span>
code <span style="color: #990000">=</span> code<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">replaceAll</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"/</span><span style="color: #CC33CC">\\</span><span style="color: #FF0000">*.*</span><span style="color: #CC33CC">\\</span><span style="color: #FF0000">*/"</span><span style="color: #990000">,</span> <span style="color: #FF0000">" "</span><span style="color: #990000">);</span>  <span style="font-style: italic"><span style="color: #9A1900">// remove the comments</span></span>

<span style="color: #008080">Pattern</span> MY_PATTERN <span style="color: #990000">=</span> Pattern<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">compile</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"</span><span style="color: #CC33CC">\\</span><span style="color: #FF0000">$(</span><span style="color: #CC33CC">\\</span><span style="color: #FF0000">w|</span><span style="color: #CC33CC">\\</span><span style="color: #FF0000">d)+"</span><span style="color: #990000">);</span>  <span style="font-style: italic"><span style="color: #9A1900">// match variable names</span></span>
<span style="color: #008080">Matcher</span> m <span style="color: #990000">=</span> MY_PATTERN<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">matcher</span></span><span style="color: #990000">(</span>code<span style="color: #990000">);</span>

<span style="color: #008080">ArrayList&lt;String&gt;</span> variables <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">ArrayList</span></span><span style="color: #990000">();</span>

<span style="font-style: italic"><span style="color: #9A1900">// place every variable name in an array</span></span>
<span style="color: #009900">int</span> index <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #0000FF">while</span></span> <span style="color: #990000">(</span>m<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">find</span></span><span style="color: #990000">(</span>index<span style="color: #990000">))</span> <span style="color: #FF0000">{</span>
        <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(!</span>variables<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">contains</span></span><span style="color: #990000">(</span>m<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">group</span></span><span style="color: #990000">()))</span> <span style="color: #FF0000">{</span>
                variables<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">add</span></span><span style="color: #990000">(</span>m<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">group</span></span><span style="color: #990000">());</span>
        <span style="color: #FF0000">}</span>
        index <span style="color: #990000">=</span> m<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">end</span></span><span style="color: #990000">();</span>
<span style="color: #FF0000">}</span>

<span style="font-style: italic"><span style="color: #9A1900">// rename the variables with their md5hash (with a leading a infront to</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// ensure that their name will start with letter)</span></span>
<span style="color: #008080">Iterator&lt;String&gt;</span> itr <span style="color: #990000">=</span> variables<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">iterator</span></span><span style="color: #990000">();</span>
<span style="font-weight: bold"><span style="color: #0000FF">while</span></span> <span style="color: #990000">(</span>itr<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">hasNext</span></span><span style="color: #990000">())</span> <span style="color: #FF0000">{</span>
        <span style="color: #008080">String</span> variablename <span style="color: #990000">=</span> itr<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">next</span></span><span style="color: #990000">();</span>
        code <span style="color: #990000">=</span> code<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">replaceAll</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"</span><span style="color: #CC33CC">\\</span><span style="color: #FF0000">"</span> <span style="color: #990000">+</span> variablename<span style="color: #990000">,</span>
        <span style="color: #FF0000">"</span><span style="color: #CC33CC">\\</span><span style="color: #FF0000">$a"</span> <span style="color: #990000">+</span> Coolphpobfuscator<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">md5</span></span><span style="color: #990000">(</span>variablename<span style="color: #990000">));</span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph" id="php-protect-the-code"><p>That what I am doing here are three very simple transformations:</p></div>
<div class="ulist" id="php-protect-the-code"><ul>
<li>
<p>
Eliminate any line breaks and tabs
</p>
</li>
<li>
<p>
Remove all the comments (ok, I haven&#8217;t actually removed the single line
 comments but you get the point!)
</p>
</li>
<li>
<p>
Rename the variables
</p>
</li>
</ul></div>
<div class="paragraph" id="php-protect-the-code"><p>So after all these transformations our very <strong>coolcode</strong> will look like that:</p></div>
<div class="listingblock">
<a id="php-protect-the-code"></a>
<div class="title">ObfuscatedCoolCode</div>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #990000">&lt;?php</span> <span style="color: #009900">$a6c6f2ffa347ef13815db0c336428e5a1</span> <span style="color: #990000">=</span> <span style="color: #FF0000">"this is my sample which is</span>
<span style="color: #FF0000">sorted and simple"</span><span style="color: #990000">;</span><span style="font-weight: bold"><span style="color: #0000FF">echo</span></span> <span style="color: #FF0000">"Input: "</span><span style="color: #990000">.</span><span style="color: #009900">$a6c6f2ffa347ef13815db0c336428e5a1</span><span style="color: #990000">.</span><span style="color: #FF0000">"&lt;br/</span>
<span style="color: #FF0000">&gt;"</span><span style="color: #990000">;</span><span style="font-weight: bold"><span style="color: #0000FF">foreach</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">explode</span></span><span style="color: #990000">(</span><span style="color: #FF0000">" "</span><span style="color: #990000">,</span><span style="color: #009900">$a6c6f2ffa347ef13815db0c336428e5a1</span><span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #0000FF">as</span></span> <span style="color: #009900">$a679baf73b</span>
aafa7c9f0ada0622c739c32<span style="color: #990000">)</span><span style="color: #FF0000">{</span><span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">isset</span></span><span style="color: #990000">(</span><span style="color: #009900">$ad490419709e2e8f3f8176b1dd07bb281</span><span style="color: #990000">[</span>strl
<span style="font-weight: bold"><span style="color: #000000">en</span></span><span style="color: #990000">(</span><span style="color: #009900">$a679baf73baafa7c9f0ada0622c739c32</span><span style="color: #990000">)][</span><span style="color: #009900">$a679baf73baafa7c9f0ada0622c739c32</span>
<span style="color: #990000">]))</span><span style="color: #009900">$ad490419709e2e8f3f8176b1dd07bb281</span><span style="color: #990000">[</span><span style="font-weight: bold"><span style="color: #000000">strlen</span></span><span style="color: #990000">(</span><span style="color: #009900">$a679baf73baafa7c9f0ada0622c</span>
739c32<span style="color: #990000">)][</span><span style="color: #009900">$a679baf73baafa7c9f0ada0622c739c32</span><span style="color: #990000">]++;</span><span style="font-weight: bold"><span style="color: #0000FF">else</span></span><span style="color: #009900">$ad490419709e2e8f3f8176</span>
b1dd07bb281<span style="color: #990000">[</span><span style="font-weight: bold"><span style="color: #000000">strlen</span></span><span style="color: #990000">(</span><span style="color: #009900">$a679baf73baafa7c9f0ada0622c739c32</span><span style="color: #990000">)][</span><span style="color: #009900">$a679baf73baafa7c</span>
9f0ada0622c739c32<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span><span style="color: #FF0000">}</span><span style="font-weight: bold"><span style="color: #000000">ksort</span></span><span style="color: #990000">(</span><span style="color: #009900">$ad490419709e2e8f3f8176b1dd07bb281</span><span style="color: #990000">);</span><span style="font-weight: bold"><span style="color: #0000FF">foreach</span></span><span style="color: #990000">(</span>$
ad490419709e2e8f3f8176b1dd07bb281 <span style="font-weight: bold"><span style="color: #0000FF">as</span></span> <span style="color: #990000">&amp;</span><span style="color: #009900">$a9b6dfdb0fc4e83a29530c5166ed7907f</span><span style="color: #990000">)</span><span style="color: #FF0000">{</span>k
<span style="font-weight: bold"><span style="color: #000000">sort</span></span><span style="color: #990000">(</span><span style="color: #009900">$a9b6dfdb0fc4e83a29530c5166ed7907f</span><span style="color: #990000">);</span><span style="color: #FF0000">}</span><span style="font-weight: bold"><span style="color: #000000">print_r</span></span><span style="color: #990000">(</span><span style="color: #009900">$ad490419709e2e8f3f8176</span>
b1dd07bb281<span style="color: #990000">);?&gt;</span></tt></pre></div></div>
<div class="paragraph" id="php-protect-the-code"><p>Actaully, I have introduced some line breaks so you can see the whole code
without scrolling but think of it as being a single line.</p></div>
<div class="paragraph" id="php-protect-the-code"><p>As you can see this code is obviously <em>not</em> so cool anymore!</p></div>
<div class="paragraph" id="php-protect-the-code"><p>So I hope now you get the point! The obfuscation may go on to a higher level,
for example you can alter string letters with their
<a href="http://www.yellowpipe.com/yis/tools/ASCII-HTML-Characters/index.php">numerical code</a>:</p></div>
<div class="listingblock">
<a id="php-protect-the-code"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #990000">&lt;?php</span>
<span style="font-weight: bold"><span style="color: #0000FF">echo</span></span> <span style="color: #FF0000">"hello"</span><span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #0000FF">echo</span></span> <span style="color: #FF0000">"&amp;#104;&amp;#101;&amp;#108;&amp;#108;&amp;#111;"</span><span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #0000FF">echo</span></span> <span style="color: #FF0000">"\x68\x65\x6c\x6c\x6f"</span><span style="color: #990000">;</span>
<span style="color: #990000">?&gt;</span></tt></pre></div></div>
<div class="paragraph" id="php-protect-the-code"><p>All the previous lines are echoing <strong>hello</strong>.</p></div>
<div class="admonitionblock" id="php-protect-the-code">
<table><tr>
<td class="icon">
<img src="https://masterex.github.io/archive/2011/08/27/../../../../images/icons/important.png" alt="Important" />
</td>
<td class="content">Attention! As difficult as it may seems for the obfuscated code to be read
it&#8217;s just a matter of time until it does from an experienced developer after
some "<em>deciphering</em>"!</td>
</tr></table>
</div>
</div>
<div class="sect2">
<h3 id="_encoders">Encoders</h3>
<div class="paragraph" id="php-protect-the-code"><p>I have write again some java code in order to give you the basic idea behind
PHP encoding. The code can be found <a href="https://gist.github.com/1173762">here</a>.</p></div>
<div class="paragraph" id="php-protect-the-code"><p>So let&#8217;s see the <strong>encoding</strong> process:</p></div>
<div class="imageblock" id="php-protect-the-code">
<div class="content">
<img src="https://masterex.github.io/archive/2011/08/27/img1.png" alt="Encryption" />
</div>
<div class="title">Figure 1. Encoding Process</div>
</div>
<div class="paragraph" id="php-protect-the-code"><p>If you are a little familiar with <a href="http://en.wikipedia.org/wiki/Cryptography">cryptography</a>
then you&#8217;ll have already figure out what&#8217;s happening. We create an encrpytion key
and then we use it and an encryption algorithm to encrypt the source code.</p></div>
<div class="paragraph" id="php-protect-the-code"><p>In the particular case I have used the <em>DES</em> algorithm to do that. The
cipher text that was generated was the above:</p></div>
<div class="listingblock" id="php-protect-the-code">
<div class="content">
<pre><code>w4P0PI0T9jf6059bbRIAlPqz77hlj5CRmZ4Gz/c3ZSETU3bLO/+WbDYTx9YW3RXkUWjnglCXBIIr
QwnqUpsDfPkhCx2Fg9lNBJyN5cGkKCCMud5+BBB8sTwNFpPUsH2OVPUfhmKjdFea7q2SX0PcThJC
1KW1XCtClIoRAvVgxfK58rT0VsqWtrwiLy1ghlGeSGgS3TUoVguT9IiNLm9Njq3tIe0Dk5l9nOpp
9pW4s8GfGUZQ3WzRENxBAAGb9Y+uFI5lympQfwUG9iz2IZPJFygX4EBfIzIfMIDlyz9uECgYhmuC
bZPw8EyjArf7+m15sKCSALMy/24OTy6dQD5a/t5gFZUa1T2UtChRe/ofna+2ax1vLXx3ToEG9GyC
Kddhck6KwEZMHvgGyBa3dYlyogh6dRcPuvTQTcewa/ESG0MVTW56asbzGBlJn0PYc3WOM6JM+GDO
qusHmJS+Env0+V6scgDZ9p8odDL66776CTJBn3z4rL6laxdtlm76HGiw0QjULVCFcAmrc7i9Gxrs
l2vhMhKYH3AvBGmKOlFlf8kwvWqokfGmRtPMTiZ9dSa+MaivRUxJUD10MvrrvvoJMkxmLFUa7NJf
foobOb33hDbSyPl8i8GMSw==</code></pre>
</div></div>
<div class="paragraph" id="php-protect-the-code"><p>As you can see it is not possible for someone to decipher this without any
help.</p></div>
<div class="paragraph" id="php-protect-the-code"><p>Now let&#8217;s see the <strong>decryption</strong> process:</p></div>
<div class="imageblock" id="php-protect-the-code">
<div class="content">
<img src="https://masterex.github.io/archive/2011/08/27/img2.png" alt="Decryption" />
</div>
<div class="title">Figure 2. Decryption Process</div>
</div>
<div class="paragraph" id="php-protect-the-code"><p>As you could guess decryption is the opposite process that will produce
the original source code.</p></div>
<div class="paragraph" id="php-protect-the-code"><p>The <em>PHP wrapper</em> in the figure 2 is just a PHP script that will execute
the deciphered code. This could be something like that:</p></div>
<div class="listingblock">
<a id="php-protect-the-code"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #990000">&lt;?php</span>
        <span style="font-weight: bold"><span style="color: #0000FF">eval</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">shell_exec</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"java -jar Coder.jar -de encoded.txt key"</span><span style="color: #990000">));</span>
<span style="color: #990000">?&gt;</span></tt></pre></div></div>
<div class="paragraph" id="php-protect-the-code"><p>However, if you take a look in my code and think the whole process you will
spot some problems there.</p></div>
<div class="paragraph" id="php-protect-the-code"><p>Firstly, the way I am encrypting the source code I am using a
<a href="http://en.wikipedia.org/wiki/Symmetric-key_algorithm">symmetric key
algorithm</a>. So, I can decrypt the code with the same key that I am
encrypting it. In that way, someone who knows or can asume the encryption
algorithm that has been used could easily find the original code.</p></div>
<div class="paragraph" id="php-protect-the-code"><p>Secondly, the <em>PHP wrapper</em> is pretty trivial and someone could easily
execute the above code to get the original source code:</p></div>
<div class="listingblock">
<a id="php-protect-the-code"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt>java <span style="color: #990000">-</span><span style="color: #008080">jar</span> Coder<span style="color: #990000">.</span>jar <span style="color: #990000">-</span><span style="color: #008080">de</span> encoded<span style="color: #990000">.</span>txt key</tt></pre></div></div>
<div class="paragraph" id="php-protect-the-code"><p>The most common solution in the encryption systems that I have checked
is to create a PHP extension that will act as both the <strong>decryption mechanism</strong>
and the <strong>php wrapper</strong>. This php extension should be installed in the
server maschine.</p></div>
<div class="paragraph" id="php-protect-the-code"><p>The benefit of doing so is that PHP extensions may be compiled and so
the user won&#8217;t know which encryption algorithm has been used and
wouldn&#8217;t be able to intervene and print the code instead of executing it.</p></div>
<div class="admonitionblock" id="php-protect-the-code">
<table><tr>
<td class="icon">
<img src="https://masterex.github.io/archive/2011/08/27/../../../../images/icons/warning.png" alt="Warning" />
</td>
<td class="content">In my code I have used code found on the internet. I have commemnded
wherever I have used it. Also, both my obfuscator and encoder are very
trivial and have been created <strong>only</strong> for demonstration purposes.</td>
</tr></table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_real_world_solutions">Real World Solutions</h2>
<div class="sectionbody">
<div class="paragraph" id="php-protect-the-code"><p>I haven&#8217;t searched a lot out there but I have spotted some solutions
both free software/open source and commercial. I will list them in case
you are interested.</p></div>
<div class="sect2">
<h3 id="_obfuscators_2">Obfuscators</h3>
<div class="sect3">
<h4 id="_f_o_s_s">F.O.S.S.</h4>
<div class="ulist" id="php-protect-the-code"><ul>
<li>
<p>
<a href="http://pobs.mywalhalla.net/">POBS</a> - PHP - 2003
</p>
</li>
<li>
<p>
<a href="http://www.codeproject.com/KB/recipes/php_obfuscator.aspx">PHP Obfuscator</a> - C# .net 2.0 - 2006
</p>
</li>
</ul></div>
</div>
<div class="sect3">
<h4 id="_free_online">Free Online</h4>
<div class="ulist" id="php-protect-the-code"><ul>
<li>
<p>
<a href="http://www.codeeclipse.com/">CodeEclipse</a>
</p>
</li>
<li>
<p>
<a href="http://www.pipsomania.com/best_php_obfuscator.do">Best PHP  Obfuscator</a>
</p>
</li>
</ul></div>
</div>
<div class="sect3">
<h4 id="_commercial">Commercial</h4>
<div class="ulist" id="php-protect-the-code"><ul>
<li>
<p>
<a href="http://obfusc.com/">Obfusc</a>
</p>
</li>
</ul></div>
<div class="paragraph" id="php-protect-the-code"><p>From these I have only tested the <strong>CodeEclipse</strong>. It seems OK to me.</p></div>
</div>
</div>
<div class="sect2">
<h3 id="_encoders_2">Encoders</h3>
<div class="paragraph" id="php-protect-the-code"><p>Some PHP encoders are also "compiling" the source code in order to
gain better execution times. You can find a list with these
<em>PHP accelarators</em> in <a href="http://en.wikipedia.org/wiki/List_of_PHP_accelerators">wikipedia</a>.</p></div>
<div class="sect3">
<h4 id="_f_o_s_s_2">F.O.S.S.</h4>
<div class="ulist" id="php-protect-the-code"><ul>
<li>
<p>
<a href="http://turck-mmcache.sourceforge.net/index_old.html">Turck MMCache for PHP</a> - discontinued
</p>
</li>
</ul></div>
</div>
<div class="sect3">
<h4 id="_commercial_2">Commercial</h4>
<div class="ulist" id="php-protect-the-code"><ul>
<li>
<p>
<a href="http://www.phpshadow.com/">PHPshadow</a> - free with limitations
</p>
</li>
<li>
<p>
<a href="http://www.zend.com/en/products/guard/runtime-decoders">Zend Optimizer and Zend Guard Loader</a>
</p>
</li>
<li>
<p>
<a href="http://www.nusphere.com/products/phpexpress.htm">Nusphere PhpExpress</a>
</p>
</li>
<li>
<p>
<a href="http://www.ioncube.com/">ionCube PHP Accelerator</a>
</p>
</li>
</ul></div>
<div class="paragraph" id="php-protect-the-code"><p>From my little expiriense I can surely advise you not to use the
<strong>Turck MMCache for PHP</strong>. I have tried installing it without luck (I was
getting compilation errors) until I figured out that it is <strong>discontinued</strong>
and forked into <a href="http://eaccelerator.net/">eAccelarator</a>.</p></div>
<div class="paragraph" id="php-protect-the-code"><p>However, eAccelarator removed the <a href="http://turck-mmcache.sourceforge.net/index_old.html#encoder">encoder</a>
and now that feature is not supported.</p></div>
<div class="paragraph" id="php-protect-the-code"><p>Other than that I have tested the PHPshadow and you can read about that
<a href="http://stackoverflow.com/questions/7008804/problem-in-encrypt-php-code-for-intellectual-property/7009992#7009992">here</a>.</p></div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_overview">Overview</h2>
<div class="sectionbody">
<div class="paragraph" id="php-protect-the-code"><p>Obfuscators can&#8217;t protect the code from the experienced developers. They
can only slow them down.</p></div>
<div class="paragraph" id="php-protect-the-code"><p>Encoders seems to be more effective but they need to install additional software
in the webserver. This isn&#8217;t always acceptable. Furthermore they are very expensive.
However, the speed gain by the compilation that offer the most encryption
applications is a plus.</p></div>
<div class="paragraph" id="php-protect-the-code"><p>In my opinion, as I have said already in my introduction protecting the
PHP source code shouldn&#8217;t bother the developer. However, if someone
wants to protect her/his code then I guess this would be for the money
and not for the pride so I would go for a commercial well tested encryption/acceleration
system.</p></div>
<div class="sect2">
<h3 id="_more_links">More Links</h3>
<div class="ulist" id="php-protect-the-code"><ul>
<li>
<p>
<a href="http://stackoverflow.com/questions/232736/code-obfuscator-for-php">Stack Overflows - Code obfuscator for php?</a>
</p>
</li>
<li>
<p>
<a href="http://www.seocompany.ca/software/free-encryption-software.html">seocompany - Free Encryption Software</a>
</p>
</li>
<li>
<p>
<a href="http://www.zubrag.com/articles/php-source-code-encoders-and-protectors.php">zubrag - PHP source code encoders and protectors</a>
</p>
</li>
<li>
<p>
<a href="http://macdevcenter.com/pub/a/mac/2005/04/08/code.html">Protect Your Source Code: Obfuscation 101</a>
</p>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_update">Update</h3>
<div class="paragraph" id="php-protect-the-code"><p>Here are the jar&#8217;s of the code mentioned above. These programs exist only as
a proof of concept and aren&#8217;t created for production use. So use them wisely and
at your own risk.</p></div>
<div class="ulist" id="php-protect-the-code"><ul>
<li>
<p>
<a href="coolphpobfuscator.jar">Cool PHP Obfuscator</a>
</p>
</li>
<li>
<p>
<a href="Coder.jar">Coder</a>
</p>
</li>
</ul></div>
</div>
<div class="sect2">
<h3 id="_update_2">Update 2</h3>
<div class="paragraph" id="php-protect-the-code"><p>Dan was kind enough to take my naive php obfuscator a step further and implement
more advanced functionality. His implementation can be found in this <a href="https://gist.github.com/MasterEx/5309265">gist</a>
and a precombiled jar can be downloaded
from <a href="coolphpobfuscator2.jar">here</a>.</p></div>
<div class="paragraph" id="php-protect-the-code"><p>You can use this obfuscator like that:</p></div>
<div class="paragraph" id="php-protect-the-code"><p><span class="green">java -jar coolphpobfuscator2.jar path_to_input_directory path_to_output_directory</span></p></div>
<div class="paragraph" id="php-protect-the-code"><p>Where <strong>path_to_input_directory</strong> is the path to the directory which contains the php
files to be obfuscated and <strong>path_to_output_directory</strong> is the directory where
the obfuscated files will be placed. Note that <strong>path_to_output_directory</strong> should
already exist before running the program.</p></div>
</div>
</div>
</div>
		]]>
</content:encoded>
        
        <pubDate>Sat, 27 Aug 2011 00:00:00 +0300</pubDate>
        <guid>https://masterex.github.io/archive/2011/08/27/php-protect-the-code.html</guid>
    </item>
    <item>
        <title>Give a smile: Become a blood donor!</title>
        <link>https://masterex.github.io/archive/2011/08/22/blood-donation.html</link>
        <description>Give a smile: Become a blood donor!</description>
        <content:encoded>
<![CDATA[
		<div class="sect1">
<h2 id="_give_a_smile_become_a_blood_donor">Give a smile: Become a blood donor!</h2>
<div class="sectionbody">
<div class="paragraph" id="blood-donation"><p>This article is about <a href="http://en.wikipedia.org/wiki/Blood_donation">blood donation</a>.
I will present you my view as a blood donor and try to point you out why
you should become a blood donor yourself if you fill the requirements.</p></div>
<div class="paragraph" id="blood-donation"><p>Before I continue I should tell you that my experiense is related to
the Greek medical system.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_the_need_for_blood">The need for blood</h2>
<div class="sectionbody">
<div class="paragraph" id="blood-donation"><p>There are two different cases of blood donation. The donation for a
specific recipient or the donation for an anonymous recipient.</p></div>
<div class="paragraph" id="blood-donation"><p>OK, the first is pretty clear. A relative/friend/colleague or something
needs blood because she/he will have a surgery or lost blood for some
other reason. The hospital won&#8217;t give blood except if it is an emergency
so the person in need has to look for volunteers from her/his inner circle.</p></div>
<div class="paragraph" id="blood-donation"><p>The anonymous recipient case is when the hospital stores the blood to
it&#8217;s blood bank for emergencies or for cases that need regular
<a href="http://en.wikipedia.org/wiki/Blood_transfusion">blood transfusions</a>.</p></div>
<div class="paragraph" id="blood-donation"><p>Anyway, in both cases the donation is voluntary in the Greek medical system,
in terms that nobody should donate blood for money or other things in return.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_the_procedure">The procedure</h2>
<div class="sectionbody">
<div class="paragraph" id="blood-donation"><p><span class="image">
<img src="https://masterex.github.io/archive/2011/08/22/http://upload.wikimedia.org/wikipedia/commons/b/b9/Blutspende_Piktogramm.GIF" alt="Blood Donation" width="64" />
</span>
You should visit a public hospital with a blood department, fill in a
questionnaire about your health status, have a 5 minute interview with
the doctor where she/he will check your pressure and maybe check you
hemoglobin levels (with a little pinch) and if it is ok the donation
will take 10-15 minutes to be completed.</p></div>
<div class="paragraph" id="blood-donation"><p>After that you&#8217;ll get a free juice and something saulty and you shouldn&#8217;t
drive or smoke for an hour. Also, avoid the weight lifting from the arm
that was used for the procedure.</p></div>
<div class="paragraph" id="blood-donation"><p>If you want more details you can read the article in wikipedia!</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_why_more_blood_donors">Why more blood donors?</h2>
<div class="sectionbody">
<div class="paragraph" id="blood-donation"><p>Because people are in constant need for blood.
<a href="http://arcblood.redcross.org/new_site/the_need_for_blood.htm">Here</a> you can
find how much blood some common medical procedures require.</p></div>
<div class="paragraph" id="blood-donation"><p>Have in mind that some people are born with health conditions that make
them need regular blood tranfusions (i.e. <a href="http://en.wikipedia.org/wiki/Anemia">Anemia</a>
, etc).</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_why_people_aren_8217_t_donating">Why people aren&#8217;t donating?</h2>
<div class="sectionbody">
<div class="paragraph" id="blood-donation"><p>Many people don&#8217;t feel comfordable in the view of blood or are afreaid of
the needles. Some of them haven&#8217;t a single blood test in their lifetime.</p></div>
<div class="paragraph" id="blood-donation"><p>Some others are just ignorant of the procedure and haven&#8217;t looked into it.</p></div>
<div class="paragraph" id="blood-donation"><p>And finally, not all the people fill the requirements to be blood donors.</p></div>
<div class="paragraph" id="blood-donation"><p>Except the last category all the others should overcome their fears and
suspensions and consider seriusly the blood donation.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_motivation">Motivation</h2>
<div class="sectionbody">
<div class="paragraph" id="blood-donation"><p>The first time I donated blood was for a friend of a fellow <em>ninja</em> back when
I was doing <a href="http://en.wikipedia.org/wiki/Ninjutsu">ninjutsu</a>.</p></div>
<div class="paragraph" id="blood-donation"><p>Until then I hadn&#8217;t considered donating blood. I believe this is why I hadn&#8217;t
any blood donor nearby me to get inspired in the first place.</p></div>
<div class="paragraph" id="blood-donation"><p>However, after my first experiense with blood donation I was very positive
with that but I actually started donating regularly a couple of
years after that.</p></div>
<div class="paragraph" id="blood-donation"><p>The fact is that what have motivated me the most is that I have found people
from my friendly circle that were interested in blood donation and
arranged with them to go and donate blood.</p></div>
<div class="admonitionblock" id="blood-donation">
<table><tr>
<td class="icon">
<img src="https://masterex.github.io/archive/2011/08/22/../../../../images/icons/tip.png" alt="Tip" />
</td>
<td class="content">So my advice for you that are considering blood donation but haven&#8217;t
decided yet is to find a friend of yours and go together to donate blood.
If you feel like donating blood again you can arrange with your friend to
donate blood 2-4 times per year.</td>
</tr></table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_more_info">More info</h2>
<div class="sectionbody">
<div class="paragraph" id="blood-donation"><p>After your first voluntary blood donation you will get your donor card.
There is your blood donation history.</p></div>
<div class="paragraph" id="blood-donation"><p>The most significant benefit is that in case you or a relative of yours needs
blood you are entitled some blood units.</p></div>
<div class="paragraph" id="blood-donation"><p>However, I honestly hope yourself never need blood for you or your relatives!</p></div>
<div class="sect2">
<h3 id="_interesting_links_for_greeks">Interesting links for Greeks</h3>
<div class="ulist" id="blood-donation"><ul>
<li>
<p>
<a href="http://www.aimodosia.org/">aimodosia.org</a>
</p>
</li>
<li>
<p>
<a href="http://www.aima.gr/">aima.gr</a>
</p>
</li>
<li>
<p>
<a href="http://www.thegreekz.com/forum/archive/index.php/t-332935.html">thegreekz.com forum topic: ΑΙΜΟΔΟΣΙΑ, ΜΥΘΟΙ ΚΑΙ ΠΡΑΓΜΑΤΙΚΟΤΗΤΕΣ</a>
</p>
</li>
</ul></div>
</div>
</div>
</div>
		]]>
</content:encoded>
        
        <pubDate>Mon, 22 Aug 2011 00:00:00 +0300</pubDate>
        <guid>https://masterex.github.io/archive/2011/08/22/blood-donation.html</guid>
    </item>
    <item>
        <title>Hello World AsciiBlog :)</title>
        <link>https://masterex.github.io/archive/2011/08/06/asciiblog.html</link>
        <description>Hello World AsciiBlog :)</description>
        <content:encoded>
<![CDATA[
		<div class="sect1">
<h2 id="_hello_world_asciiblog">Hello World AsciiBlog :)</h2>
<div class="sectionbody">
<div class="paragraph" id="hello-world-asciiblog"><p><a href="https://github.com/MasterEx/AsciiBlog">AsciiBlog</a> is a blog engine based on
<a href="http://www.methods.co.nz/asciidoc/">Asciidoc</a>. It generates a blog in plain html.
The idea is to have a blog in plain html generated just as the
Asciidoc <a href="http://www.methods.co.nz/asciidoc/">homepage</a>.</p></div>
<div class="paragraph" id="hello-world-asciiblog"><p>Just a moment! That&#8217;s asciidoc already! So what&#8217;s so special about
AsciiBlog?</p></div>
<div class="paragraph" id="hello-world-asciiblog"><p>All the magic is just some shell and bash scripts that automate the hole
procedure. Everything else is just Asciidoc.</p></div>
<div class="paragraph" id="hello-world-asciiblog"><p>Bellow I will explain you the logic behind Asciiblog, the workflow of the
blogging process and I&#8217;ll point out some
features that are missing and I would like to implement in the future.</p></div>
<div class="paragraph" id="hello-world-asciiblog"><p>As you will see it is very premature at the moment (just version 0.1)
but it works (this blog is actually a proof of concept) and it is another
option out there.</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_introduction">Introduction</h2>
<div class="sectionbody">
<div class="paragraph" id="hello-world-asciiblog"><p>Before I continue I&#8217;ll remind you that Asciiblog is just Asciidoc so
every page (that includes the posts) that is generated was previously written
in Asciidoc <a href="http://en.wikipedia.org/wiki/Markdown">markdown</a>.</p></div>
<div class="paragraph" id="hello-world-asciiblog"><p>Here it is the directory hierarchy of Asciiblog.</p></div>
<div class="listingblock">
<a id="hello-world-asciiblog"></a>
<div class="title">Hierarchy</div>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt>archive<span style="color: #990000">/</span>
bin<span style="color: #990000">/</span>
images<span style="color: #990000">/</span>
javascripts<span style="color: #990000">/</span>
layouts<span style="color: #990000">/</span>
mainsite<span style="color: #990000">/</span>
styles<span style="color: #990000">/</span>
website<span style="color: #990000">/</span></tt></pre></div></div>
<div class="paragraph" id="hello-world-asciiblog"><p>Let&#8217;s see it in more detail.</p></div>
<div class="sect2">
<h3 id="_archive">Archive</h3>
<div class="paragraph" id="hello-world-asciiblog"><p>Archive contains the posts written in Asciidoc markdown.</p></div>
<div class="paragraph" id="hello-world-asciiblog"><p>To create a new post we invoke the <span class="blue">new-post.sh</span> script from within bin directory.
A new empty text file then is created. The file name is <span class="green">&lt;unix time&gt;.txt</span>
except if the script is invoked like <span class="blue">new-post.sh</span> some-name. Then the new file
will be named <span class="green">&lt;some-name&gt;.txt</span>.</p></div>
<div class="paragraph" id="hello-world-asciiblog"><p>Every post resides in <span class="green">archive/YEAR/MONTH/DAY/&lt;some-name&gt;.html</span>. The
directories <span class="green">YEAR/MONTH/DAY/</span> are created automatically by the
<span class="blue">new-post.sh</span> script.</p></div>
</div>
<div class="sect2">
<h3 id="_bin">Bin</h3>
<div class="paragraph" id="hello-world-asciiblog"><p>Bin contains all the Asciiblog magic. Currently there are <strong>6</strong> scripts.</p></div>
<div class="sect3">
<h4 id="_archive_sh">archive.sh</h4>
<div class="paragraph" id="hello-world-asciiblog"><p>Creates a nice directory/post listing, instead of the default webserver
directory/file listing, that look like that:</p></div>
<div class="sidebarblock" id="hello-world-asciiblog">
<div class="content">
<div class="paragraph" id="hello-world-asciiblog"><p><a href="file:../../..">archive</a></p></div>
<div class="paragraph" id="hello-world-asciiblog"><p><a href="file:../..">archive/2011</a></p></div>
<div class="paragraph" id="hello-world-asciiblog"><p><a href="file:..">archive/2011/08</a></p></div>
<div class="paragraph" id="hello-world-asciiblog"><p><a href="file:index.html">archive/2011/08/03</a></p></div>
</div></div>
</div>
<div class="sect3">
<h4 id="_build_website_sh">build-website.sh</h4>
<div class="paragraph" id="hello-world-asciiblog"><p>It generates the pages that aren&#8217;t posts. These pages are located in
<span class="blue">mainsite</span> directory. Every page should be included separetely just
like that:</p></div>
<div class="listingblock">
<a id="hello-world-asciiblog"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #009900">main</span><span style="color: #990000">=</span><span style="color: #FF0000">"$(dirname "</span><span style="color: #009900">$0</span><span style="color: #FF0000">")/../mainsite"</span>
<span style="color: #009900">pageroot</span><span style="color: #990000">=</span><span style="color: #FF0000">"$(dirname "</span><span style="color: #009900">$0</span><span style="color: #FF0000">")/../website"</span>
<span style="color: #990000">...</span>
<span style="color: #009900">$ASCIIDOC_HTML</span> -a index-only -o<span style="color: #FF0000">"$pageroot/index.html"</span> <span style="color: #FF0000">"$main/index.txt"</span>
<span style="color: #009900">$ASCIIDOC_HTML</span> -d <span style="color: #FF0000">"book"</span> -o<span style="color: #FF0000">"$pageroot/archive.html"</span> <span style="color: #FF0000">"$main/archive.txt"</span>
<span style="color: #009900">$ASCIIDOC_HTML</span> -o<span style="color: #FF0000">"$pageroot/about.html"</span> <span style="color: #FF0000">"$main/about.txt"</span></tt></pre></div></div>
<div class="paragraph" id="hello-world-asciiblog"><p>This script should be changed accordingly.</p></div>
</div>
<div class="sect3">
<h4 id="_createrss_sh">createrss.sh</h4>
<div class="paragraph" id="hello-world-asciiblog"><p>Creates the RSS feed <span class="green">archive.rss</span> in the website home directory.
This RSS file contains the post titles and the publication dates.</p></div>
</div>
<div class="sect3">
<h4 id="_new_post_sh">new-post.sh</h4>
<div class="paragraph" id="hello-world-asciiblog"><p>I have talked about that in the <span class="blue">archive.sh</span> section sooner.</p></div>
</div>
<div class="sect3">
<h4 id="_post_it_sh">post-it.sh</h4>
<div class="paragraph" id="hello-world-asciiblog"><p>This script has to be invoked from within the post directory.</p></div>
<div class="paragraph" id="hello-world-asciiblog"><p>Let&#8217;s say this post I am writting right now is located in
<span class="green">archive/2011/08/03/asciiblog.html</span>. I should publish it like</p></div>
<div class="listingblock">
<a id="hello-world-asciiblog"></a>
<div class="content"><!-- Generator: GNU source-highlight 3.1.9
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt>myBlog/archive<span style="color: #990000">/</span><span style="color: #993399">2011</span><span style="color: #990000">/</span><span style="color: #993399">08</span><span style="color: #990000">/</span><span style="color: #993399">03</span><span style="color: #009900">$.</span><span style="color: #990000">./../../..</span>/bin/post-it<span style="color: #990000">.</span>sh asciiblog<span style="color: #990000">.</span>txt</tt></pre></div></div>
<div class="paragraph" id="hello-world-asciiblog"><p>That command will add an entry for the new post in <span class="green">mainsite/archive.txt</span>
and then will generate the post and the new archive page.</p></div>
<div class="paragraph" id="hello-world-asciiblog"><p>If it&#8217;s invoked with the -r attribute the <span class="green">archive.txt</span> won&#8217;t be
updated and regenerated. This is helpfull when editing a post and want to
republish it without adding a new entry to <span class="green">archive.txt</span>.</p></div>
</div>
<div class="sect3">
<h4 id="_rsswriter_sh">rsswriter.sh</h4>
<div class="paragraph" id="hello-world-asciiblog"><p>This script contains functions that help the rss file creation.</p></div>
</div>
</div>
<div class="sect2">
<h3 id="_images">Images</h3>
<div class="paragraph" id="hello-world-asciiblog"><p>It contains the website images.</p></div>
</div>
<div class="sect2">
<h3 id="_javascripts">Javascripts</h3>
<div class="paragraph" id="hello-world-asciiblog"><p>It contains the javascript that is included in the static html.</p></div>
</div>
<div class="sect2">
<h3 id="_layouts">Layouts</h3>
<div class="paragraph" id="hello-world-asciiblog"><p>It contains the layouts. Layout is the html that is placed previously
and after every generated page.</p></div>
<div class="paragraph" id="hello-world-asciiblog"><p>There are <strong>3</strong> different layouts, one for the <span class="blue">mainsite</span> pages, one
for the blog posts and one for the <span class="green">archive.sh</span> script. That layouts
are actually the same template except that the url&#8217;s are different.</p></div>
</div>
<div class="sect2">
<h3 id="_mainsite">Mainsite</h3>
<div class="paragraph" id="hello-world-asciiblog"><p>It contains the pages that aren&#8217;t posts.</p></div>
</div>
<div class="sect2">
<h3 id="_styles">Styles</h3>
<div class="paragraph" id="hello-world-asciiblog"><p>It contains the css files.</p></div>
</div>
<div class="sect2">
<h3 id="_website">Website</h3>
<div class="paragraph" id="hello-world-asciiblog"><p>It contains the hole generated website.</p></div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_workflow">Workflow</h2>
<div class="sectionbody">
<div class="paragraph" id="hello-world-asciiblog"><p>Now I&#8217;ll explain how you can build a website like this one with Asciiblog.</p></div>
<div class="paragraph" id="hello-world-asciiblog"><p>First of all you have to modify the layouts and styles. There you will include
your website design (html and css).</p></div>
<div class="paragraph" id="hello-world-asciiblog"><p>After that write something nice that will be the pages that aren&#8217;t posts and
place them in the mainsite directory. Then modify the <span class="green">build-website.sh</span>
script accordingly and run it.</p></div>
<div class="paragraph" id="hello-world-asciiblog"><p>The next step is to run the <span class="green">new-post.sh</span> script that creates a new file,
write a cool post and then run the <span class="green">post-it.sh</span> script to generate it.</p></div>
<div class="paragraph" id="hello-world-asciiblog"><p>Run the <span class="green">archive.sh</span> to create the directory/post listing and then
the <span class="green">createrss.sh</span>
to update the <span class="green">archive.rss</span>.</p></div>
<div class="paragraph" id="hello-world-asciiblog"><p><strong>Tah-dah!</strong> Now you have your website build and ready!</p></div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph" id="hello-world-asciiblog"><p>The procedure is working but it isn&#8217;t very smooth at the moment. Asciiblog promotes
the <a href="http://c00kiemon5ter.github.com/code/2011/04/14/Blogging-like-Coding.html">blogging
like coding</a> way of blogging. It isn&#8217;t supposed to be mainstream but it&#8217;s far
enough from being as easy to use as I would like to be, so there is
plenty of room for improvement.</p></div>
<div class="sect2">
<h3 id="_features_that_are_missing_and_things_that_must_be_done">Features that are missing and things that must be done</h3>
<div class="ulist" id="hello-world-asciiblog"><ul>
<li>
<p>
Tags
</p>
</li>
<li>
<p>
Post deletion
</p>
</li>
<li>
<p>
Post comments - that can be done right now with <a href="http://disqus.com/">disqus</a>
 or something like that but I have to spent a little more thinking about that.
</p>
</li>
<li>
<p>
Cleanup the scripts
</p>
</li>
<li>
<p>
Use global configuration file for the scripts
</p>
</li>
<li>
<p>
Add the scripts to the executables search path to call them without
 defining the full path
</p>
</li>
</ul></div>
</div>
</div>
</div>
		]]>
</content:encoded>
        
        <pubDate>Sat, 06 Aug 2011 00:00:00 +0300</pubDate>
        <guid>https://masterex.github.io/archive/2011/08/06/asciiblog.html</guid>
    </item>
  </channel>
</rss>
